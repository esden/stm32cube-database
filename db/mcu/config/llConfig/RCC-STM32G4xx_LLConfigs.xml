<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP xmlns="http://mcd.rou.st.com/modules.php?name=mcu" DBVersion="V4.0" Name="RCC" Version="STM32Cube_FW_G4_V0.2.0" IncludeFile="stm32g4xx_ll_rcc.h;stm32g4xx_ll_bus.h;stm32g4xx_ll_crs.h;stm32g4xx_ll_system.h;stm32g4xx_ll_exti.h;stm32g4xx_ll_cortex.h;stm32g4xx_ll_utils.h;stm32g4xx_ll_pwr.h;stm32g4xx_ll_dma.h" xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance" ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">
    <RefConfig Name="RCC_OSCConfigExamples">
        <IFCondition Expression ="1=1">
            <CallLibMethod Name="LL_FLASH_SetLatency">
                <MethodArg Name="Latency" ParameterName="FLatency"/>
           
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_0">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_2">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_3">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_3)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_4">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_5">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_6">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_6)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_7">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_7)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>

        <!--voltage scaling configuration-->
        <IFCondition Expression ="PWR_Regulator_Voltage_Scale=PWR_REGULATOR_VOLTAGE_SCALE1">

            <CallLibMethod Name="LL_PWR_SetRegulVoltageScaling">
                <MethodArg Name="VoltageScaling" ParameterName="PWR_Regulator_Voltage_Scale"/>
            
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="PWR_Regulator_Voltage_Scale=PWR_REGULATOR_VOLTAGE_SCALE2">

            <CallLibMethod Name="LL_PWR_SetRegulVoltageScaling">
                <MethodArg Name="VoltageScaling" ParameterName="PWR_Regulator_Voltage_Scale"/>
            
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="PWR_Regulator_Voltage_Scale=PWR_REGULATOR_VOLTAGE_SCALE1_BOOST">

            <CallLibMethod Name="LL_PWR_EnableRange1BoostMode">
            </CallLibMethod>
        </IFCondition>

        <!--Clock source activation-->      

        <IFCondition Expression ="(HSEUsedForSys=1) &amp; HSEByPass ">
            <CallLibMethod Name="LL_RCC_HSE_EnableBypass" />
        </IFCondition>
     
		
        <IFCondition Expression ="(HSEUsedForSys=1)">
            <CallLibMethod Name="LL_RCC_HSE_Enable"/>
   
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till HSE is ready */#n#twhile(LL_RCC_HSE_IsReady() != 1)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>   
  
		
        <IFCondition Expression ="(HSIUsedForSys=1)">
            <CallLibMethod Name="LL_RCC_HSI_Enable"/>
     
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till HSI is ready */#n#twhile(LL_RCC_HSI_IsReady() != 1)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="(HSIUsedForSys=1)">
            <CallLibMethod Name="LL_RCC_HSI_SetCalibTrimming">
                <MethodArg Name="Value" ParameterName="HSICalibrationValue"/>
            </CallLibMethod>
        </IFCondition>
        <!--PLL configuration-->
		
        <IFCondition Expression ="PLLUsedForSys=1">
            <CallLibMethod Name="LL_RCC_PLL_ConfigDomain_SYS">
                <MethodArg Name="Source" ParameterName="PLLSource"/>
                <MethodArg Name="PLLM" ParameterName="PLLM"/>
                <MethodArg Name="PLLN" ParameterName="PLLN"/>
                <MethodArg Name="PLLR" ParameterName="PLLR"/>
            </CallLibMethod>
        </IFCondition>
                
        <!--PLL activation-->	
		
        <IFCondition Expression ="PLLUsedForSys=1">
            <CallLibMethod Name="LL_RCC_PLL_EnableDomain_SYS"/>
        </IFCondition>

		
        <IFCondition Expression ="SysSourcePLL">
            <CallLibMethod Name="LL_RCC_PLL_Enable"/>
   
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till PLL is ready */#n#twhile(LL_RCC_PLL_IsReady() != 1)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
		


        <!--sys clock source + AHB/APB configuration-->
        <IFCondition Expression ="1=1">
            <IFCondition Expression ="(HCLKFreq_Value &gt; 80000000)">
            <CallLibMethod Name="LL_RCC_SetAHBPrescaler">
                <MethodArg Name="Prescaler" ParameterName="AHBCLKDivider" FValue="LL_RCC_SYSCLK_DIV_2"/>
            </CallLibMethod>
            </IFCondition>

            <CallLibMethod Name="LL_RCC_SetSysClkSource">
                <MethodArg Name="Source" ParameterName="SYSCLKSource"/>
            </CallLibMethod>
        
        
        </IFCondition>
        <IFCondition Expression ="SysSourcePLL">

            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="SysSourceHSE">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="SysSourceHSI">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="SysSourceMSI">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>		

        <IFCondition Expression ="(HCLKFreq_Value &gt; 80000000)">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t/* Insure 1µs transition state at intermediate medium speed clock based on DWT */"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#tCoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;#n#tDWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#tDWT->CYCCNT = 0;"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(DWT->CYCCNT &lt; 100);"/>
            </CallLibMethod>
         
        </IFCondition>
        <IFCondition Expression ="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t/* Set AHB prescaler*/"/>
            </CallLibMethod>

            <CallLibMethod Name="LL_RCC_SetAHBPrescaler">
                <MethodArg Name="Prescaler" ParameterName="AHBCLKDivider"/>
            </CallLibMethod>
        </IFCondition>

     
        <IFCondition Expression ="1=1">
            <CallLibMethod Name="LL_RCC_SetAPB1Prescaler">
                <MethodArg Name="Prescaler" ParameterName="APB1CLKDivider"/>
            </CallLibMethod>
        </IFCondition>

        <IFCondition Expression ="1=1">
            <CallLibMethod Name="LL_RCC_SetAPB2Prescaler">
                <MethodArg Name="Prescaler" ParameterName="APB2CLKDivider"/>
            </CallLibMethod>
        </IFCondition>

        <!--system core frequency set,systick init,systick priority configuration-->
        <IFCondition Expression ="USE_FULL_LL_DRIVER">
             <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n"/>
            </CallLibMethod>
            <CallLibMethod Name="LL_Init1msTick">
                <MethodArg Name="HCLKFrequency" ParameterName="CortexFreq_Value"/>
            
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n"/>
            </CallLibMethod>
        </IFCondition>

        <IFCondition Expression ="1=1">

            <CallLibMethod Name="LL_SetSystemCoreClock">
                <MethodArg Name="HCLKFrequency" ParameterName="HCLKFreq_Value"/>
            
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="!USE_FULL_LL_DRIVER">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Update the time base */"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#tif (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)#n#t{#n#t#tError_Handler();#n#t}"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig>
    <RefConfig Name="RCC_OSCConfig">
      
        <!--flash latency configuration-->

        <IFCondition Expression ="1=1">

            <CallLibMethod Name="LL_FLASH_SetLatency">
                <MethodArg Name="Latency" ParameterName="FLatency"/>
            
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_0">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_2">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_3">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_3)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_4">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_5">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_6">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_6)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="FLatency=FLASH_LATENCY_7">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_7)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>

        <!--voltage scaling configuration-->
        <IFCondition Expression ="PWR_Regulator_Voltage_Scale=PWR_REGULATOR_VOLTAGE_SCALE1">

            <CallLibMethod Name="LL_PWR_SetRegulVoltageScaling">
                <MethodArg Name="VoltageScaling" ParameterName="PWR_Regulator_Voltage_Scale"/>
            
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="PWR_Regulator_Voltage_Scale=PWR_REGULATOR_VOLTAGE_SCALE2">

            <CallLibMethod Name="LL_PWR_SetRegulVoltageScaling">
                <MethodArg Name="VoltageScaling" ParameterName="PWR_Regulator_Voltage_Scale"/>
            
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="PWR_Regulator_Voltage_Scale=PWR_REGULATOR_VOLTAGE_SCALE1_BOOST">

            <CallLibMethod Name="LL_PWR_EnableRange1BoostMode">
            </CallLibMethod>
        </IFCondition>

        <!--Clock source activation-->
      

        <IFCondition Expression ="HSEUsed=1 &amp; HSEByPass ">
            <CallLibMethod Name="LL_RCC_HSE_EnableBypass" />
        </IFCondition>
     
		
        <IFCondition Expression ="HSEUsed=1">
            <CallLibMethod Name="LL_RCC_HSE_Enable"/>
   
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till HSE is ready */#n#twhile(LL_RCC_HSE_IsReady() != 1)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>   
  
		
        <IFCondition Expression ="HSIUsed=1">
            <CallLibMethod Name="LL_RCC_HSI_Enable"/>
     
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till HSI is ready */#n#twhile(LL_RCC_HSI_IsReady() != 1)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="HSIUsed=1">
            <CallLibMethod Name="LL_RCC_HSI_SetCalibTrimming">
                <MethodArg Name="Value" ParameterName="HSICalibrationValue"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="HSI48Used=1">
            <CallLibMethod Name="LL_RCC_HSI48_Enable"/>

            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till HSI48 is ready */#n#twhile(LL_RCC_HSI48_IsReady() != 1)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
		
				
        <IFCondition Expression ="LSIUsed=1">
            <CallLibMethod Name="LL_RCC_LSI_Enable"/>

            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till LSI is ready */#n#twhile(LL_RCC_LSI_IsReady() != 1)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression ="RTCUsed_ForRCC|LSCOConfig|(LSEUsed=1)">
            <CallLibMethod Name="LL_PWR_EnableBkUpAccess">
            </CallLibMethod>
        </IFCondition>       
		
        <!--LSCO  code gen-->
        <IFCondition Expression ="LSCOConfig">
            <CallLibMethod Name="LL_RCC_LSCO_Enable"/>
        </IFCondition>
		
        <IFCondition Expression ="LSCOConfig">
            <CallLibMethod Name="LL_RCC_LSCO_SetSource">
                <MethodArg Name="Source" ParameterName="LSCOSource1"/>
            </CallLibMethod>
        </IFCondition>
 
        <IFCondition Expression ="LSEUsed=1 &amp; LSEByPass">
            <CallLibMethod Name="LL_RCC_LSE_EnableBypass"/>
        </IFCondition>
        <IFCondition Expression ="LSEOscillator &amp;(LSEUsed=1)">
            <CallLibMethod Name="LL_RCC_LSE_SetDriveCapability">
                <MethodArg Name="LSEDrive" ParameterName="LSE_Drive_Capability"/>
            </CallLibMethod>
        
        </IFCondition> 
        <IFCondition Expression ="LSEUsed=1">
            <CallLibMethod Name="LL_RCC_LSE_Enable"/>
         
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till LSE is ready */#n#twhile(LL_RCC_LSE_IsReady() != 1)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition> 

		
        <!--CSS enable code gen-->
        <IFCondition Expression ="CSSEnabled">
            <CallLibMethod Name="LL_RCC_HSE_EnableCSS"/>
        </IFCondition>
		
        <IFCondition Expression ="RCC_LSECSS_ENABLED">
            <CallLibMethod Name="LL_RCC_LSE_EnableCSS"/>
        </IFCondition>

        <!--PLL configuration-->
		
        <IFCondition Expression ="PLLUsedForSys=1">
            <CallLibMethod Name="LL_RCC_PLL_ConfigDomain_SYS">
                <MethodArg Name="Source" ParameterName="PLLSource"/>
                <MethodArg Name="PLLM" ParameterName="PLLM"/>
                <MethodArg Name="PLLN" ParameterName="PLLN"/>
                <MethodArg Name="PLLR" ParameterName="PLLR"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="PLLUsedForADC=1">
            <CallLibMethod Name="LL_RCC_PLL_ConfigDomain_ADC">
                <MethodArg Name="Source" ParameterName="PLLSource"/>
                <MethodArg Name="PLLM" ParameterName="PLLM"/>
                <MethodArg Name="PLLN" ParameterName="PLLN"/>
                <MethodArg Name="PLLP" ParameterName="PLLP"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="PLLUsedFor48=1">
            <CallLibMethod Name="LL_RCC_PLL_ConfigDomain_48M">
                <MethodArg Name="Source" ParameterName="PLLSource"/>
                <MethodArg Name="PLLM" ParameterName="PLLM"/>
                <MethodArg Name="PLLN" ParameterName="PLLN"/>
                <MethodArg Name="PLLQ" ParameterName="PLLQ"/>
            </CallLibMethod>
        </IFCondition>
        
        <!--PLL activation-->
	
		
        <IFCondition Expression ="PLLUsedForSys=1">
            <CallLibMethod Name="LL_RCC_PLL_EnableDomain_SYS"/>
        </IFCondition>
        
        <IFCondition Expression ="PLLUsedFor48=1">
            <CallLibMethod Name="LL_RCC_PLL_EnableDomain_48M"/>
        </IFCondition>
       
        <IFCondition Expression ="PLLUsedForADC=1">
            <CallLibMethod Name="LL_RCC_PLL_EnableDomain_ADC"/>
        </IFCondition>

		
        <IFCondition Expression ="PLLUsed=1">
            <CallLibMethod Name="LL_RCC_PLL_Enable"/>
   
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till PLL is ready */#n#twhile(LL_RCC_PLL_IsReady() != 1)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
		


        <!--sys clock source + AHB/APB configuration-->
        <IFCondition Expression ="1=1">

            <IFCondition Expression ="(HCLKFreq_Value &gt; 80000000)">
            <CallLibMethod Name="LL_RCC_SetAHBPrescaler">
                <MethodArg Name="Prescaler" ParameterName="AHBCLKDivider" FValue="LL_RCC_SYSCLK_DIV_2"/>
            </CallLibMethod>
            </IFCondition>
            <CallLibMethod Name="LL_RCC_SetSysClkSource">
                <MethodArg Name="Source" ParameterName="SYSCLKSource"/>
            </CallLibMethod>
        
        
        </IFCondition>
        <IFCondition Expression ="SysSourcePLL">

            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="SysSourceHSE">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="SysSourceHSI">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="SysSourceMSI">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)#n#t{#n#t}#n"/>
            </CallLibMethod>
        </IFCondition>		

        <IFCondition Expression ="(HCLKFreq_Value &gt; 80000000)">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t/* Insure 1µs transition state at intermediate medium speed clock based on DWT */"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#tCoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;#n#tDWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#tDWT->CYCCNT = 0;"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(DWT->CYCCNT &lt; 100);"/>
            </CallLibMethod>         
        </IFCondition>
        <IFCondition Expression ="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t/* Set AHB prescaler*/"/>
            </CallLibMethod>
            <CallLibMethod Name="LL_RCC_SetAHBPrescaler">
                <MethodArg Name="Prescaler" ParameterName="AHBCLKDivider"/>
            </CallLibMethod>
        </IFCondition>

     
        <IFCondition Expression ="1=1">
            <CallLibMethod Name="LL_RCC_SetAPB1Prescaler">
                <MethodArg Name="Prescaler" ParameterName="APB1CLKDivider"/>
            </CallLibMethod>
        </IFCondition>

        <IFCondition Expression ="1=1">
            <CallLibMethod Name="LL_RCC_SetAPB2Prescaler">
                <MethodArg Name="Prescaler" ParameterName="APB2CLKDivider"/>
            </CallLibMethod>
        </IFCondition>

        <!--system core frequency set,systick init,systick priority configuration-->
        <IFCondition Expression ="USE_FULL_LL_DRIVER">
             <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n"/>
            </CallLibMethod>
            <CallLibMethod Name="LL_Init1msTick">
                <MethodArg Name="HCLKFrequency" ParameterName="CortexFreq_Value"/>
            
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n"/>
            </CallLibMethod>
        </IFCondition>

        <IFCondition Expression ="1=1">

            <CallLibMethod Name="LL_SetSystemCoreClock">
                <MethodArg Name="HCLKFrequency" ParameterName="HCLKFreq_Value"/>
            
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="!USE_FULL_LL_DRIVER">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Update the time base */"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#tif (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)#n#t{#n#t#tError_Handler();#n#t}"/>
            </CallLibMethod>
        </IFCondition>

             

        <!--MCO clock source -->
        <IFCondition Expression ="((Semaphore_input_Channel1TIM17 &amp; TIM17 &amp; SEM2RCC_MCO_REQUIRED_TIM17)|MCOConfig)">
            <CallLibMethod Name="LL_RCC_ConfigMCO">
                <MethodArg Name="MCOxPrescaler" ParameterName="RCC_MCODiv"/>
                <MethodArg Name="MCOxSource" ParameterName="RCC_MCO1Source"/>
            </CallLibMethod>
        </IFCondition>
        
        <!--CRS PARAM -->
		    <IFCondition Expression ="EnableCRS">
            <CallLibMethod Name="LL_APB1_GRP1_EnableClock">
                <MethodArg Name="Periphs" ParameterName="PERIPH_CRSAEG"/>
            </CallLibMethod>
        </IFCondition>  
		
		    <IFCondition Expression ="EnableCRS">
            <CallLibMethod Name="LL_APB1_GRP1_ForceReset">
                <MethodArg Name="Periphs" ParameterName="PERIPH_CRSAEG"/>
            </CallLibMethod>
        </IFCondition>  
		
		    <IFCondition Expression ="EnableCRS">
            <CallLibMethod Name="LL_APB1_GRP1_ReleaseReset">
                <MethodArg Name="Periphs" ParameterName="PERIPH_CRSAEG"/>
            </CallLibMethod>
        </IFCondition>  
		
		
        <IFCondition Expression ="EnableCRS">
            <CallLibMethod Name="LL_CRS_SetSyncDivider">
                <MethodArg Name="Divider" ParameterName="Prescaler"/>
            </CallLibMethod>
        </IFCondition>  
		
		<IFCondition Expression ="EnableCRS">
            <CallLibMethod Name="LL_CRS_SetSyncPolarity">
                <MethodArg Name="Divider" ParameterName="Polarity"/>
            </CallLibMethod>
        </IFCondition>

		<IFCondition Expression ="EnableCRS">
            <CallLibMethod Name="LL_CRS_SetSyncSignalSource">
                <MethodArg Name="Source" ParameterName="Source"/>
            </CallLibMethod>
        </IFCondition>
	
		
		<IFCondition Expression ="EnableCRS">
            <CallLibMethod Name="LL_CRS_SetReloadCounter">
                <MethodArg Name="Value" ParameterName="ReloadValueARGLL"/>
            </CallLibMethod>
        </IFCondition>
		<IFCondition Expression ="EnableCRS">
            <CallLibMethod Name="LL_CRS_SetFreqErrorLimit">
                <MethodArg Name="Value" ParameterName="ErrorLimitValue"/>
            </CallLibMethod>
        </IFCondition>
		<IFCondition Expression ="EnableCRS">
            <CallLibMethod Name="LL_CRS_SetHSI48SmoothTrimming">
                <MethodArg Name="Value" ParameterName="HSI48CalibrationValue"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig>
        <RefConfig Name="RCC_PClockConfig">

        <IFCondition Expression ="(CodegenConfigPeriph=true) &amp;RTCUsed_ForRCC &amp; RTCClockSelection=RCC_RTCCLKSOURCE_LSI">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#tif(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)#n#t{"/>
            </CallLibMethod>
        <Else>
            <IFCondition Expression ="(CodegenConfigPeriph=true) &amp;RTCUsed_ForRCC &amp; RTCClockSelection=RCC_RTCCLKSOURCE_LSE">
                <CallLibMethod Name="" Type="HardCode">
                    <HardCode Text="#tif(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)#n#t{"/>
                </CallLibMethod>
                <Else>
                    <IFCondition Expression ="(CodegenConfigPeriph=true) &amp;RTCUsed_ForRCC &amp; RTCClockSelection=RCC_RTCCLKSOURCE_HSE_DIV32">
                        <CallLibMethod Name="" Type="HardCode">
                            <HardCode Text="#tif(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_HSE_DIV32)#n#t{"/>
                            </CallLibMethod>
                    </IFCondition>
                </Else>
            </IFCondition>
        </Else>
        </IFCondition>

        <IFCondition Expression ="(CodegenConfigPeriph=true) &amp;RTCUsed_ForRCC">
            <CallLibMethod Name="#tLL_RCC_ForceBackupDomainReset">
            </CallLibMethod>

            <CallLibMethod Name="#tLL_RCC_ReleaseBackupDomainReset">
            </CallLibMethod>
        </IFCondition>

        <IFCondition Expression ="(CodegenConfigPeriph=true) &amp; (RTCUsed_ForRCC|LCDUsed_ForRCC)">
            <CallLibMethod Name="#tLL_RCC_SetRTCClockSource">
                <MethodArg Name="Source" ParameterName="RTCClockSelection"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="(CodegenConfigPeriph=true) &amp;RTCUsed_ForRCC">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="RTCUsed_ForRCC|LCDUsed_ForRCC">
            <CallLibMethod Name="LL_RCC_EnableRTC"/>
        </IFCondition>
		
        <IFCondition Expression ="RNGUsed_ForRCC">
            <CallLibMethod Name="LL_RCC_SetRNGClockSource">
                <MethodArg Name="RNGxSource" ParameterName="RNGCLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="FDCAN1Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetFDCANClockSource">
                <MethodArg Name="FDCANxSource" ParameterName="FDCANCLockSelection"/>
            </CallLibMethod>
        </IFCondition>

        <IFCondition Expression ="USBUsed_ForRCC">
            <CallLibMethod Name="LL_RCC_SetUSBClockSource">
                <MethodArg Name="USBxSource" ParameterName="CK48CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        
        <!--peripheral clock source configuration -->
        <IFCondition Expression ="USART1Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetUSARTClockSource">
                <MethodArg Name="USARTxSource" ParameterName="USART1CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression ="LPUARTUsed_ForRCC">
            <CallLibMethod Name="LL_RCC_SetLPUARTClockSource">
                <MethodArg Name="LPUARTxSource" ParameterName="LPUART1CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression ="USART2Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetUSARTClockSource">
                <MethodArg Name="USARTxSource" ParameterName="USART2CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="USART3Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetUSARTClockSource">
                <MethodArg Name="USARTxSource" ParameterName="USART3CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="UART4Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetUARTClockSource">
                <MethodArg Name="UARTxSource" ParameterName="UART4CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="UART5Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetUARTClockSource">
                <MethodArg Name="UARTxSource" ParameterName="UART5CLockSelection"/>
            </CallLibMethod>
        </IFCondition>

		
        <IFCondition Expression ="I2C1Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetI2CClockSource">
                <MethodArg Name="I2CxSource" ParameterName="I2C1CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="I2C2Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetI2CClockSource">
                <MethodArg Name="I2CxSource" ParameterName="I2C2CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="I2C3Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetI2CClockSource">
                <MethodArg Name="I2CxSource" ParameterName="I2C3CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="I2C4Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetI2CClockSource">
                <MethodArg Name="I2CxSource" ParameterName="I2C4CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression ="LPTIM2Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetLPTIMClockSource">
                <MethodArg Name="LPTIMxSource" ParameterName="LPTIM2CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression ="LPTIM1Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetLPTIMClockSource">
                <MethodArg Name="LPTIMxSource" ParameterName="LPTIM1CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression ="USE_ADC1 | USE_ADC2">
            <CallLibMethod Name="LL_RCC_SetADCClockSource">
                <MethodArg Name="ADCxSource" ParameterName="ADC12CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="USE_ADC3 | USE_ADC4 | USE_ADC5">
            <CallLibMethod Name="LL_RCC_SetADCClockSource">
                <MethodArg Name="ADCxSource" ParameterName="ADC345CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="I2S2Used_ForRCC | I2S3Used_ForRCC">
            <CallLibMethod Name="LL_RCC_SetI2SClockSource">
                <MethodArg Name="I2SxSource" ParameterName="I2SCLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="SAI_SAIBUsed_ForRCC | SAI_SAIAUsed_ForRCC|SAIBUsed_ForRCC|SAIAUsed_ForRCC">
            <CallLibMethod Name="LL_RCC_SetSAIClockSource">
                <MethodArg Name="SAIxSource" ParameterName="SAI1CLockSelection"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="QSPI_Selected">
            <CallLibMethod Name="LL_RCC_SetQUADSPIClockSource">
                <MethodArg Name="Source" ParameterName="QSPICLockSelection"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_LSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_LSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_HSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_HSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_PLLRDY"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_HSECSS"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_LSECSS"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_LSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_LSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_HSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_HSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_PLLRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_HSECSS"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_LSECSS"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_IWDGRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_LPWRRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_OBLRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_PINRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_SFTRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_WWDGRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_BORRST"/>
    <LibMethod Comment="" Name="LL_RCC_ClearResetFlags"/>
    <LibMethod Comment="" Name="LL_CRS_SetSyncDivider">
        <Argument AddressOf="false" GenericType="simple" Name="Divider"/>
    </LibMethod>
	    <LibMethod Comment="" Name="LL_CRS_SetSyncPolarity">
        <Argument AddressOf="false" GenericType="simple" Name="Polarity"/>
    </LibMethod>
	    <LibMethod Comment="" Name="LL_CRS_SetSyncSignalSource">
        <Argument AddressOf="false" GenericType="simple" Name="Source"/>
    </LibMethod>
	    <LibMethod Comment="" Name="LL_CRS_SetReloadCounter">
        <Argument AddressOf="false" GenericType="simple" Name="Value"/>
    </LibMethod>
	    <LibMethod Comment="" Name="LL_CRS_SetFreqErrorLimit">
        <Argument AddressOf="false" GenericType="simple" Name="Value"/>
    </LibMethod>
	    <LibMethod Comment="" Name="LL_CRS_SetHSI48SmoothTrimming">
        <Argument AddressOf="false" GenericType="simple" Name="Value"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetSystemClocksFreq">
        <Argument AddressOf="true" GenericType="struct" Name="RCC_Clocks" TypeName="LL_RCC_ClocksTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="SYSCLK_Frequency" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="HCLK_Frequency" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="PCLK1_Frequency" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="PCLK2_Frequency" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetUSARTClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="USARTxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetUARTClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="UARTxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetI2CClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="I2CxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetLPUARTClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="LPUARTxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetLPTIMClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="LPTIMxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetSAIClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="SAIxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetI2SClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="I2SxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetRNGClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="RNGxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetUSBClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="USBxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetADCClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="ADCxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_HSE_EnableCSS"/>
    <LibMethod Comment="" Name="LL_RCC_HSE_EnableBypass"/>
    <LibMethod Comment="" Name="LL_RCC_HSE_DisableBypass"/>
    <LibMethod Comment="" Name="LL_RCC_HSE_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_HSE_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_HSE_IsReady"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_EnableInStopMode"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_DisableInStopMode"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_IsReady"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_GetCalibration"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_SetCalibTrimming">
        <Argument AddressOf="false" GenericType="simple" Name="Value" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_HSI_GetCalibTrimming"/>
    <LibMethod Comment="" Name="LL_RCC_DeInit"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_LSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_LSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_HSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_HSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_PLLRDY"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_LSECSS"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_LSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_LSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_HSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_HSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_PLLRDY"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_LSECSS"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_LSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_LSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_HSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_HSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_PLLRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_LSECSS"/>
    <LibMethod Comment="" Name="LL_RCC_LSCO_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_LSCO_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_LSCO_SetSource">
        <Argument AddressOf="false" GenericType="simple" Name="Source" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_LSCO_GetSource"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_EnableBypass"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_DisableBypass"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_SetDriveCapability">
        <Argument AddressOf="false" GenericType="simple" Name="LSEDrive" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_LSE_GetDriveCapability"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_EnableCSS"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_DisableCSS"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_IsReady"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_IsCSSDetected"/>
    <LibMethod Comment="" Name="LL_RCC_LSI_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_LSI_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_LSI_IsReady"/>
    <LibMethod Comment="" Name="LL_RCC_ConfigMCO">
        <Argument AddressOf="false" GenericType="simple" Name="MCOxSource" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="MCOxPrescaler" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetUSARTClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="USARTxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetUARTClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="UARTxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetLPUARTClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="LPUARTxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetI2CClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="I2CxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetLPTIMClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="LPTIMxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetQUADSPIClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="Source" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetSAIClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="SAIxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetI2SClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="I2SxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetRNGClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="RNGxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetFDCANClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="FDCANxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetUSBClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="USBxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetADCClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="ADCxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetUSARTClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="USARTx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetUARTClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="UARTx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetLPUARTClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="LPUARTx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetI2CClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="I2Cx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetLPTIMClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="LPTIMx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetSAIClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="SAIx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetI2SClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="I2Sx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetRNGClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="RNGx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetUSBClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="USBx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetADCClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="ADCx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_PLL_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_IsReady"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_ConfigDomain_SYS">
        <Argument AddressOf="false" GenericType="simple" Name="Source" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="PLLM" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="PLLN" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="PLLR" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_PLL_ConfigDomain_ADC">
        <Argument AddressOf="false" GenericType="simple" Name="Source" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="PLLM" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="PLLN" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="PLLP" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_PLL_ConfigDomain_48M">
        <Argument AddressOf="false" GenericType="simple" Name="Source" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="PLLM" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="PLLN" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="PLLQ" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_PLL_GetN"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_GetP"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_GetQ"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_GetR"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_GetMainSource"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_GetDivider"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_EnableDomain_ADC"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_DisableDomain_ADC"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_EnableDomain_48M"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_DisableDomain_48M"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_EnableDomain_SYS"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_DisableDomain_SYS"/>
    <LibMethod Comment="" Name="LL_PWR_EnableRange1BoostMode"/>
    <LibMethod Comment="" Name="#tLL_RCC_SetRTCClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="Source" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetRTCClockSource"/>
    <LibMethod Comment="" Name="LL_RCC_EnableRTC"/>
    <LibMethod Comment="" Name="LL_RCC_DisableRTC"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledRTC"/>
    <LibMethod Comment="" Name="#tLL_RCC_ForceBackupDomainReset"/>
    <LibMethod Comment="" Name="#tLL_RCC_ReleaseBackupDomainReset"/>
    <LibMethod Comment="" Name="LL_RCC_SetSysClkSource">
        <Argument AddressOf="false" GenericType="simple" Name="Source" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetSysClkSource"/>
    <LibMethod Comment="" Name="LL_RCC_SetAHBPrescaler">
        <Argument AddressOf="false" GenericType="simple" Name="Prescaler" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetAPB1Prescaler">
        <Argument AddressOf="false" GenericType="simple" Name="Prescaler" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetAPB2Prescaler">
        <Argument AddressOf="false" GenericType="simple" Name="Prescaler" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_FLASH_SetLatency">
        <Argument AddressOf="false" GenericType="simple" Name="FLatency"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_PWR_SetRegulVoltageScaling">
        <Argument AddressOf="false" GenericType="simple" Name="VoltageScaling"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_PWR_EnableBkUpAccess"/>
    <LibMethod Comment="" Name="LL_RCC_GetAHBPrescaler"/>
    <LibMethod Comment="" Name="LL_RCC_GetAPB1Prescaler"/>
    <LibMethod Comment="" Name="LL_RCC_GetAPB2Prescaler"/>

    <LibMethod Comment="" Name="LL_SetSystemCoreClock">
        <Argument AddressOf="false" GenericType="simple" Name="HCLKFrequency"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_Init1msTick">
        <Argument AddressOf="false" GenericType="simple" Name="HCLKFrequency"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_APB1_GRP1_EnableClock">
        <Argument AddressOf="false" GenericType="simple" Name="Periphs"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_APB1_GRP1_ForceReset">
        <Argument AddressOf="false" GenericType="simple" Name="Periphs"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_APB1_GRP1_ReleaseReset">
        <Argument AddressOf="false" GenericType="simple" Name="Periphs"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_HSI48_Enable"/>
    
    <RefComponent Cclass="HAL" Cgroup="RCC" Cversion="1.5.0">
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_bus.h"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cortex.h"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_rcc.h"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_system.h"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_utils.h"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_ll_utils.c"/> 
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_exti.h"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_ll_exti.c"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_pwr.h"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dmamux.h"/>
        <File Category="header" Name="Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_crs.h"/>
    </RefComponent>
</IP>

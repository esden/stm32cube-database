<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP xmlns="http://mcd.rou.st.com/modules.php?name=mcu" DBVersion="V4.0" Name="RTC" Version="STM32Cube_FW_WBA_V0.4.0" IncludeFile="stm32wbaxx_ll_rtc.h" 
    xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance" ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">
    
    <RefConfig Name="RTC_Init_Only" Comment="">      
        <IFCondition Expression ="(S_SECURE  &amp; (!SEM_M33S)  &amp; (rtcSecureFull=RTC_SECURE_FULL_NO ) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_ALRB=!__NULL) &amp;(RTC_NONSECURE_FEATURE_ALRA=!__NULL) &amp;(RTC_NONSECURE_FEATURE_WUT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_CAL=!__NULL)&amp;(RTC_NONSECURE_FEATURE_TS=!__NULL) )" >
         <CallLibMethod Name="LL_RTC_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="HourFormat" ParameterName="HourFormat"/>
                <MethodArg Name="AsynchPrescaler" ParameterName="AsynchPrediv"/>
                <MethodArg Name="SynchPrescaler" ParameterName="SynchPrediv"/>
            </CallLibMethod>  
            <IFCondition Expression="SSRU_Underflow_Interrupt=Enable">
                    <CallLibMethod Name="LL_RTC_EnableIT_SSRU">
                        <MethodArg Name="RTCx" ParameterName="Instance"/>
                    </CallLibMethod>
           </IFCondition>          
        </IFCondition> 
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS)  &amp; (rtcSecureFull=RTC_SECURE_FULL_NO))" >
            
            <IFCondition Expression ="(rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_ALRB=__NULL &amp; RTC_PRIVILEGE_FEATURE_INIT=__NULL &amp; RTC_PRIVILEGE_FEATURE_ALRA=__NULL &amp; RTC_PRIVILEGE_FEATURE_WUT=__NULL &amp; RTC_PRIVILEGE_FEATURE_TS=__NULL)" >

                <CallLibMethod Name="LL_RTC_SetRtcPrivilege">
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="rtcPrivilege" ParameterName="rtcPrivilegeFull"/>

                </CallLibMethod>
            </IFCondition>
            <IFCondition Expression ="(rtcPrivilegeFull=RTC_PRIVILEGE_FULL_YES)" >

                <CallLibMethod Name="LL_RTC_SetRtcPrivilege">
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="rtcPrivilege" ParameterName="rtcPrivilegeFull"/>

                </CallLibMethod>
            </IFCondition>
              <IFCondition Expression ="(rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_INIT=RTC_PRIVILEGE_FEATURE_INIT) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_WUT=RTC_PRIVILEGE_FEATURE_WUT) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_TS=RTC_PRIVILEGE_FEATURE_TS) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_CAL=RTC_PRIVILEGE_FEATURE_CAL) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_ALRB=RTC_PRIVILEGE_FEATURE_ALRB) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_ALRA=RTC_PRIVILEGE_FEATURE_ALRA)" >

                <CallLibMethod Name="LL_RTC_SetRtcPrivilege">
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="rtcPrivilege" ParameterName="rtcPrivilegeFeatures"/>

                </CallLibMethod>
            </IFCondition>
            <IFCondition Expression="SSRU_Underflow_Interrupt=Enable">
                    <CallLibMethod Name="LL_RTC_EnableIT_SSRU">
                        <MethodArg Name="RTCx" ParameterName="Instance"/>
                    </CallLibMethod>
           </IFCondition>
        </IFCondition> 
        <IFCondition Expression ="(S_SECURE  &amp; SEM_M33S &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_ALRB=__NULL))|(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_ALRA=__NULL))|(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_TS=__NULL))|(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_CAL=__NULL))|(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_WUT=__NULL))" >
          <CallLibMethod Name="LL_RTC_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="HourFormat" ParameterName="HourFormat"/>
                <MethodArg Name="AsynchPrescaler" ParameterName="AsynchPrediv"/>
                <MethodArg Name="SynchPrescaler" ParameterName="SynchPrediv"/>
            </CallLibMethod>    
        </IFCondition>
        <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S)  &amp; (rtcSecureFull=RTC_SECURE_FULL_YES))" >
            <CallLibMethod Name="LL_RTC_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="HourFormat" ParameterName="HourFormat"/>
                <MethodArg Name="AsynchPrescaler" ParameterName="AsynchPrediv"/>
                <MethodArg Name="SynchPrescaler" ParameterName="SynchPrediv"/>
            </CallLibMethod>
             <CallLibMethod Name="LL_RTC_SetRtcSecure">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="rtcSecure" ParameterName="rtcSecureFull"/>
            </CallLibMethod>
            <IFCondition Expression ="(rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_ALRB=__NULL &amp; RTC_PRIVILEGE_FEATURE_INIT=__NULL &amp; RTC_PRIVILEGE_FEATURE_ALRA=__NULL &amp; RTC_PRIVILEGE_FEATURE_WUT=__NULL &amp; RTC_PRIVILEGE_FEATURE_TS=__NULL)" >

                <CallLibMethod Name="LL_RTC_SetRtcPrivilege">
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="rtcPrivilege" ParameterName="rtcPrivilegeFull"/>

                </CallLibMethod>
            </IFCondition>
            <IFCondition Expression ="(rtcPrivilegeFull=RTC_PRIVILEGE_FULL_YES)" >

                <CallLibMethod Name="LL_RTC_SetRtcPrivilege">
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="rtcPrivilege" ParameterName="rtcPrivilegeFull"/>

                </CallLibMethod>
            </IFCondition>
              <IFCondition Expression ="(rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_INIT=RTC_PRIVILEGE_FEATURE_INIT) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_WUT=RTC_PRIVILEGE_FEATURE_WUT) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_TS=RTC_PRIVILEGE_FEATURE_TS) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_CAL=RTC_PRIVILEGE_FEATURE_CAL) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_ALRB=RTC_PRIVILEGE_FEATURE_ALRB) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_ALRA=RTC_PRIVILEGE_FEATURE_ALRA)" >

                <CallLibMethod Name="LL_RTC_SetRtcPrivilege">
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="rtcPrivilege" ParameterName="rtcPrivilegeFeatures"/>

                </CallLibMethod>
            </IFCondition>
            
            

            <CallLibMethod Name="LL_RTC_SetBackupRegisterPrivilege">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="backupRegisterPrivZone" ParameterName="backupRegisterPrivZone"/>
            </CallLibMethod> 
        
            <CallLibMethod Name="LL_RTC_SetBackupRegProtection">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg  Name="startZone2" ParameterName="backupRegisterStartZone2"/>
                <MethodArg  Name="startZone3" ParameterName="backupRegisterStartZone3" />
            </CallLibMethod> 
            <IFCondition Expression="SSRU_Underflow_Interrupt=Enable">
                    <CallLibMethod Name="LL_RTC_EnableIT_SSRU">
                        <MethodArg Name="RTCx" ParameterName="Instance"/>
                    </CallLibMethod>
           </IFCondition>
        </IFCondition>  
        
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=__NULL)&amp; (rtcSecureFull=RTC_SECURE_FULL_NO ))" >
            <CallLibMethod Name="LL_RTC_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="HourFormat" ParameterName="HourFormat"/>
                <MethodArg Name="AsynchPrescaler" ParameterName="AsynchPrediv"/>
                <MethodArg Name="SynchPrescaler" ParameterName="SynchPrediv"/>
            </CallLibMethod>
        
             <CallLibMethod Name="LL_RTC_SetRtcSecure">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <!--MethodArg Name="rtcSecure" ParameterName="rtcNonSecureFeatures"/-->
            </CallLibMethod>
            <CallLibMethod Name="LL_RTC_SetBackupRegisterPrivilege">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="backupRegisterPrivZone" ParameterName="backupRegisterPrivZone"/>
            </CallLibMethod> 
        
            <CallLibMethod Name="LL_RTC_SetBackupRegProtection">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg  Name="startZone2" ParameterName="backupRegisterStartZone2"/>
                <MethodArg  Name="startZone3" ParameterName="backupRegisterStartZone3" />
            </CallLibMethod> 
            <IFCondition Expression="SSRU_Underflow_Interrupt=Enable">
                    <CallLibMethod Name="LL_RTC_EnableIT_SSRU">
                        <MethodArg Name="RTCx" ParameterName="Instance"/>
                    </CallLibMethod>
           </IFCondition>
        </IFCondition>  
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL)&amp; (rtcSecureFull=RTC_SECURE_FULL_NO ) &amp;(RTC_NONSECURE_FEATURE_ALRB=!__NULL) &amp;(RTC_NONSECURE_FEATURE_ALRA=!__NULL) &amp;(RTC_NONSECURE_FEATURE_WUT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_CAL=!__NULL)&amp;(RTC_NONSECURE_FEATURE_TS=!__NULL))" >
            <CallLibMethod Name="LL_RTC_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="HourFormat" ParameterName="HourFormat"/>
                <MethodArg Name="AsynchPrescaler" ParameterName="AsynchPrediv"/>
                <MethodArg Name="SynchPrescaler" ParameterName="SynchPrediv"/>
            </CallLibMethod>
          
            <CallLibMethod Name="LL_RTC_SetBackupRegisterPrivilege">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="backupRegisterPrivZone" ParameterName="backupRegisterPrivZone"/>
            </CallLibMethod>   
            <CallLibMethod Name="LL_RTC_SetBackupRegProtection">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg  Name="startZone2" ParameterName="backupRegisterStartZone2"/>
                <MethodArg  Name="startZone3" ParameterName="backupRegisterStartZone3" />
            </CallLibMethod> 
            <IFCondition Expression="SSRU_Underflow_Interrupt=Enable">
                    <CallLibMethod Name="LL_RTC_EnableIT_SSRU">
                        <MethodArg Name="RTCx" ParameterName="Instance"/>
                    </CallLibMethod>
           </IFCondition>
        </IFCondition>  
           
        <IFCondition Expression ="!S_SECURE">

            <CallLibMethod Name="LL_RTC_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="HourFormat" ParameterName="HourFormat"/>
                <MethodArg Name="AsynchPrescaler" ParameterName="AsynchPrediv"/>
                <MethodArg Name="SynchPrescaler" ParameterName="SynchPrediv"/>
            </CallLibMethod>
            <CallLibMethod Name="LL_RTC_SetBackupRegisterPrivilege">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="backupRegisterPrivZone" ParameterName="backupRegisterPrivZone"/>
            </CallLibMethod> 
            <CallLibMethod Name="LL_RTC_SetBackupRegProtection">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg  Name="startZone2" ParameterName="backupRegisterStartZone2"/>
                <MethodArg  Name="startZone3" ParameterName="backupRegisterStartZone3" />
            </CallLibMethod>
            <IFCondition Expression ="(rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_ALRB=__NULL &amp; RTC_PRIVILEGE_FEATURE_INIT=__NULL &amp; RTC_PRIVILEGE_FEATURE_ALRA=__NULL &amp; RTC_PRIVILEGE_FEATURE_WUT=__NULL &amp; RTC_PRIVILEGE_FEATURE_TS=__NULL)" >

                <CallLibMethod Name="LL_RTC_SetRtcPrivilege">
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="rtcPrivilege" ParameterName="rtcPrivilegeFull"/>

                </CallLibMethod>
            </IFCondition>
            <IFCondition Expression ="(rtcPrivilegeFull=RTC_PRIVILEGE_FULL_YES)" >

                <CallLibMethod Name="LL_RTC_SetRtcPrivilege">
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="rtcPrivilege" ParameterName="rtcPrivilegeFull"/>

                </CallLibMethod>
            </IFCondition>
              <IFCondition Expression ="(rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_INIT=RTC_PRIVILEGE_FEATURE_INIT) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_WUT=RTC_PRIVILEGE_FEATURE_WUT) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_TS=RTC_PRIVILEGE_FEATURE_TS) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_CAL=RTC_PRIVILEGE_FEATURE_CAL) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_ALRB=RTC_PRIVILEGE_FEATURE_ALRB) | (rtcPrivilegeFull=RTC_PRIVILEGE_FULL_NO &amp; RTC_PRIVILEGE_FEATURE_ALRA=RTC_PRIVILEGE_FEATURE_ALRA)" >

                <CallLibMethod Name="LL_RTC_SetRtcPrivilege">
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="rtcPrivilege" ParameterName="rtcPrivilegeFeatures"/>

                </CallLibMethod>
            </IFCondition>
          
             <CallLibMethod Name="LL_RTC_SetRtcSecure">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <!--MethodArg Name="rtcSecure" ParameterName="rtcNonSecureFeatures"/-->
            </CallLibMethod>
            <IFCondition Expression="SSRU_Underflow_Interrupt=Enable">
                    <CallLibMethod Name="LL_RTC_EnableIT_SSRU">
                        <MethodArg Name="RTCx" ParameterName="Instance"/>
                    </CallLibMethod>
           </IFCondition>
           
            
        </IFCondition> 
        <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (rtcSecureFull=RTC_SECURE_FULL_NO) )" >
            <CallLibMethod Name="LL_RTC_SetRtcSecure">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <!--MethodArg Name="rtcSecure" ParameterName="rtcNonSecureFeatures"/-->
            </CallLibMethod>
        </IFCondition> 
        
       
    </RefConfig>
    <RefConfig Name="RTC_Init_PKP" Comment="Initialize RTC and set the Time and Date">
        <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S)  &amp; (rtcSecureFull=RTC_SECURE_FULL_YES))" >
            <CallLibMethod Name="LL_RTC_BKP_GetRegister" Type="HardCode" >
                <HardCode Text="#tif(LL_RTC_BKP_GetRegister(RTC,LL_RTC_BKP_DR0) != 0x32F2){#n#t "/>
            </CallLibMethod>
            <CallLibMethod Name="LL_RTC_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="HourFormat" ParameterName="HourFormat"/>
                <MethodArg Name="AsynchPrescaler" ParameterName="AsynchPrediv"/>
                <MethodArg Name="SynchPrescaler" ParameterName="SynchPrediv"/>
            </CallLibMethod>
            <CallLibMethod Name="LL_RTC_BKP_SetRegister" Type="HardCode" >                   
                <HardCode Text="#t#tLL_RTC_BKP_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);#n#t}"/>
            </CallLibMethod>
            
            <CallLibMethod Name="LL_RTC_TIME_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="TimeFormat" ParameterName="TimeFormat" />
                <MethodArg Name="Hours" ParameterName="HoursARG" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG" />
            </CallLibMethod>
		
            <CallLibMethod Name="LL_RTC_DATE_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="WeekDay" ParameterName="WeekDay" />
                <MethodArg Name="Day" ParameterName="DateARG" />
                <MethodArg Name="Month" ParameterName="Month" />
                <MethodArg Name="Year" ParameterName="YearARG" />              
            </CallLibMethod>

            <CallLibMethod Name="LL_RTC_SetRtcSecure">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="rtcSecure" ParameterName="rtcSecureFull"/>
            </CallLibMethod>
            
            
        </IFCondition>  
        <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=__NULL) &amp; (rtcSecureFull=RTC_SECURE_FULL_NO ))" >
            <CallLibMethod Name="LL_RTC_BKP_GetRegister" Type="HardCode" >
                <HardCode Text="#tif(LL_RTC_BKP_GetRegister(RTC,LL_RTC_BKP_DR0) != 0x32F2){#n#t "/>
            </CallLibMethod>
            <CallLibMethod Name="LL_RTC_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="HourFormat" ParameterName="HourFormat"/>
                <MethodArg Name="AsynchPrescaler" ParameterName="AsynchPrediv"/>
                <MethodArg Name="SynchPrescaler" ParameterName="SynchPrediv"/>
            </CallLibMethod>
            <CallLibMethod Name="LL_RTC_BKP_SetRegister" Type="HardCode" >                   
                <HardCode Text="#t#tLL_RTC_BKP_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);#n#t}"/>
            </CallLibMethod>
          
            <CallLibMethod Name="LL_RTC_TIME_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="TimeFormat" ParameterName="TimeFormat" />
                <MethodArg Name="Hours" ParameterName="HoursARG" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG" />
            </CallLibMethod>
		
            <CallLibMethod Name="LL_RTC_DATE_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="WeekDay" ParameterName="WeekDay" />
                <MethodArg Name="Day" ParameterName="DateARG" />
                <MethodArg Name="Month" ParameterName="Month" />
                <MethodArg Name="Year" ParameterName="YearARG" />
            </CallLibMethod>
             <CallLibMethod Name="LL_RTC_SetRtcSecure">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <!--MethodArg Name="rtcSecure" ParameterName="rtcNonSecureFeatures"/-->
            </CallLibMethod>
           
       
             
        </IFCondition>  
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL)&amp; (rtcSecureFull=RTC_SECURE_FULL_NO ) )" >
             <CallLibMethod Name="LL_RTC_BKP_GetRegister" Type="HardCode" >
                 <HardCode Text="#tif(LL_RTC_BKP_GetRegister(RTC,LL_RTC_BKP_DR0) != 0x32F2){#n#t "/>
             </CallLibMethod>
             <CallLibMethod Name="LL_RTC_Init">
                 <MethodArg Name="RTCx" ParameterName="Instance"/>
                 <MethodArg Name="HourFormat" ParameterName="HourFormat"/>
                 <MethodArg Name="AsynchPrescaler" ParameterName="AsynchPrediv"/>
                 <MethodArg Name="SynchPrescaler" ParameterName="SynchPrediv"/>
             </CallLibMethod>
             <CallLibMethod Name="LL_RTC_BKP_SetRegister" Type="HardCode" >                   
                 <HardCode Text="#t#tLL_RTC_BKP_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);#n#t}"/>
             </CallLibMethod>
            
            <CallLibMethod Name="LL_RTC_TIME_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="TimeFormat" ParameterName="TimeFormat" />
                <MethodArg Name="Hours" ParameterName="HoursARG" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG" />
            </CallLibMethod>
		
            <CallLibMethod Name="LL_RTC_DATE_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="WeekDay" ParameterName="WeekDay" />
                <MethodArg Name="Day" ParameterName="DateARG" />
                <MethodArg Name="Month" ParameterName="Month" />
                <MethodArg Name="Year" ParameterName="YearARG" />
            </CallLibMethod>
             
        </IFCondition>  
       
       
        <IFCondition Expression ="!S_SECURE">
            <CallLibMethod Name="LL_RTC_BKP_GetRegister" Type="HardCode" >
                <HardCode Text="#tif(LL_RTC_BKP_GetRegister(RTC,LL_RTC_BKP_DR0) != 0x32F2){#n#t "/>
            </CallLibMethod>
            <CallLibMethod Name="LL_RTC_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="HourFormat" ParameterName="HourFormat"/>
                <MethodArg Name="AsynchPrescaler" ParameterName="AsynchPrediv"/>
                <MethodArg Name="SynchPrescaler" ParameterName="SynchPrediv"/>
            </CallLibMethod>
            <CallLibMethod Name="LL_RTC_BKP_SetRegister" Type="HardCode" >                   
                <HardCode Text="#t#tLL_RTC_BKP_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);#n#t}"/>
            </CallLibMethod>
            
            <CallLibMethod Name="LL_RTC_TIME_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="TimeFormat" ParameterName="TimeFormat" />
                <MethodArg Name="Hours" ParameterName="HoursARG" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG" />
            </CallLibMethod>
		
            <CallLibMethod Name="LL_RTC_DATE_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="WeekDay" ParameterName="WeekDay" />
                <MethodArg Name="Day" ParameterName="DateARG" />
                <MethodArg Name="Month" ParameterName="Month" />
                <MethodArg Name="Year" ParameterName="YearARG" />
            </CallLibMethod>
             
        </IFCondition>  

				
    </RefConfig>
        
    <!-- Alarm A -->
	
    <RefConfig Name="RTC_SetAlarm_A" Comment="Enable the Alarm A">
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; (rtcSecureFull=RTC_SECURE_FULL_YES))" >
            <CallLibMethod Name="LL_RTC_ALMA_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_A" />
                <MethodArg Name="Minutes" ParameterName="Minutes_A" />
                <MethodArg Name="Seconds" ParameterName="Seconds_A" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_A" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_A" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_A" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            </CallLibMethod>
            <CallLibMethod Name="LL_RTC_ALMA_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_A" />
                       
		</CallLibMethod>
          <IFCondition Expression="RTC_OUTPUT_ALARMA  &amp; OutPut1 =RTC_OUTPUT_ALARMA">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent">
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut1"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
                </CallLibMethod>

                <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Output" ParameterName="OutPutType"/>
                </CallLibMethod>
		</IFCondition>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                
             
                   
        </IFCondition>   
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_ALRA=__NULL) &amp; ((rtcSecureFull=RTC_SECURE_FULL_NO )))" >
            <CallLibMethod Name="LL_RTC_ALMA_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_A" />
                <MethodArg Name="Minutes" ParameterName="Minutes_A" />
                <MethodArg Name="Seconds" ParameterName="Seconds_A" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_A" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_A" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_A" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            </CallLibMethod>
            <IFCondition Expression="RTC_OUTPUT_ALARMA  &amp; OutPut1 =RTC_OUTPUT_ALARMA">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent">
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut1"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
                </CallLibMethod>

                <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Output" ParameterName="OutPutType"/>
                </CallLibMethod>
		</IFCondition>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
               
                 <CallLibMethod Name="LL_RTC_ALMA_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_A" />
                       
		</CallLibMethod>
        </IFCondition>   
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp;   (rtcSecureFull=RTC_SECURE_FULL_NO)&amp;(RTC_NONSECURE_FEATURE_ALRA=!__NULL) )" >
            <CallLibMethod Name="LL_RTC_ALMA_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_A" />
                <MethodArg Name="Minutes" ParameterName="Minutes_A" />
                <MethodArg Name="Seconds" ParameterName="Seconds_A" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_A" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_A" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_A" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            </CallLibMethod>
            <IFCondition Expression="RTC_OUTPUT_ALARMA  &amp; OutPut1 =RTC_OUTPUT_ALARMA">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent">
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut1"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
                </CallLibMethod>

                <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Output" ParameterName="OutPutType"/>
                </CallLibMethod>
		</IFCondition>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                
                 <CallLibMethod Name="LL_RTC_ALMA_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_A" />
                       
		</CallLibMethod>
        </IFCondition>   
      
          
        
        <IFCondition Expression ="!S_SECURE">
            <CallLibMethod Name="LL_RTC_ALMA_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_A" />
                <MethodArg Name="Minutes" ParameterName="Minutes_A" />
                <MethodArg Name="Seconds" ParameterName="Seconds_A" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_A" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_A" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_A" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            </CallLibMethod>
            <IFCondition Expression="RTC_OUTPUT_ALARMA  &amp; OutPut1 =RTC_OUTPUT_ALARMA">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent">
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut1"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
                </CallLibMethod>

                <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Output" ParameterName="OutPutType"/>
                </CallLibMethod>
		</IFCondition>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
           
            <CallLibMethod Name="LL_RTC_ALMA_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_A" />
                       
		</CallLibMethod>
        </IFCondition>   

    </RefConfig>      


    <RefConfig Name="RTC_SetAlarm_A_IT" Comment="Enable the Alarm A">
      
         
         
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
            <CallLibMethod Name="LL_RTC_ALMA_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_A" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_A" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_A" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            </CallLibMethod>
            <IFCondition Expression="RTC_OUTPUT_ALARMA  &amp; OutPut1 =RTC_OUTPUT_ALARMA">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent">
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut1"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
                </CallLibMethod>

                <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Output" ParameterName="OutPutType"/>
                </CallLibMethod>
		</IFCondition>
            <CallLibMethod Name="LL_RTC_EnableIT_ALRA">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                
            <CallLibMethod Name="LL_RTC_ALMA_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_A" />
                       
		</CallLibMethod>
        </IFCondition>     
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_ALRA=__NULL) )" >
            <CallLibMethod Name="LL_RTC_ALMA_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_A" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_A" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_A" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            </CallLibMethod>
            <IFCondition Expression="RTC_OUTPUT_ALARMA  &amp; OutPut1 =RTC_OUTPUT_ALARMA">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent">
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut1"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
                </CallLibMethod>

                <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Output" ParameterName="OutPutType"/>
                </CallLibMethod>
		</IFCondition>
            <CallLibMethod Name="LL_RTC_EnableIT_ALRA">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                
          <CallLibMethod Name="LL_RTC_ALMA_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_A" />
                       
		</CallLibMethod>
        </IFCondition>      
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp;   (rtcSecureFull=RTC_SECURE_FULL_NO)&amp;(RTC_NONSECURE_FEATURE_ALRA=!__NULL) )" >
            <CallLibMethod Name="LL_RTC_ALMA_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_A" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_A" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_A" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            </CallLibMethod>
            <IFCondition Expression="RTC_OUTPUT_ALARMA  &amp; OutPut1 =RTC_OUTPUT_ALARMA">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent">
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut1"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
                </CallLibMethod>

                <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Output" ParameterName="OutPutType"/>
                </CallLibMethod>
		</IFCondition>
            <CallLibMethod Name="LL_RTC_EnableIT_ALRA">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
          
            <CallLibMethod Name="LL_RTC_ALMA_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_A" />
                       
		</CallLibMethod>
        </IFCondition>            

       
        <IFCondition Expression ="!S_SECURE">
            <CallLibMethod Name="LL_RTC_ALMA_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_A" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_A" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_A" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            </CallLibMethod>
            <CallLibMethod Name="LL_RTC_EnableIT_ALRA">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
          <IFCondition Expression="RTC_OUTPUT_ALARMA  &amp; OutPut1 =RTC_OUTPUT_ALARMA">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent">
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut1"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
                </CallLibMethod>

                <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                    <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Output" ParameterName="OutPutType"/>
                </CallLibMethod>
		</IFCondition>
            <CallLibMethod Name="LL_RTC_ALMA_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_A" />
                       
		</CallLibMethod>
        </IFCondition>           
    </RefConfig>

    <!-- Alarm B -->
    <RefConfig Name="RTC_SetAlarm_B" Comment="Enable the Alarm B">
        
        <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S)  &amp; (rtcSecureFull=RTC_SECURE_FULL_YES))" >
           <CallLibMethod Name="LL_RTC_ALMB_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_B" />
                <MethodArg Name="Minutes" ParameterName="Minutes_B" />
                <MethodArg Name="Seconds" ParameterName="Seconds_B" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_B" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_B" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_B" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
                <MethodArg Name="Alarm" ParameterName="Alarm_B" />
            </CallLibMethod>
                       
           <IFCondition Expression=" AlarmB_Outputed  &amp; OutPut2 =RTC_OUTPUT_ALARMB ">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut2"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
            </CallLibMethod>

            <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Output" ParameterName="OutPutType"/>
            </CallLibMethod>
		</IFCondition>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
       
             <CallLibMethod Name="LL_RTC_ALMB_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_B" />
                       
		</CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_ALRB=__NULL) &amp; (rtcSecureFull=RTC_SECURE_FULL_NO ))" >
            <CallLibMethod Name="LL_RTC_ALMB_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_B" />
                <MethodArg Name="Minutes" ParameterName="Minutes_B" />
                <MethodArg Name="Seconds" ParameterName="Seconds_B" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_B" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_B" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_B" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
                <MethodArg Name="Alarm" ParameterName="Alarm_B" />
            </CallLibMethod>
                       
           
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
            
             <CallLibMethod Name="LL_RTC_ALMB_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_B" />
                       
		</CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_ALRB=!__NULL) &amp; ((rtcSecureFull=RTC_SECURE_FULL_NO )))" >
            <CallLibMethod Name="LL_RTC_ALMB_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_B" />
                <MethodArg Name="Minutes" ParameterName="Minutes_B" />
                <MethodArg Name="Seconds" ParameterName="Seconds_B" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_B" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_B" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_B" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
                <MethodArg Name="Alarm" ParameterName="Alarm_B" />
            </CallLibMethod>
                       
           
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 
             <CallLibMethod Name="LL_RTC_ALMB_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_B" />
                       
		</CallLibMethod>
        </IFCondition>

       
        <IFCondition Expression ="!S_SECURE">
     
                       
            <CallLibMethod Name="LL_RTC_ALMB_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_B" />
                <MethodArg Name="Minutes" ParameterName="Minutes_B" />
                <MethodArg Name="Seconds" ParameterName="Seconds_B" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_B" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_B" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_B" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
                <MethodArg Name="Alarm" ParameterName="Alarm_B" />
            </CallLibMethod>
            <IFCondition Expression=" AlarmB_Outputed  &amp; OutPut2 =RTC_OUTPUT_ALARMB ">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut2"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
            </CallLibMethod>

            <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Output" ParameterName="OutPutType"/>
            </CallLibMethod>
		</IFCondition>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
           
             <CallLibMethod Name="LL_RTC_ALMB_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_B" />
                       
		</CallLibMethod>
        </IFCondition>   
           
    </RefConfig>

    <RefConfig Name="RTC_SetAlarm_B_IT" Comment="Enable the Alarm B">
     
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
            <CallLibMethod Name="LL_RTC_EnableIT_ALRB">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
        
           
            <CallLibMethod Name="LL_RTC_ALMB_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_B" />
                <MethodArg Name="Minutes" ParameterName="Minutes_B" />
                <MethodArg Name="Seconds" ParameterName="Seconds_B" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_B" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_B" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_B" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
                <MethodArg Name="Alarm" ParameterName="Alarm_B" />
            </CallLibMethod>  
            <IFCondition Expression=" AlarmB_Outputed  &amp; OutPut2 =RTC_OUTPUT_ALARMB ">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut2"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
            </CallLibMethod>

            <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Output" ParameterName="OutPutType"/>
            </CallLibMethod>
		</IFCondition>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>    
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>  
                
             <CallLibMethod Name="LL_RTC_ALMB_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_B" />
                       
		</CallLibMethod>
        </IFCondition>   
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_ALRB=__NULL)&amp; ((rtcSecureFull=RTC_SECURE_FULL_NO )) )" >
            <CallLibMethod Name="LL_RTC_EnableIT_ALRB">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
       
                       
            <CallLibMethod Name="LL_RTC_ALMB_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_B" />
                <MethodArg Name="Minutes" ParameterName="Minutes_B" />
                <MethodArg Name="Seconds" ParameterName="Seconds_B" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_B" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_B" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_B" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
                <MethodArg Name="Alarm" ParameterName="Alarm_B" />
            </CallLibMethod>
            <IFCondition Expression=" AlarmB_Outputed  &amp; OutPut2 =RTC_OUTPUT_ALARMB ">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut2"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
            </CallLibMethod>

            <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Output" ParameterName="OutPutType"/>
            </CallLibMethod>
		</IFCondition>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
          
             <CallLibMethod Name="LL_RTC_ALMB_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_B" />
                       
		</CallLibMethod>
        </IFCondition>   
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_ALRB=!__NULL) &amp; (rtcSecureFull=RTC_SECURE_FULL_NO ))" >
            <CallLibMethod Name="LL_RTC_EnableIT_ALRB">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
                          
            <CallLibMethod Name="LL_RTC_ALMB_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_B" />
                <MethodArg Name="Minutes" ParameterName="Minutes_B" />
                <MethodArg Name="Seconds" ParameterName="Seconds_B" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_B" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_B" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_B" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
                <MethodArg Name="Alarm" ParameterName="Alarm_B" />
            </CallLibMethod>
            <IFCondition Expression=" AlarmB_Outputed  &amp; OutPut2 =RTC_OUTPUT_ALARMB ">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut2"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
            </CallLibMethod>

            <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Output" ParameterName="OutPutType"/>
            </CallLibMethod>
		</IFCondition>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
            
             <CallLibMethod Name="LL_RTC_ALMB_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_B" />
                       
		</CallLibMethod>
        </IFCondition>   

        <IFCondition Expression ="!S_SECURE">
            <CallLibMethod Name="LL_RTC_EnableIT_ALRB">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
        
            <CallLibMethod Name="LL_RTC_ALMB_Init">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="RTC_Format" ParameterName="Format" />
                <MethodArg Name="Hours" ParameterName="Hours_B" />
                <MethodArg Name="Minutes" ParameterName="Minutes_B" />
                <MethodArg Name="Seconds" ParameterName="Seconds_B" />
                <MethodArg Name="AlarmTime" ParameterName="AlarmTime" />
                <MethodArg Name="Hours" ParameterName="HoursARG_B" />
                <MethodArg Name="Minutes" ParameterName="MinutesARG_B" />
                <MethodArg Name="Seconds" ParameterName="SecondsARG_B" />
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
                <MethodArg Name="Alarm" ParameterName="Alarm_B" />
            </CallLibMethod>
            <IFCondition Expression=" AlarmB_Outputed  &amp; OutPut2 =RTC_OUTPUT_ALARMB ">
			<CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="AlarmOutput" ParameterName="OutPut2"/>
                        
		</CallLibMethod>
                <CallLibMethod Name="LL_RTC_SetOutputPolarity">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                    <MethodArg Name="Polarity" ParameterName="OutPutPolarity"/>
            </CallLibMethod>

            <CallLibMethod Name="LL_RTC_SetAlarmOutputType">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Output" ParameterName="OutPutType"/>
            </CallLibMethod>
		</IFCondition>
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
        
             <CallLibMethod Name="LL_RTC_ALMB_SetBinAutoClr">
			<MethodArg Name="RTCx" ParameterName="Instance"/>
			<MethodArg Name="BinaryAutoClr" ParameterName="BinaryAutoClr_B" />
                       
		</CallLibMethod>
        </IFCondition>   
 
    </RefConfig>

    <RefConfig Name="RTC_DeInit" Comment="Restore Default Initialisation">
        <CallLibMethod Name="LL_RTC_DeInit"/>
    </RefConfig>

    <!-- TimeStamp -->
    <RefConfig Name="RTC_Timestamp" Comment="Enable the TimeStamp">
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
            <CallLibMethod Name="LL_RTC_TS_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>		
            <CallLibMethod Name="LL_RTC_TS_SetActiveEdge">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Edge" ParameterName="TimeStampEdge"/>
            </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_TS=__NULL) )" >
            <CallLibMethod Name="LL_RTC_TS_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>		
            <CallLibMethod Name="LL_RTC_TS_SetActiveEdge">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Edge" ParameterName="TimeStampEdge"/>
            </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_TS=!__NULL)&amp; ((rtcSecureFull=RTC_SECURE_FULL_NO ) ))" >
            <CallLibMethod Name="LL_RTC_TS_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>		
            <CallLibMethod Name="LL_RTC_TS_SetActiveEdge">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Edge" ParameterName="TimeStampEdge"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="!S_SECURE" >
            <CallLibMethod Name="LL_RTC_TS_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>		
            <CallLibMethod Name="LL_RTC_TS_SetActiveEdge">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Edge" ParameterName="TimeStampEdge"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig>

    <RefConfig Name="RTC_Timestamp_IT" Comment="Enable the TimeStamp">
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
            <CallLibMethod Name="LL_RTC_TS_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>	
            <CallLibMethod Name="LL_RTC_TS_SetActiveEdge">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Edge" ParameterName="TimeStampEdge"/>
            </CallLibMethod>
		
            <CallLibMethod Name="LL_RTC_EnableIT_TS">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_TS=__NULL)&amp; ((rtcSecureFull=RTC_SECURE_FULL_NO )) )" >
            <CallLibMethod Name="LL_RTC_TS_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>	
            <CallLibMethod Name="LL_RTC_TS_SetActiveEdge">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Edge" ParameterName="TimeStampEdge"/>
            </CallLibMethod>
		
            <CallLibMethod Name="LL_RTC_EnableIT_TS">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_TS=!__NULL)&amp; (rtcSecureFull=RTC_SECURE_FULL_NO  ))" >
            <CallLibMethod Name="LL_RTC_TS_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>	
            <CallLibMethod Name="LL_RTC_TS_SetActiveEdge">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Edge" ParameterName="TimeStampEdge"/>
            </CallLibMethod>
		
            <CallLibMethod Name="LL_RTC_EnableIT_TS">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
		 <IFCondition Expression ="!S_SECURE" >
            <CallLibMethod Name="LL_RTC_TS_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>	
            <CallLibMethod Name="LL_RTC_TS_SetActiveEdge">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Edge" ParameterName="TimeStampEdge"/>
            </CallLibMethod>
		
            <CallLibMethod Name="LL_RTC_EnableIT_TS">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig>
	
	
    <!-- ****************************** WAKEUP ************************************** -->
    <RefConfig Name="RTC_WakeUp" Comment="Enable the WakeUp">

        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
            <CallLibMethod Name="LL_RTC_WAKEUP_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>

            </CallLibMethod>
        
            <CallLibMethod Name="LL_RTC_WAKEUP_SetClock">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="WakeUpClock" ParameterName="WakeUpClock"/>
            </CallLibMethod>
                
            <CallLibMethod Name="LL_RTC_WAKEUP_SetAutoReload">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Tamper" ParameterName="WakeUpCounter"/>
                        
            </CallLibMethod>     
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition> 
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression=" WakeUp_Outputed  &amp; OutPut3 = RTC_OUTPUT_WAKEUP ">
             <CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
                 <MethodArg Name="RTCx" ParameterName="Instance"/>
                 <MethodArg Name="AlarmOutput" ParameterName="OutPut3"/>
                        
             </CallLibMethod>
         </IFCondition>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_WUT=__NULL)&amp; (rtcSecureFull=RTC_SECURE_FULL_NO ))" >
            <CallLibMethod Name="LL_RTC_WAKEUP_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>

            </CallLibMethod>
        
            <CallLibMethod Name="LL_RTC_WAKEUP_SetClock">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="WakeUpClock" ParameterName="WakeUpClock"/>
            </CallLibMethod>
                
            <CallLibMethod Name="LL_RTC_WAKEUP_SetAutoReload">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Tamper" ParameterName="WakeUpCounter"/>
                        
            </CallLibMethod>       
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression=" WakeUp_Outputed  &amp; OutPut3 = RTC_OUTPUT_WAKEUP ">
             <CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
                 <MethodArg Name="RTCx" ParameterName="Instance"/>
                 <MethodArg Name="AlarmOutput" ParameterName="OutPut3"/>
                        
             </CallLibMethod>
         </IFCondition>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_WUT=!__NULL)&amp; (rtcSecureFull=RTC_SECURE_FULL_NO ) )" >
            <CallLibMethod Name="LL_RTC_WAKEUP_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>

            </CallLibMethod>
        
            <CallLibMethod Name="LL_RTC_WAKEUP_SetClock">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="WakeUpClock" ParameterName="WakeUpClock"/>
            </CallLibMethod>
                
            <CallLibMethod Name="LL_RTC_WAKEUP_SetAutoReload">
                    
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Tamper" ParameterName="WakeUpCounter"/>
                        
            </CallLibMethod> 
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>  
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                  <IFCondition Expression=" WakeUp_Outputed  &amp; OutPut3 = RTC_OUTPUT_WAKEUP ">
             <CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
                 <MethodArg Name="RTCx" ParameterName="Instance"/>
                 <MethodArg Name="AlarmOutput" ParameterName="OutPut3"/>
                        
             </CallLibMethod>
         </IFCondition>    
        </IFCondition>
               
        <IFCondition Expression ="!S_SECURE">         
            <CallLibMethod Name="LL_RTC_WAKEUP_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>

            </CallLibMethod>
        
            <CallLibMethod Name="LL_RTC_WAKEUP_SetClock">                
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="WakeUpClock" ParameterName="WakeUpClock"/>
            </CallLibMethod>              
            <CallLibMethod Name="LL_RTC_WAKEUP_SetAutoReload">               
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Tamper" ParameterName="WakeUpCounter"/>                    
            </CallLibMethod>   
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                  <IFCondition Expression=" WakeUp_Outputed  &amp; OutPut3 = RTC_OUTPUT_WAKEUP ">
             <CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
                 <MethodArg Name="RTCx" ParameterName="Instance"/>
                 <MethodArg Name="AlarmOutput" ParameterName="OutPut3"/>
                        
             </CallLibMethod>
         </IFCondition>
        </IFCondition>
                
		
    </RefConfig>
	
    <RefConfig Name="RTC_WakeUp_IT" Comment="Enable the WakeUp">
        
        
        <IFCondition Expression ="!S_SECURE">         
            <CallLibMethod Name="LL_RTC_WAKEUP_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>

            </CallLibMethod>
        
            <CallLibMethod Name="LL_RTC_WAKEUP_SetClock">                
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="WakeUpClock" ParameterName="WakeUpClock"/>
            </CallLibMethod>              
            <CallLibMethod Name="LL_RTC_WAKEUP_SetAutoReload">               
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Tamper" ParameterName="WakeUpCounter"/>                    
            </CallLibMethod>   
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <CallLibMethod Name="LL_RTC_EnableIT_WUT">
            <MethodArg Name="RTCx" ParameterName="Instance"/>

        </CallLibMethod>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                  <IFCondition Expression=" WakeUp_Outputed  &amp; OutPut3 = RTC_OUTPUT_WAKEUP ">
             <CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
                 <MethodArg Name="RTCx" ParameterName="Instance"/>
                 <MethodArg Name="AlarmOutput" ParameterName="OutPut3"/>
                        
             </CallLibMethod>
         </IFCondition>
        </IFCondition>
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
            <CallLibMethod Name="LL_RTC_WAKEUP_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>

            </CallLibMethod>
        
            <CallLibMethod Name="LL_RTC_WAKEUP_SetClock">                
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="WakeUpClock" ParameterName="WakeUpClock"/>
            </CallLibMethod>              
            <CallLibMethod Name="LL_RTC_WAKEUP_SetAutoReload">               
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Tamper" ParameterName="WakeUpCounter"/>                    
            </CallLibMethod>   
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <CallLibMethod Name="LL_RTC_EnableIT_WUT">
            <MethodArg Name="RTCx" ParameterName="Instance"/>

        </CallLibMethod>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                  <IFCondition Expression=" WakeUp_Outputed  &amp; OutPut3 = RTC_OUTPUT_WAKEUP ">
             <CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
                 <MethodArg Name="RTCx" ParameterName="Instance"/>
                 <MethodArg Name="AlarmOutput" ParameterName="OutPut3"/>
                        
             </CallLibMethod>
         </IFCondition>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_WUT=__NULL) )" >
            <CallLibMethod Name="LL_RTC_WAKEUP_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>

            </CallLibMethod>
        
            <CallLibMethod Name="LL_RTC_WAKEUP_SetClock">                
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="WakeUpClock" ParameterName="WakeUpClock"/>
            </CallLibMethod>              
            <CallLibMethod Name="LL_RTC_WAKEUP_SetAutoReload">               
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Tamper" ParameterName="WakeUpCounter"/>                    
            </CallLibMethod>   
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <CallLibMethod Name="LL_RTC_EnableIT_WUT">
            <MethodArg Name="RTCx" ParameterName="Instance"/>

        </CallLibMethod>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                  <IFCondition Expression=" WakeUp_Outputed  &amp; OutPut3 = RTC_OUTPUT_WAKEUP ">
             <CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
                 <MethodArg Name="RTCx" ParameterName="Instance"/>
                 <MethodArg Name="AlarmOutput" ParameterName="OutPut3"/>
                        
             </CallLibMethod>
         </IFCondition>
         </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_WUT=!__NULL) &amp; (rtcSecureFull=RTC_SECURE_FULL_NO ))" >
            <CallLibMethod Name="LL_RTC_WAKEUP_Enable">
                <MethodArg Name="RTCx" ParameterName="Instance"/>

            </CallLibMethod>
        
            <CallLibMethod Name="LL_RTC_WAKEUP_SetClock">                
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="WakeUpClock" ParameterName="WakeUpClock"/>
            </CallLibMethod>              
            <CallLibMethod Name="LL_RTC_WAKEUP_SetAutoReload">               
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Tamper" ParameterName="WakeUpCounter"/>                    
            </CallLibMethod>   
             <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_ON">
			<CallLibMethod Name="LL_RTC_EnableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                 <CallLibMethod Name="LL_RTC_EnableIT_WUT">
            <MethodArg Name="RTCx" ParameterName="Instance"/>

        </CallLibMethod>
                 <IFCondition Expression="OutPutPullUp=RTC_OUTPUT_PULLUP_NONE">
			<CallLibMethod Name="LL_RTC_DisableAlarmPullUp">
				<MethodArg Name="RTCx" ParameterName="Instance"/>
			</CallLibMethod>
		</IFCondition>
                  <IFCondition Expression=" WakeUp_Outputed  &amp; OutPut3 = RTC_OUTPUT_WAKEUP ">
             <CallLibMethod Name="LL_RTC_SetAlarmOutEvent" >
                    
                 <MethodArg Name="RTCx" ParameterName="Instance"/>
                 <MethodArg Name="AlarmOutput" ParameterName="OutPut3"/>
                        
             </CallLibMethod>
         </IFCondition>
        </IFCondition>
              
       

    </RefConfig>      
	
    <!--Calibration -->
	 
    <RefConfig Name="RTC_Calibration" Comment="Enable Calibration"> 
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
            <CallLibMethod Name="LL_RTC_CAL_SetOutputFreq">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Frequency" ParameterName="CalibOutput"/>
            </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_CAL=__NULL) )" >
            <CallLibMethod Name="LL_RTC_CAL_SetOutputFreq">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Frequency" ParameterName="CalibOutput"/>
            </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_CAL=!__NULL) &amp; (rtcSecureFull=RTC_SECURE_FULL_NO ))" >
            <CallLibMethod Name="LL_RTC_CAL_SetOutputFreq">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Frequency" ParameterName="CalibOutput"/>
            </CallLibMethod>
        </IFCondition>
                        
        <IFCondition Expression ="!S_SECURE">         
            <CallLibMethod Name="LL_RTC_CAL_SetOutputFreq">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
                <MethodArg Name="Frequency" ParameterName="CalibOutput"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig> 
	

    <!-- RefClock -->
    <RefConfig Name="RTC_RefClock" Comment="Enable the reference Clock input">
        
        
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S))">
            <CallLibMethod Name="LL_RTC_EnableRefClock">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="(!S_SECURE)">
            <CallLibMethod Name="LL_RTC_EnableRefClock">
                <MethodArg Name="RTCx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig>
    
    

    <!-- Lib Methods -->
    <LibMethod Comment="" Name="LL_RTC_ALMA_Enable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DisableAlarmPullUp" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_Disable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_SetMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Mask" OptimizationCondition="equal"/>
    </LibMethod>
   <LibMethod Comment="" Name="LL_RTC_EnableIT_WUT">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_GetAlarmOutEvent">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_GetMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_EnableWeekday">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_DisableWeekday">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_SetDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Day" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_GetDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_SetWeekDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="WeekDay" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_GetWeekDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_SetTimeFormat">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
    </LibMethod>
      <LibMethod Comment="" Name="LL_RTC_ALMA_SetBinAutoClr">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="BinaryAutoClr" OptimizationCondition="equal"/>

    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_SetBinAutoClr">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="BinaryAutoClr" OptimizationCondition="equal"/>

    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_GetTimeFormat">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_SetHour">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_GetHour">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_SetMinute">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_GetMinute">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_SetSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_GetSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_ConfigTime">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Format12_24" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_GetTime">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_SetSubSecondMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Mask" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_GetSubSecondMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_SetSubSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Subsecond" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_GetSubSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_Enable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_Disable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_SetMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Mask" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_GetMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_EnableWeekday">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_DisableWeekday">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_SetDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Day" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_GetDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_SetWeekDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="WeekDay" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_GetWeekDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_SetTimeFormat">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_GetTimeFormat">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_SetHour">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_GetHour">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_SetMinute">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_GetMinute">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_SetSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_GetSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_ConfigTime">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Format12_24" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_GetTime">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_SetSubSecondMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Mask" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_GetSubSecondMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_SetSubSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Subsecond" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_GetSubSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_CAL_SetOutputFreq">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Frequency" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_CAL_GetOutputFreq">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_CAL_SetPulse">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Pulse" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_CAL_IsPulseInserted">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_CAL_SetPeriod">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Period" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_CAL_GetPeriod">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_CAL_SetMinus">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="CalibMinus" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_CAL_GetMinus">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableOutRemap">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetHourFormat">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
    </LibMethod>
    
   
    <LibMethod Comment="" Name="LL_RTC_SetOutputPolarity" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_SetAlarmOutputType" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
    </LibMethod>
   
    <LibMethod Comment="" Name="LL_RTC_GetHourFormat">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
  
    <LibMethod Comment="" Name="LL_RTC_GetAlarmOutputType">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableInitMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DisableInitMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetOutputPolarity">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="AlarmOutput" OptimizationCondition="equal"/>
    </LibMethod>
  
    <LibMethod Comment="" Name="LL_RTC_SetAlarmOutputType" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="AlarmOutput" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_GetOutputPolarity">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableShadowRegBypass">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DisableShadowRegBypass">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsShadowRegBypassEnabled">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableRefClock">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DisableRefClock">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetAsynchPrescaler" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="AsynchPrescaler" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetSynchPrescaler" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="SynchPrescaler" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_GetAsynchPrescaler">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_GetSynchPrescaler">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableWriteProtection">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DisableWriteProtection">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableOutRemap">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DisableOutRemap">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_SetYear">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Year" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_GetYear">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_SetWeekDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="WeekDay" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_GetWeekDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_SetMonth">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Month" OptimizationCondition="equal"/>
    </LibMethod>
    
    
    <LibMethod Comment="" Name="LL_RTC_BKP_SetRegister">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="BackupRegister" OptimizationCondition="equal"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_DATE_GetMonth">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_SetDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Day" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_GetDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_Config">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="WeekDay" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Day" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Month" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Year" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_Get">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_ITS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_RECALP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_TSOV">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_TS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_ALRB">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_ALRA">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ClearFlag_ITS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ClearFlag_TSOV">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ClearFlag_TS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ClearFlag_ALRB">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ClearFlag_ALRA">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_INIT">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_RS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ClearFlag_RS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_INITS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_SHP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_ALRBW">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsActiveFlag_ALRAW">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DeInit">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_Init" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="true" GenericType="struct" Name="RTC_InitStruct" TypeName="LL_RTC_InitTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AsynchPrescaler" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="SynchPrescaler" OptimizationCondition="equal"/>
               
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetBackupRegisterPrivilege" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="backupRegisterPrivZone" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_GetBackupRegisterPrivilege">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="backupRegisterPrivZone" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_StructInit" Optimizable="true">
        <Argument AddressOf="true" GenericType="struct" Name="RTC_InitStruct" TypeName="LL_RTC_InitTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AsynchPrescaler" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="SynchPrescaler" OptimizationCondition="equal"/>

            
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_Init" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="RTC_Format" OptimizationCondition="equal"/>
        <Argument AddressOf="true" GenericType="struct" Name="RTC_TimeStruct" TypeName="LL_RTC_TimeTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_StructInit" Optimizable="true">
        <Argument AddressOf="true" GenericType="struct" Name="RTC_TimeStruct" TypeName="LL_RTC_TimeTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_Init" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="RTC_Format" OptimizationCondition="equal"/>
        <Argument AddressOf="true" GenericType="struct" Name="RTC_DateStruct" TypeName="LL_RTC_DateTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="WeekDay" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Month" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Day" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Year" OptimizationCondition="equal"/>
            
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DATE_StructInit" Optimizable="true">
        <Argument AddressOf="true" GenericType="struct" Name="RTC_DateStruct" TypeName="LL_RTC_DateTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="WeekDay" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Month" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Day" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Year" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_Init" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="RTC_Format" OptimizationCondition="equal"/>
        <Argument AddressOf="true" GenericType="struct" Name="RTC_AlarmStruct" TypeName="LL_RTC_AlarmTypeDef">
            <Argument AddressOf="true" GenericType="struct" Name="AlarmTime" TypeName="LL_RTC_TimeTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
            
            </Argument>  
            <Argument AddressOf="false" GenericType="simple" Name="AlarmMask" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDaySel" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDay" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_Init" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="RTC_Format" OptimizationCondition="equal"/>
        <Argument AddressOf="true" GenericType="struct" Name="RTC_AlarmStruct" TypeName="LL_RTC_AlarmTypeDef">
            <Argument AddressOf="true" GenericType="struct" Name="AlarmTime" TypeName="LL_RTC_TimeTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
            
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmMask" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDaySel" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDay" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMA_StructInit" Optimizable="true">
        <Argument AddressOf="true" GenericType="struct" Name="RTC_AlarmStruct" TypeName="LL_RTC_AlarmTypeDef">
            <Argument AddressOf="true" GenericType="struct" Name="AlarmTime" TypeName="LL_RTC_TimeTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
            
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmMask" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDaySel" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDay" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALMB_StructInit" Optimizable="true">
        <Argument AddressOf="true" GenericType="struct" Name="RTC_AlarmStruct" TypeName="LL_RTC_AlarmTypeDef">
            <Argument AddressOf="true" GenericType="struct" Name="AlarmTime" TypeName="LL_RTC_TimeTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
           
            
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmMask" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDaySel" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDay" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>

    <LibMethod Comment="" Name="LL_RTC_EnterInitMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ExitInitMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_WaitForSynchro">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_TS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DisableIT_TS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_ALRB">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_EnableOnTamper">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
   
    <LibMethod Comment="" Name="LL_RTC_TAMPER_ATAMP_SetSharedOuputSelection">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="OutputSelection" OptimizationCondition="equal"/>

    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DisableIT_ALRB">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_ALRA">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_SSRU" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DisableIT_ALRA">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_TAMP1">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_TAMP2">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_TAMP3">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_TAMP4">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_TAMP5">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_TAMP6">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_TAMP7">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableIT_TAMP8">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_DisableIT_TAMP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsEnabledIT_TS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsEnabledIT_ALRB">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_IsEnabledIT_ALRA">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>

    
    
    <LibMethod Comment="" Name="LL_RTC_WAKEUP_Enable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_Calibration_Enable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        
    </LibMethod>
    
    
    <LibMethod Comment="" Name="LL_RTC_ALARMOUT_ALMB">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_ALARMOUT_WAKEUP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        
    </LibMethod>

    <LibMethod Comment="" Name="LL_RTC_Calibration_Enable ">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="CalibOutput" OptimizationCondition="equal"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_EnableOutRemap ">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_EnableOutRemap">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetRtcPrivilege" Optimizable="true" >
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="rtcPrivilege" OptimizationCondition="equal"/>    
    </LibMethod>

    <!-- ********************************* TAMPER LibMethods ************************************ -->
    
    <LibMethod Comment="Set Tamper Filter" Name="LL_RTC_TAMPER_SetFilterCount">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>

        <Argument AddressOf="false" GenericType="simple" Name="Filter" OptimizationCondition="equal"/>
    </LibMethod>

    
    <LibMethod Comment="Precharge duration" Name="LL_RTC_TAMPER_SetPrecharge">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>

        <Argument AddressOf="false" GenericType="simple" Name="PrechargeDuration" OptimizationCondition="equal"/>
    </LibMethod>

    
    <LibMethod Comment="Sampling frequency" Name="LL_RTC_TAMPER_SetSamplingFreq">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>

        <Argument AddressOf="false" GenericType="simple" Name="SamplingFrequency" OptimizationCondition="equal"/>
    </LibMethod>

    
    <LibMethod Comment="Enable Pull up" Name="LL_RTC_TAMPER_EnablePullUp">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>

    </LibMethod>
    
    <LibMethod Comment=" " Name="LL_RTC_TAMPER_EnableMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Mask" OptimizationCondition="equal"/>

    </LibMethod>
    <LibMethod Comment=" " Name="LL_RTC_TAMPER_EnableEraseBKP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Tamper" OptimizationCondition="equal"/>

    </LibMethod>
    <LibMethod Comment=" " Name="LL_RTC_TAMPER_DisableMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Mask" OptimizationCondition="equal"/>

    </LibMethod>
    <LibMethod Comment=" " Name="LL_RTC_TAMPER_DisableEraseBKP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Tamper" OptimizationCondition="equal"/>

    </LibMethod>

    
    <LibMethod Comment="" Name="LL_RTC_TAMPER_DisablePullUp">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>

    </LibMethod>
    
    
    
  
    
    <!--     <LibMethod Comment="Enable timestamp on tamper detection" Name="LL_RTC_TS_EnableOnTamper">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>-->
    
    <LibMethod Comment="" Name="LL_RTC_TS_DisableOnTamper">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>

    <LibMethod Comment="" Name="LL_RTC_IsEnabledIT_TAMP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>

    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetTampPrivilege">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="tampPrivilege" OptimizationCondition="equal"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_TAMPER_Enable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Tamper" OptimizationCondition="equal"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_TAMPER_ATAMP_SetOutputChangePeriod">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="ActiveOutputChangePeriod" OptimizationCondition="equal"/>
    </LibMethod>

    <LibMethod Comment="" Name="LL_RTC_TAMPER_Disable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>

        <Argument AddressOf="false" GenericType="simple" Name="Tamper" OptimizationCondition="equal"/>
    </LibMethod>

    <LibMethod Comment="" Name="LL_RTC_TAMPER_EnableMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>

        <Argument AddressOf="false" GenericType="simple" Name="Mask" OptimizationCondition="equal"/>
    </LibMethod>

    <LibMethod Comment="" Name="LL_RTC_TAMPER_DisableMask">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>

        <Argument AddressOf="false" GenericType="simple" Name="Mask" OptimizationCondition="equal"/>
    </LibMethod>

    <LibMethod Comment="" Name="LL_RTC_TAMPER_EnableEraseBKP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="rtcSecure" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetRtcSecure" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="rtcSecure" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetTampSecure">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="tampSecure" OptimizationCondition="equal"/>
    </LibMethod>


    <LibMethod Comment="" Name="LL_RTC_TAMPER_DisableEraseBKP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Tamper" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="Set Tamper trigger to falling edge" Name="LL_RTC_TAMPER_EnableActiveLevel">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Trigger" OptimizationCondition="equal"/>
    </LibMethod>
   

    <LibMethod Comment="" Name="LL_RTC_TAMPER_DisableActiveLevel">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Tamper" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_SetFormat">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
    </LibMethod>
   
    <LibMethod Comment="" Name="LL_RTC_TIME_GetFormat">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_EnableOutRemap">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
   
    <LibMethod Comment="" Name="LL_RTC_CALIB_OUTPUT_512HZ">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_OUTPUTPOLARITY_PIN_HIGH">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_OUTPUTPOLARITY_PIN_LOW">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALARM_OUTPUTTYPE_OPENDRAIN">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALARM_OUTPUTTYPE_PUSHPULL">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    
    
    <LibMethod Comment="" Name="LL_RTC_ALARMOUT_ALMA">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALARMOUT_ALMB">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALARMOUT_DISABLE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_ALARMOUT_WAKEUP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    
    
     
    <LibMethod Comment="" Name="LL_RTC_CALIB_OUTPUT_1HZ">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_SetHour">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
    </LibMethod>

    <LibMethod Comment="" Name="LL_RTC_TIME_GetHour">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    
    
    <LibMethod Comment="" Name="LL_RTC_SetAsynchPrescaler">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="AsynchPrescaler" OptimizationCondition="equal"/>
    </LibMethod>

    <LibMethod Comment="" Name="LL_RTC_GetAsynchPrescaler">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetBackupRegProtection" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="startZone2" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="startZone3" OptimizationCondition="equal"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_SetSynchPrescaler">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="SynchPrescaler" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TAMPER_EnableActiveLevel">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Trigger" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_SetAlarmOutEvent" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="AlarmOutput" OptimizationCondition="equal"/>
    </LibMethod>
     
    <LibMethod Comment="" Name="LL_RTC_GetSynchPrescaler">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    

    <LibMethod Comment="" Name="LL_RTC_TIME_SetMinute">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_GetMinute">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_SetSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
    </LibMethod>
    
    
    <LibMethod Comment="" Name="LL_RTC_TIME_GetSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_Config">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Format12_24" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_Get">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_EnableDayLightStore">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_DisableDayLightStore">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_IsDayLightStoreEnabled">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_DecHour">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_IncHour">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_GetSubSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TIME_Synchronize">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="ShiftSecond" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Fraction" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_EnableInternalEvent">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_DisableInternalEvent">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_Enable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_Disable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_SetActiveEdge">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Edge" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_GetActiveEdge">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_GetTimeFormat">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_GetHour">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_GetMinute">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_GetSecond">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_GetTime">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_GetWeekDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_GetMonth">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_GetDay">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_TS_GetDate">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_WAKEUP_SetClock">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="WakeUpClock" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_WAKEUP_SetAutoReload">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Tamper" OptimizationCondition="equal"/>
    </LibMethod>
   
    <LibMethod Comment="" Name="LL_RTC_CAL_SetOutputFreq">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="CalibOutput" OptimizationCondition="equal"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RTC_BKP_GetRegister">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>

        <Argument AddressOf="false" GenericType="Simple" Name="BackupRegister"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RTC_BKP_SetRegister">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
        <Argument AddressOf="false" GenericType="Simple" Name="BackupRegister"/>
        <Argument AddressOf="false" GenericType="Simple" Name="Data"/>
    </LibMethod>
    
   <LibMethod Comment="" Name="LL_RTC_EnableAlarmPullUp" Optimizable="true">
        <Argument AddressOf="false" GenericType="baseaddress" Name="RTCx" TypeName="RTC_TypeDef"/>
    </LibMethod>
    <RefComponent Cclass="LL" Cgroup="RTC" Cversion="0.4.0">
        <File Category="header" Name="Drivers/STM32WBAxx_HAL_Driver/Inc/stm32wbaxx_ll_rtc.h"/>
        <File Category="source" Name="Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_ll_rtc.c"/>
    </RefComponent>
</IP>

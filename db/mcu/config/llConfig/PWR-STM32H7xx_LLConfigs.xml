<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP xmlns="http://mcd.rou.st.com/modules.php?name=mcu" xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance"
	DBVersion="V4.0" Name="PWR" Version="STM32Cube_FW_H7_V1.5.0RC3" IncludeFile="stm32h7xx_ll_pwr.h,stm32h7xx_ll_system.h,stm32h7xx_ll_exti.h,stm32h7xx_ll_pwr.h"
	ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">

<!-- VREFBUF Configuration -->
	<!--RefConfig Comment="Enable the Internal Voltage Reference buffer" Name="VREFBUFMODEConfigEnable">
		<CallLibMethod Name="LL_VREFBUF_Enable" ReturnHAL="false" />
	</RefConfig>

	<RefConfig Comment="Disable the Internal Voltage Reference buffer" Name="VREFBUFMODEConfigDisable">
		<CallLibMethod Name="LL_VREFBUF_Disable" ReturnHAL="false" />
	</RefConfig>

	<RefConfig Comment="Configure the internal voltage reference buffer high impedance mode" Name="HighImpedanceModeConfig">
		<IFCondition Expression="(HighImpedanceMode = SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE)">
			<CallLibMethod Name="LL_VREFBUF_EnableHIZ" ReturnHAL="false"/>
		</IFCondition>

		<IFCondition Expression="(HighImpedanceMode = SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE)">
			<CallLibMethod Name="LL_VREFBUF_DisableHIZ" ReturnHAL="false"/>
		</IFCondition>
	</RefConfig>
	
	<RefConfig Comment="Tune the Internal Voltage Reference buffer" Name="TrimmingValueConfig">
		<CallLibMethod Name="LL_VREFBUF_SetTrimming" ReturnHAL="false">
			<MethodArg Name="Value" ParameterName="TrimmingValue" />
		</CallLibMethod>
	</RefConfig>

	<RefConfig Comment="Configure the internal voltage reference buffer voltage scale" Name="InternalVoltageReferenceScaleConfig">
		<CallLibMethod Name="LL_VREFBUF_SetVoltageScaling" ReturnHAL="false" >
		  <MethodArg Name="Scale" ParameterName="VoltageScaling" />
		</CallLibMethod>
	</RefConfig-->


<!-- PVD Configuration -->
  <RefConfig Comment="PVD Configuration" Name="PVDConfig">
     
    <CallLibMethod Name="LL_PWR_SetPVDLevel"  ReturnHAL="false">
      <MethodArg Name="PVDLevel" ParameterName="PVDLevel" />
    </CallLibMethod>

    <IFCondition Expression="!(Mode = PWR_PVD_MODE_NORMAL)|!(AVDMode = PWR_AVD_MODE_NORMAL)">
      <CallLibMethod Name="INITSTRUCT" Type="HardCode">
         <HardCode Text="#n#t/* Configure EXTI line 16 */#n#tLL_EXTI_InitTypeDef exti_initstruct;#n#texti_initstruct.Line_0_31 = LL_EXTI_LINE_16;#n#texti_initstruct.Line_32_63 = LL_EXTI_LINE_NONE;#n#texti_initstruct.LineCommand = ENABLE;"/>
      </CallLibMethod>
    </IFCondition>    
      
    <IFCondition Expression="(Mode = PWR_PVD_MODE_IT_RISING) | (Mode = PWR_PVD_MODE_IT_FALLING) | (Mode = PWR_PVD_MODE_IT_RISING_FALLING) |(AVDMode = PWR_PVD_MODE_IT_RISING) | (AVDMode = PWR_AVD_MODE_IT_FALLING) | (AVDMode = PWR_AVD_MODE_IT_RISING_FALLING)">
      <CallLibMethod Name="MODE_IT" Type="HardCode">
        <HardCode Text="#n#texti_initstruct.Mode = LL_EXTI_MODE_IT;"/>
      </CallLibMethod>
    </IFCondition>
      
    <IFCondition Expression="(Mode = PWR_PVD_MODE_EVENT_RISING) | (Mode = PWR_PVD_MODE_EVENT_FALLING) | (Mode = PWR_PVD_MODE_EVENT_RISING_FALLING) |(AVDMode = PWR_AVD_MODE_EVENT_RISING) | (AVDMode = AWR_PVD_MODE_EVENT_FALLING) | (AVDMode = PWR_AVD_MODE_EVENT_RISING_FALLING)">
      <CallLibMethod Name="MODE_EVENT" Type="HardCode">
        <HardCode Text="#n#texti_initstruct.Mode = LL_EXTI_MODE_EVENT;"/>
      </CallLibMethod>
    </IFCondition>
          
    <IFCondition Expression="(Mode = PWR_PVD_MODE_IT_RISING) | (Mode = PWR_PVD_MODE_EVENT_RISING) |(AVDMode = PWR_AVD_MODE_IT_RISING) | (AVDMode = PWR_AVD_MODE_EVENT_RISING)">
      <CallLibMethod Name="TRIGGER_RISING" Type="HardCode">
       <HardCode Text="#n#texti_initstruct.Trigger = LL_EXTI_TRIGGER_RISING;"/>
      </CallLibMethod>
    </IFCondition>
      
    <IFCondition Expression="(Mode = PWR_PVD_MODE_IT_FALLING) | (Mode = PWR_PVD_MODE_EVENT_FALLING)|(AVDMode = PWR_AVD_MODE_IT_FALLING) | (AVDMode = PWR_AVD_MODE_EVENT_FALLING)">
      <CallLibMethod Name="TRIGGER_FALLING" Type="HardCode">
       <HardCode Text="#n#texti_initstruct.Trigger = LL_EXTI_TRIGGER_FALLING;"/>
      </CallLibMethod>
    </IFCondition>
      
    <IFCondition Expression="(Mode = PWR_PVD_MODE_IT_RISING_FALLING) | (Mode = PWR_PVD_MODE_EVENT_RISING_FALLING)|(AVDMode = PWR_AVD_MODE_IT_RISING_FALLING) | (AVDMode = PWR_AVD_MODE_EVENT_RISING_FALLING)">
      <CallLibMethod Name="TRIGGER_RISING_FALLING" Type="HardCode">
       <HardCode Text="#n#texti_initstruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;"/>
      </CallLibMethod>
    </IFCondition>
         
    <IFCondition Expression="!(Mode = PWR_PVD_MODE_NORMAL)|!(AVDMode = PWR_AVD_MODE_NORMAL)">
      <CallLibMethod Name="EXTI_INIT" Type="HardCode">
         <HardCode Text="#n#tLL_EXTI_Init( &amp;exti_initstruct);"/>
      </CallLibMethod>
    </IFCondition>
    
  </RefConfig>
  
  <RefConfig Comment="Enable the PVD Output" Name="PVDEnable">
 
		<CallLibMethod Name="LL_PWR_EnablePVD" ReturnHAL="false"/>
              
                
  </RefConfig>
  <!-- AVD Configuration -->
  <RefConfig Comment="AVD Configuration" Name="AVDConfig">
     
    <CallLibMethod Name="LL_PWR_SetAVDLevel"  ReturnHAL="false">
      <MethodArg Name="AVDLevel" ParameterName="AVDLevel" />
    </CallLibMethod>

    <!--IFCondition Expression="!(AVDMode = PWR_AVD_MODE_NORMAL)">
      <CallLibMethod Name="INITSTRUCT" Type="HardCode">
         <HardCode Text="#n#t/* Configure EXTI line 16 */#n#tLL_EXTI_InitTypeDef exti_initstruct;#n#texti_initstruct.Line_0_31 = LL_EXTI_LINE_16;#n#texti_initstruct.Line_32_63 = LL_EXTI_LINE_NONE;#n#texti_initstruct.LineCommand = ENABLE;"/>
      </CallLibMethod>
    </IFCondition-->    
      
    <!--IFCondition Expression="(AVDMode = PWR_PVD_MODE_IT_RISING) | (AVDMode = PWR_AVD_MODE_IT_FALLING) | (AVDMode = PWR_AVD_MODE_IT_RISING_FALLING)">
      <CallLibMethod Name="MODE_IT" Type="HardCode">
        <HardCode Text="#n#texti_initstruct.Mode = LL_EXTI_MODE_IT;"/>
      </CallLibMethod>
    </IFCondition-->
      
    <!--IFCondition Expression="(AVDMode = PWR_AVD_MODE_EVENT_RISING) | (AVDMode = AWR_PVD_MODE_EVENT_FALLING) | (AVDMode = PWR_AVD_MODE_EVENT_RISING_FALLING)">
      <CallLibMethod Name="MODE_EVENT" Type="HardCode">
        <HardCode Text="#n#texti_initstruct.Mode = LL_EXTI_MODE_EVENT;"/>
      </CallLibMethod>
    </IFCondition-->
          
    <!--IFCondition Expression="(AVDMode = PWR_AVD_MODE_IT_RISING) | (AVDMode = PWR_AVD_MODE_EVENT_RISING)">
      <CallLibMethod Name="TRIGGER_RISING" Type="HardCode">
       <HardCode Text="#n#texti_initstruct.Trigger = LL_EXTI_TRIGGER_RISING;"/>
      </CallLibMethod>
    </IFCondition-->
      
    <!--IFCondition Expression="(AVDMode = PWR_AVD_MODE_IT_FALLING) | (AVDMode = PWR_AVD_MODE_EVENT_FALLING)">
      <CallLibMethod Name="TRIGGER_FALLING" Type="HardCode">
       <HardCode Text="#n#texti_initstruct.Trigger = LL_EXTI_TRIGGER_FALLING;"/>
      </CallLibMethod>
    </IFCondition-->
      
    <!--IFCondition Expression="(AVDMode = PWR_AVD_MODE_IT_RISING_FALLING) | (AVDMode = PWR_AVD_MODE_EVENT_RISING_FALLING)">
      <CallLibMethod Name="TRIGGER_RISING_FALLING" Type="HardCode">
       <HardCode Text="#n#texti_initstruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;"/>
      </CallLibMethod>
    </IFCondition-->
         
    <!--IFCondition Expression="!(AVDMode = PWR_AVD_MODE_NORMAL)">
      <CallLibMethod Name="EXTI_INIT" Type="HardCode">
         <HardCode Text="#n#tLL_EXTI_Init( &amp;exti_initstruct);"/>
      </CallLibMethod>
    </IFCondition-->
    
  </RefConfig>
  <RefConfig Comment="Enable the AVD Output" Name="AVDEnable">
 
		<CallLibMethod Name="LL_PWR_EnableAVD" ReturnHAL="false"/>
              
                
  </RefConfig>

	

	<LibMethod Comment="Enable Power Voltage Detector" Name="LL_PWR_EnablePVD" />
	<LibMethod Comment="Disable Power Voltage Detector" Name="LL_PWR_DisablePVD" />

	<LibMethod Comment="Configure the voltage threshold detected by the Power Voltage Detector" Name="LL_PWR_SetPVDLevel">
		<Argument AddressOf="false" GenericType="simple" Name="PVDLevel" OptimizationCondition="equal" />
	</LibMethod>
        
        <LibMethod Comment="Enable Analog Voltage Detector" Name="LL_PWR_EnableAVD" />
	<LibMethod Comment="Disable Analog Voltage Detector" Name="LL_PWR_DisableAVD" />

	<LibMethod Comment="Configure the voltage threshold detected by the Analog Voltage Detector" Name="LL_PWR_SetAVDLevel">
		<Argument AddressOf="false" GenericType="simple" Name="AVDLevel" OptimizationCondition="equal" />
	</LibMethod>

	<RefConfig Comment="Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral" Name="DisableDeadBatterySignals">
		<IFCondition Expression="DisableDeadBatterySignalsConfig=Disable">
			<CallLibMethod Name="LL_PWR_DisableUCPDDeadBattery" ReturnHAL="false"/>
		</IFCondition>
	</RefConfig>

	<LibMethod Comment="" Name="LL_PWR_DisableUCPDDeadBattery"/>

<RefComponent Cclass="LL" Cgroup="DAC" Cversion="1.5.0">
        
       
         <File Category="header" Name="Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_pwr.h"/>
        <File Category="source" Name="Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_pwr.c"/>
    </RefComponent>
</IP>

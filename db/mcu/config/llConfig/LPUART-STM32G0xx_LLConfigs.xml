<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP xmlns="http://mcd.rou.st.com/modules.php?name=mcu" DBVersion="V4.0" Name="LPUART" IncludeFile="stm32g0xx_ll_lpuart.h;stm32g0xx_ll_rcc.h" Version="STM32Cube_FW_G0_V0.4.0"
    xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance" ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">
    <RefConfig Name="Lpuart_Init">
        <CallLibMethod Name="LL_LPUART_Init">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="BaudRate" ParameterName="BaudRate"/>
            <MethodArg Name="DataWidth" ParameterName="WordLength"/>
            <MethodArg Name="StopBits" ParameterName="StopBits"/>
            <MethodArg Name="Parity" ParameterName="Parity"/>
            <MethodArg Name="TransferDirection" ParameterName="Mode"/>
            <MethodArg Name="HardwareFlowControl" ParameterName="HwFlowCtl"/>
            <MethodArg Name="PrescalerValue" ParameterName="ClockPrescaler"/>
        </CallLibMethod>
        
        <CallLibMethod Name="LL_LPUART_SetTXFIFOThreshold">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Threshold" ParameterName="TXFIFOThreshold"/>
        </CallLibMethod>
        <IFCondition Expression="(FifoMode=UART_FIFOMODE_ENABLE)">          
            <CallLibMethod Name="LL_LPUART_EnableFIFO">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(FifoMode=UART_FIFOMODE_DISABLE)">          
            <CallLibMethod Name="LL_LPUART_DisableFIFO">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
                  
        <CallLibMethod Name="LL_LPUART_SetRXFIFOThreshold">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Threshold" ParameterName="RXFIFOThreshold"/>
        </CallLibMethod>
        
        <IFCondition Expression="(RxPinLevelInvertParam = UART_ADVFEATURE_RXINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetRXPinLevel">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="PinInvMethod" ParameterName="RxPinLevelInvertParam"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(TxPinLevelInvertParam = UART_ADVFEATURE_TXINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTXPinLevel">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="PinInvMethod" ParameterName="TxPinLevelInvertParam"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(DataInvertParam = UART_ADVFEATURE_DATAINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetBinaryDataLogic">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="DataLogic" ParameterName="DataInvertParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(SwapParam = UART_ADVFEATURE_SWAP_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTXRXSwap">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="SwapConfig" ParameterName="SwapParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(OverrunDisableParam = UART_ADVFEATURE_OVERRUN_DISABLE)">
            <CallLibMethod Name="LL_LPUART_EnableOverrunDetect">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(DMADisableonRxErrorParam = UART_ADVFEATURE_DMA_DISABLEONRXERROR)">
            <CallLibMethod Name="LL_LPUART_EnableDMADeactOnRxErr">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(MSBFirstParam = UART_ADVFEATURE_MSBFIRST_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTransferBitOrder">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="BitOrder" ParameterName="MSBFirstParam"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* USER CODE BEGIN WKUPType $IpInstance */#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* USER CODE END WKUPType $IpInstance */#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="Asynchronous">
            <CallLibMethod Name="LL_LPUART_Enable">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* Polling $IpInstance initialisation */"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile((!(LL_LPUART_IsActiveFlag_TEACK($IpInstance))) || (!(LL_LPUART_IsActiveFlag_REACK($IpInstance))))#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig>
	
    <RefConfig Name="Lpuart_RS485_Init">	
        <CallLibMethod Name="LL_LPUART_Init">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="BaudRate" ParameterName="BaudRate"/>
            <MethodArg Name="DataWidth" ParameterName="WordLength"/>
            <MethodArg Name="StopBits" ParameterName="StopBits"/>
            <MethodArg Name="Parity" ParameterName="Parity"/>
            <MethodArg Name="TransferDirection" ParameterName="Mode"/>
            <MethodArg Name="HardwareFlowControl" ParameterName="HwFlowCtl"/>
            <MethodArg Name="PrescalerValue" ParameterName="ClockPrescaler"/>
        </CallLibMethod>
        <CallLibMethod Name="LL_LPUART_SetTXFIFOThreshold">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Threshold" ParameterName="TXFIFOThreshold"/>
        </CallLibMethod>
                  
        <CallLibMethod Name="LL_LPUART_SetRXFIFOThreshold">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Threshold" ParameterName="RXFIFOThreshold"/>
        </CallLibMethod>
        
        <IFCondition Expression="(FifoMode=UART_FIFOMODE_ENABLE)">          
            <CallLibMethod Name="LL_LPUART_EnableFIFO">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(FifoMode=UART_FIFOMODE_DISABLE)">          
            <CallLibMethod Name="LL_LPUART_DisableFIFO">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression="(RxPinLevelInvertParam = UART_ADVFEATURE_RXINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetRXPinLevel">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="PinInvMethod" ParameterName="RxPinLevelInvertParam"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(TxPinLevelInvertParam = UART_ADVFEATURE_TXINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTXPinLevel">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="PinInvMethod" ParameterName="TxPinLevelInvertParam"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(DataInvertParam = UART_ADVFEATURE_DATAINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetBinaryDataLogic">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="DataLogic" ParameterName="DataInvertParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(SwapParam = UART_ADVFEATURE_SWAP_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTXRXSwap">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="SwapConfig" ParameterName="SwapParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(OverrunDisableParam = UART_ADVFEATURE_OVERRUN_DISABLE)">
            <CallLibMethod Name="LL_LPUART_EnableOverrunDetect">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(DMADisableonRxErrorParam = UART_ADVFEATURE_DMA_DISABLEONRXERROR)">
            <CallLibMethod Name="LL_LPUART_EnableDMADeactOnRxErr">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(MSBFirstParam = UART_ADVFEATURE_MSBFIRST_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTransferBitOrder">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="BitOrder" ParameterName="MSBFirstParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <CallLibMethod Name="LL_LPUART_EnableDEMode">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
        </CallLibMethod>
        <CallLibMethod Name="LL_LPUART_SetDESignalPolarity">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Polarity" ParameterName="UART_DEPolarity"/>
        </CallLibMethod>
        <CallLibMethod Name="LL_LPUART_SetDEAssertionTime">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Time" ParameterName="UART_DEAssertionTime"/>
        </CallLibMethod>
        <CallLibMethod Name="LL_LPUART_SetDEDeassertionTime">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Time" ParameterName="UART_DEDeassertionTime"/>
        </CallLibMethod>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* USER CODE BEGIN WKUPType $IpInstance */#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* USER CODE END WKUPType $IpInstance */#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="LL_LPUART_Enable">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* Polling $IpInstance initialisation */"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile((!(LL_LPUART_IsActiveFlag_TEACK($IpInstance))) || (!(LL_LPUART_IsActiveFlag_REACK($IpInstance))))#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig>
    <RefConfig Name="Lpuart_HalfDuplex_Init">
        <CallLibMethod Name="LL_LPUART_Init">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="BaudRate" ParameterName="BaudRate"/>
            <MethodArg Name="DataWidth" ParameterName="WordLength"/>
            <MethodArg Name="StopBits" ParameterName="StopBits"/>
            <MethodArg Name="Parity" ParameterName="Parity"/>
            <MethodArg Name="TransferDirection" ParameterName="Mode"/>
            <MethodArg Name="PrescalerValue" ParameterName="ClockPrescaler"/>
        </CallLibMethod>
        <CallLibMethod Name="LL_LPUART_SetTXFIFOThreshold">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Threshold" ParameterName="TXFIFOThreshold"/>
        </CallLibMethod>
                  
        <CallLibMethod Name="LL_LPUART_SetRXFIFOThreshold">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Threshold" ParameterName="RXFIFOThreshold"/>
        </CallLibMethod>
        
        <IFCondition Expression="(FifoMode=UART_FIFOMODE_ENABLE)">          
            <CallLibMethod Name="LL_LPUART_EnableFIFO">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(FifoMode=UART_FIFOMODE_DISABLE)">          
            <CallLibMethod Name="LL_LPUART_DisableFIFO">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression="(RxPinLevelInvertParam = UART_ADVFEATURE_RXINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetRXPinLevel">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="PinInvMethod" ParameterName="RxPinLevelInvertParam"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(TxPinLevelInvertParam = UART_ADVFEATURE_TXINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTXPinLevel">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="PinInvMethod" ParameterName="TxPinLevelInvertParam"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(DataInvertParam = UART_ADVFEATURE_DATAINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetBinaryDataLogic">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="DataLogic" ParameterName="DataInvertParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(SwapParam = UART_ADVFEATURE_SWAP_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTXRXSwap">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="SwapConfig" ParameterName="SwapParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(OverrunDisableParam = UART_ADVFEATURE_OVERRUN_DISABLE)">
            <CallLibMethod Name="LL_LPUART_EnableOverrunDetect">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(DMADisableonRxErrorParam = UART_ADVFEATURE_DMA_DISABLEONRXERROR)">
            <CallLibMethod Name="LL_LPUART_EnableDMADeactOnRxErr">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(MSBFirstParam = UART_ADVFEATURE_MSBFIRST_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTransferBitOrder">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="BitOrder" ParameterName="MSBFirstParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <CallLibMethod Name="LL_LPUART_EnableHalfDuplex">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
        </CallLibMethod>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* USER CODE BEGIN WKUPType $IpInstance */#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* USER CODE END WKUPType $IpInstance */#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="LL_LPUART_Enable">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* Polling $IpInstance initialisation */"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile((!(LL_LPUART_IsActiveFlag_TEACK($IpInstance))) || (!(LL_LPUART_IsActiveFlag_REACK($IpInstance))))#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig>
    <RefConfig Name="Lpuart_MultiProcessor_Init">
        <CallLibMethod Name="LL_LPUART_Init">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="BaudRate" ParameterName="BaudRate"/>
            <MethodArg Name="DataWidth" ParameterName="WordLength"/>
            <MethodArg Name="StopBits" ParameterName="StopBits"/>
            <MethodArg Name="Parity" ParameterName="Parity"/>
            <MethodArg Name="TransferDirection" ParameterName="Mode"/>
            <MethodArg Name="PrescalerValue" ParameterName="ClockPrescaler"/>
        </CallLibMethod>
        <CallLibMethod Name="LL_LPUART_SetTXFIFOThreshold">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Threshold" ParameterName="TXFIFOThreshold"/>
        </CallLibMethod>
                  
        <CallLibMethod Name="LL_LPUART_SetRXFIFOThreshold">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Threshold" ParameterName="RXFIFOThreshold"/>
        </CallLibMethod>
        
        <IFCondition Expression="(FifoMode=UART_FIFOMODE_ENABLE)">          
            <CallLibMethod Name="LL_LPUART_EnableFIFO">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(FifoMode=UART_FIFOMODE_DISABLE)">          
            <CallLibMethod Name="LL_LPUART_DisableFIFO">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression="(RxPinLevelInvertParam = UART_ADVFEATURE_RXINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetRXPinLevel">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="PinInvMethod" ParameterName="RxPinLevelInvertParam"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(TxPinLevelInvertParam = UART_ADVFEATURE_TXINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTXPinLevel">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="PinInvMethod" ParameterName="TxPinLevelInvertParam"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="(DataInvertParam = UART_ADVFEATURE_DATAINV_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetBinaryDataLogic">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="DataLogic" ParameterName="DataInvertParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(SwapParam = UART_ADVFEATURE_SWAP_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTXRXSwap">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="SwapConfig" ParameterName="SwapParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(OverrunDisableParam = UART_ADVFEATURE_OVERRUN_DISABLE)">
            <CallLibMethod Name="LL_LPUART_EnableOverrunDetect">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(DMADisableonRxErrorParam = UART_ADVFEATURE_DMA_DISABLEONRXERROR)">
            <CallLibMethod Name="LL_LPUART_EnableDMADeactOnRxErr">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression="(MSBFirstParam = UART_ADVFEATURE_MSBFIRST_ENABLE)">
            <CallLibMethod Name="LL_LPUART_SetTransferBitOrder">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
                <MethodArg Name="BitOrder" ParameterName="MSBFirstParam"/>
            </CallLibMethod>
        </IFCondition>
		
        <CallLibMethod Name="LL_LPUART_SetWakeUpMethod">
            <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            <MethodArg Name="Method" ParameterName="WakeUpMethod"/>
        </CallLibMethod>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* USER CODE BEGIN WKUPType $IpInstance */#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* USER CODE END WKUPType $IpInstance */#n"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="LL_LPUART_Enable">
                <MethodArg Name="LPUARTx" ParameterName="Instance"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression="1=1">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t/* Polling $IpInstance initialisation */"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile((!(LL_LPUART_IsActiveFlag_TEACK($IpInstance))) || (!(LL_LPUART_IsActiveFlag_REACK($IpInstance))))#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
    </RefConfig>

    <RefConfig Name="Lpuart_DeInit">
        <CallLibMethod Name="LL_LPUART_DeInit"/>
    </RefConfig>


    <LibMethod Comment="" Name="LL_LPUART_Enable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_Disable">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabled">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableInStopMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableInStopMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledInStopMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableDirectionRx">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableDirectionRx">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableDirectionTx">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableDirectionTx">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetTransferDirection">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="TransferDirection" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetTransferDirection">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetParity">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Parity" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetParity">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetWakeUpMethod">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Method" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetWakeUpMethod">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetDataWidth">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="DataWidth" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetDataWidth">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableMuteMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableMuteMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledMuteMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetStopBitsLength">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="StopBits" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetStopBitsLength">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ConfigCharacter">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="DataWidth" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Parity" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="StopBits" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetTXRXSwap">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="SwapConfig" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetTXRXSwap">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetRXPinLevel">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="PinInvMethod" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetTXFIFOThreshold">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Threshold" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetRXFIFOThreshold">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Threshold" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetRXPinLevel">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetTXPinLevel">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="PinInvMethod" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetTXPinLevel">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetBinaryDataLogic">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="DataLogic" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetBinaryDataLogic">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetTransferBitOrder">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="BitOrder" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetTransferBitOrder">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ConfigNodeAddress">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="AddressLen" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="NodeAddress" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetNodeAddress">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetNodeAddressLen">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableRTSHWFlowCtrl">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableRTSHWFlowCtrl">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableCTSHWFlowCtrl">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableCTSHWFlowCtrl">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetHWFlowCtrl">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="HardwareFlowControl" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetHWFlowCtrl">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableOverrunDetect">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableOverrunDetect">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledOverrunDetect">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetWKUPType">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Type" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetWKUPType">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetBaudRate">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="PeriphClk" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="BaudRate" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetBaudRate">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="PeriphClk" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetDEDeassertionTime">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Time" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetDEDeassertionTime">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetDEAssertionTime">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Time" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetDEAssertionTime">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableDEMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableDEMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledDEMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_SetDESignalPolarity">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Polarity" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_GetDESignalPolarity">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableHalfDuplex">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableHalfDuplex">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledHalfDuplex">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ReceiveData8">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ReceiveData9">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_TransmitData8">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Value" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_TransmitData9">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Value" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableDMAReq_RX">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableDMAReq_RX">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledDMAReq_RX">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableDMAReq_TX">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableDMAReq_TX">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledDMAReq_TX">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableDMADeactOnRxErr">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableDMADeactOnRxErr">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledDMADeactOnRxErr">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DMA_GetRegAddr">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="false" GenericType="simple" Name="Direction" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_RequestBreakSending">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_RequestEnterMuteMode">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_RequestRxDataFlush">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_PE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_FE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_NE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_ORE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_IDLE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_RXNE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_TC">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_TXE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_nCTS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_CTS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_BUSY">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_CM">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_SBK">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_RWU">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_WKUP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_TEACK">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsActiveFlag_REACK">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ClearFlag_PE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ClearFlag_FE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ClearFlag_NE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ClearFlag_ORE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ClearFlag_IDLE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ClearFlag_TC">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ClearFlag_nCTS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ClearFlag_CM">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_ClearFlag_WKUP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DeInit">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_Init">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
        <Argument AddressOf="true" GenericType="struct" Name="LPUART_InitStruct" TypeName="LL_LPUART_InitTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="PrescalerValue" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="BaudRate" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="DataWidth" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="StopBits" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Parity" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="TransferDirection" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="HardwareFlowControl" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_StructInit">
        <Argument AddressOf="true" GenericType="struct" Name="LPUART_InitStruct" TypeName="LL_LPUART_InitTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="PrescalerValue" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="BaudRate" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="DataWidth" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="StopBits" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Parity" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="TransferDirection" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="HardwareFlowControl" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableIT_IDLE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableIT_RXNE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableIT_TC">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableIT_TXE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableIT_PE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableIT_CM">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableIT_ERROR">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableIT_CTS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_EnableIT_WKUP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableIT_IDLE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableIT_RXNE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableIT_TC">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableIT_TXE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableIT_PE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableIT_CM">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableIT_ERROR">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableIT_CTS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableIT_WKUP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledIT_IDLE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledIT_RXNE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledIT_TC">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledIT_TXE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledIT_PE">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledIT_CM">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledIT_ERROR">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledIT_CTS">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_IsEnabledIT_WKUP">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>    
    <LibMethod Comment="" Name="LL_LPUART_EnableFIFO">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_LPUART_DisableFIFO">
        <Argument AddressOf="false" GenericType="baseaddress" Name="LPUARTx" TypeName="USART_TypeDef"/>
    </LibMethod>
    <RefComponent Cclass="LL" Cgroup="LPUART" Cversion="0.4.0">
        <File Category="header" Name="Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_lpuart.h"/>
        <File Category="source" Name="Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_ll_lpuart.c"/>
        <File Category="header" Name="Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_rcc.h"/>
        <File Category="source" Name="Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_ll_rcc.c"/>
    </RefComponent>
</IP>

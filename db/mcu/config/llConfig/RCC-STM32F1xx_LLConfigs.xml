<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP xmlns="http://mcd.rou.st.com/modules.php?name=mcu" DBVersion="V4.0" Name="RCC" Version="STM32Cube_FW_F1_V1.6.0" IncludeFile="stm32f1xx_ll_rcc.h;stm32f1xx_ll_bus.h;stm32f1xx_ll_system.h;stm32f1xx_ll_exti.h;stm32f1xx_ll_cortex.h;stm32f1xx_ll_utils.h;stm32f1xx_ll_pwr.h;stm32f1xx_ll_dma.h" xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance" ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">
        <RefConfig Name="RCC_OSCConfig">
      
        <!--flash latency configuration-->

        <IFCondition Expression ="1=1">

            <CallLibMethod Name="LL_FLASH_SetLatency">
                <MethodArg Name="Latency" ParameterName="FLatency"/>
            
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="(FLatency=FLASH_LATENCY_0) &amp; !(DIE420 | DIE428)">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="(FLatency=FLASH_LATENCY_1) &amp; !(DIE420 | DIE428)">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="(FLatency=FLASH_LATENCY_2) &amp; !(DIE420 | DIE428)">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#twhile(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)#n#t{#n#t}"/>
            </CallLibMethod>
        </IFCondition>

        <!--Clock source activation-->
      

        <IFCondition Expression ="HSEUsed=1 &amp; HSEByPass ">
            <CallLibMethod Name="LL_RCC_HSE_EnableBypass" />
        </IFCondition>
     
		
        <IFCondition Expression ="HSEUsed=1">
            <CallLibMethod Name="LL_RCC_HSE_Enable"/>
   
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Wait till HSE is ready */#n#twhile(LL_RCC_HSE_IsReady() != 1)#n#t{#n#t#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>   
  
		

        <IFCondition Expression ="HSIUsed=1">
            <CallLibMethod Name="LL_RCC_HSI_SetCalibTrimming">
                <MethodArg Name="Value" ParameterName="HSICalibrationValue"/>
            </CallLibMethod>
        </IFCondition>
		
        <IFCondition Expression ="HSIUsed=1">
            <CallLibMethod Name="LL_RCC_HSI_Enable"/>
     
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Wait till HSI is ready */#n#twhile(LL_RCC_HSI_IsReady() != 1)#n#t{#n#t#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>
				
        <IFCondition Expression ="LSIUsed=1">
            <CallLibMethod Name="LL_RCC_LSI_Enable"/>

            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Wait till LSI is ready */#n#twhile(LL_RCC_LSI_IsReady() != 1)#n#t{#n#t#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>
		

        <IFCondition Expression ="RTCUsed_ForRCC|(LSEUsed=1)">
            <CallLibMethod Name="LL_PWR_EnableBkUpAccess">
            </CallLibMethod>
        </IFCondition> 	 
		
        <IFCondition Expression ="LSEUsed=1 &amp; LSEByPass">
            <CallLibMethod Name="LL_RCC_LSE_EnableBypass"/>
        </IFCondition>
 
        <IFCondition Expression ="LSEUsed=1">
            <CallLibMethod Name="LL_RCC_LSE_Enable"/>
         
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Wait till LSE is ready */#n#twhile(LL_RCC_LSE_IsReady() != 1)#n#t{#n#t#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="RTCUsed_ForRCC &amp; RTCClockSelection=RCC_RTCCLKSOURCE_LSI">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#tif(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)#n#t{"/>
            </CallLibMethod>
        <Else>
            <IFCondition Expression ="RTCUsed_ForRCC &amp; RTCClockSelection=RCC_RTCCLKSOURCE_LSE">
                <CallLibMethod Name="" Type="HardCode">
                    <HardCode Text="#tif(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)#n#t{"/>
                </CallLibMethod>
                <Else>
                    <IFCondition Expression ="RTCUsed_ForRCC &amp; RCC_RTC_Clock_SourceLL=RCC_RTCCLKSOURCE_HSE">
                        <CallLibMethod Name="" Type="HardCode">
                            <HardCode Text="#tif(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_HSE_DIV128)#n#t{"/>
                            </CallLibMethod>
                    </IFCondition>
                </Else>
            </IFCondition>
        </Else>
        </IFCondition>

        <IFCondition Expression ="RTCUsed_ForRCC">
            <CallLibMethod Name="#tLL_RCC_ForceBackupDomainReset">
            </CallLibMethod>

            <CallLibMethod Name="#tLL_RCC_ReleaseBackupDomainReset">
            </CallLibMethod>
        </IFCondition>

        <IFCondition Expression ="RTCUsed_ForRCC|LCDUsed_ForRCC">
            <CallLibMethod Name="#tLL_RCC_SetRTCClockSource">
                <MethodArg Name="Source" ParameterName="RCC_RTC_Clock_SourceLL"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="RTCUsed_ForRCC">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#t}"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="RTCUsed_ForRCC">
            <CallLibMethod Name="LL_RCC_EnableRTC"/>
        </IFCondition>
		
        <!--CSS enable code gen-->
        <IFCondition Expression ="CSSEnabled">
            <CallLibMethod Name="LL_RCC_HSE_EnableCSS"/>
        </IFCondition>
		
		
        <!--PLL configuration-->
		
        <IFCondition Expression ="PLLUsedForSys=1">
            <CallLibMethod Name="LL_RCC_PLL_ConfigDomain_SYS">
                <MethodArg Name="Source" ParameterName="PLLSourceLL"/>
                <MethodArg Name="PLLMul" ParameterName="PLLMUL"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="PLLUsedForPll2=1">
            <CallLibMethod Name="LL_RCC_PLL_ConfigDomain_PLL2">
                <MethodArg Name="Divider" ParameterName="Prediv2"/>
                <MethodArg Name="Multiplicator" ParameterName="PLL2Mul"/>
            </CallLibMethod>
        </IFCondition>
        
        <IFCondition Expression ="PLLUsedForPlli2s=1">
            <CallLibMethod Name="LL_RCC_PLL_ConfigDomain_PLLI2S">
                <MethodArg Name="Divider" ParameterName="Prediv2"/>
                <MethodArg Name="Multiplicator" ParameterName="PLL3Mul"/>
            </CallLibMethod>
        </IFCondition>
      
         <!--PLL activation-->
         
        <IFCondition Expression ="((PLLUsedForPll2=1))">
            <CallLibMethod Name="LL_RCC_PLL2_Enable"/>
   
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Wait till PLL is ready */#n#twhile(LL_RCC_PLL2_IsReady() != 1)#n#t{#n#t#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>

        <IFCondition Expression ="((PLLUsed=1))">
            <CallLibMethod Name="LL_RCC_PLL_Enable"/>
   
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Wait till PLL is ready */#n#twhile(LL_RCC_PLL_IsReady() != 1)#n#t{#n#t#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>

        <IFCondition Expression ="(PLLUsedForPlli2s=1)">
            <CallLibMethod Name="LL_RCC_PLLI2S_Enable"/>
   
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Wait till PLL is ready */#n#twhile(LL_RCC_PLLI2S_IsReady() != 1)#n#t{#n#t#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>

		
        <IFCondition Expression ="1=1">

            <CallLibMethod Name="LL_RCC_SetAHBPrescaler">
                <MethodArg Name="Prescaler" ParameterName="AHBCLKDivider"/>
            </CallLibMethod>
        </IFCondition>

     
        <IFCondition Expression ="1=1">

            <CallLibMethod Name="LL_RCC_SetAPB1Prescaler">
                <MethodArg Name="Prescaler" ParameterName="APB1CLKDivider"/>
            </CallLibMethod>
        </IFCondition>

     
        <IFCondition Expression ="1=1">

            <CallLibMethod Name="LL_RCC_SetAPB2Prescaler">
                <MethodArg Name="Prescaler" ParameterName="APB2CLKDivider"/>
            </CallLibMethod>
        </IFCondition>

        <!--sys clock source + AHB/APB configuration-->
        <IFCondition Expression ="1=1">

            <CallLibMethod Name="LL_RCC_SetSysClkSource">
                <MethodArg Name="Source" ParameterName="SYSCLKSource"/>
            </CallLibMethod>
        
        
        </IFCondition>
        <IFCondition Expression ="SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK">

            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)#n#t{#n#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="SYSCLKSource=RCC_SYSCLKSOURCE_HSE">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)#n#t{#n#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="SYSCLKSource=RCC_SYSCLKSOURCE_HSI">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Wait till System clock is ready */#n#twhile(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)#n#t{#n#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>


        <!--system core frequency set,systick init,systick priority configuration-->
        <IFCondition Expression ="USE_FULL_LL_DRIVER">
            <CallLibMethod Name="LL_Init1msTick">
                <MethodArg Name="HCLKFrequency" ParameterName="TimSysFreq_Value"/>            
            </CallLibMethod>
        </IFCondition>

        <IFCondition Expression ="1=1">

            <CallLibMethod Name="LL_SetSystemCoreClock">
                <MethodArg Name="HCLKFrequency" ParameterName="HCLKFreq_Value"/>
            
            </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="!USE_FULL_LL_DRIVER">
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#n#t /* Update the time base */"/>
            </CallLibMethod>
            <CallLibMethod Name="" Type="HardCode">
                <HardCode Text="#tif (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)#n#t{#n#t#tError_Handler();#t#n#t}"/>
            </CallLibMethod>
        </IFCondition>


        <!--MCO clock source -->
        <IFCondition Expression ="MCOConfig">
            <CallLibMethod Name="LL_RCC_ConfigMCO">
                <MethodArg Name="MCOxSource" ParameterName="RCC_MCOSource"/>
            </CallLibMethod>
        </IFCondition>


    <IFCondition Expression ="ADCEnable=true">
        <CallLibMethod Name="LL_RCC_SetADCClockSource">
            <MethodArg Name="ADCxSource" ParameterName="ADCPresc"/>
        </CallLibMethod>
    </IFCondition>
    <IFCondition Expression ="USBEnable=true">
        <CallLibMethod Name="LL_RCC_SetUSBClockSource">
            <MethodArg Name="USBxSource" ParameterName="USBPrescaler"/>
        </CallLibMethod>
    </IFCondition>
    
    <IFCondition Expression ="I2S2Used_ForRCC">
        <CallLibMethod Name="LL_RCC_SetI2SClockSource">
            <MethodArg Name="Source" ParameterName="I2S2ClockSelectionARG"/>
        </CallLibMethod>
    </IFCondition>
    
    <IFCondition Expression ="I2S3Used_ForRCC">
        <CallLibMethod Name="LL_RCC_SetI2SClockSource">
            <MethodArg Name="Source" ParameterName="I2S3ClockSelectionARG"/>
        </CallLibMethod>
    </IFCondition>


    </RefConfig>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_LSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_LSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_HSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_HSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_PLLRDY"/>
    <LibMethod Comment="" Name="LL_RCC_ClearFlag_HSECSS"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_LSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_LSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_HSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_HSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_PLLRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_HSECSS"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_IWDGRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_LPWRRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_PINRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_PORRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_SFTRST"/>
    <LibMethod Comment="" Name="LL_RCC_IsActiveFlag_WWDGRST"/>
    <LibMethod Comment="" Name="LL_RCC_ClearResetFlags"/>
    <LibMethod Comment="" Name="LL_RCC_GetSystemClocksFreq">
        <Argument AddressOf="true" GenericType="struct" Name="RCC_Clocks" TypeName="LL_RCC_ClocksTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="SYSCLK_Frequency" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="HCLK_Frequency" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="PCLK1_Frequency" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="PCLK2_Frequency" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetADCClockFreq">
        <Argument AddressOf="false" GenericType="simple" Name="ADCxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_HSE_EnableCSS"/>
    <LibMethod Comment="" Name="LL_RCC_HSE_EnableBypass"/>
    <LibMethod Comment="" Name="LL_RCC_HSE_DisableBypass"/>
    <LibMethod Comment="" Name="LL_RCC_HSE_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_HSE_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_HSE_IsReady"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_IsReady"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_GetCalibration"/>
    <LibMethod Comment="" Name="LL_RCC_HSI_SetCalibTrimming">
        <Argument AddressOf="false" GenericType="simple" Name="Value" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_HSI_GetCalibTrimming"/>
    <LibMethod Comment="" Name="LL_RCC_DeInit"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_LSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_LSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_HSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_HSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_EnableIT_PLLRDY"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_LSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_LSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_HSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_HSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_DisableIT_PLLRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_LSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_LSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_HSIRDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_HSERDY"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledIT_PLLRDY"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_EnableBypass"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_DisableBypass"/>
    <LibMethod Comment="" Name="LL_RCC_LSE_IsReady"/>
    <LibMethod Comment="" Name="LL_RCC_LSI_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_LSI_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_LSI_IsReady"/>
    <LibMethod Comment="" Name="LL_RCC_ConfigMCO">
        <Argument AddressOf="false" GenericType="simple" Name="MCOxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetADCClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="ADCxSource" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetADCClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="ADCx" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_PLL_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_PLL2_Enable"/>
    <LibMethod Comment="" Name="LL_RCC_PLLI2S_Enable"/>    
    <LibMethod Comment="" Name="LL_RCC_PLL_Disable"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_IsReady"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_ConfigDomain_SYS">
        <Argument AddressOf="false" GenericType="simple" Name="Source" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="PLLMul" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_PLL_ConfigDomain_PLL2">
        <Argument AddressOf="false" GenericType="simple" Name="Divider" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Multiplicator" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_PLL_ConfigDomain_PLLI2S">
        <Argument AddressOf="false" GenericType="simple" Name="Divider" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Multiplicator" OptimizationCondition="equal"/>
    </LibMethod>    
    <LibMethod Comment="" Name="LL_RCC_PLL_GetMainSource"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_GetMultiplicator"/>
    <LibMethod Comment="" Name="LL_RCC_PLL_GetPrediv"/>
    <LibMethod Comment="" Name="#tLL_RCC_SetRTCClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="Source" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetRTCClockSource"/>
    <LibMethod Comment="" Name="LL_RCC_EnableRTC"/>
    <LibMethod Comment="" Name="LL_RCC_DisableRTC"/>
    <LibMethod Comment="" Name="LL_RCC_IsEnabledRTC"/>
    <LibMethod Comment="" Name="#tLL_RCC_ForceBackupDomainReset"/>
    <LibMethod Comment="" Name="#tLL_RCC_ReleaseBackupDomainReset"/>
    <LibMethod Comment="" Name="LL_RCC_SetSysClkSource">
        <Argument AddressOf="false" GenericType="simple" Name="Source" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetSysClkSource"/>
    <LibMethod Comment="" Name="LL_RCC_SetAHBPrescaler">
        <Argument AddressOf="false" GenericType="simple" Name="Prescaler" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetAPB1Prescaler">
        <Argument AddressOf="false" GenericType="simple" Name="Prescaler" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetAPB2Prescaler">
        <Argument AddressOf="false" GenericType="simple" Name="Prescaler" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_GetAHBPrescaler"/>
    <LibMethod Comment="" Name="LL_RCC_GetAPB1Prescaler"/>
    <LibMethod Comment="" Name="LL_RCC_GetAPB2Prescaler"/>
    <LibMethod Comment="" Name="LL_RCC_SetI2SClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="Source"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="LL_RCC_SetCK48MClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="CK48MxSource"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetUSBClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="USBxSource"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_RCC_SetRNGClockSource">
        <Argument AddressOf="false" GenericType="simple" Name="RNGxSource"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_SetSystemCoreClock">
        <Argument AddressOf="false" GenericType="simple" Name="HCLKFrequency"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_Init1msTick">
        <Argument AddressOf="false" GenericType="simple" Name="HCLKFrequency"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_FLASH_SetLatency">
        <Argument AddressOf="false" GenericType="simple" Name="Latency"/>
    </LibMethod>
    <LibMethod Comment="" Name="LL_PWR_EnableBkUpAccess"/>
    <RefComponent Cclass="LL" Cgroup="RCC" Cversion="1.6.0">
        <File Category="header" Name="Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h"/>
        <File Category="header" Name="Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_cortex.h"/>
        <File Category="header" Name="Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h"/>
        <File Category="source" Name="Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c"/>
        <File Category="header" Name="Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_system.h"/>
        <File Category="header" Name="Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_utils.h"/>
        <File Category="source" Name="Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c"/> 
	<File Category="header" Name="Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_exti.h"/>
        <File Category="source" Name="Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_exti.c"/>
        <File Category="header" Name="Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_pwr.h"/>
        <File Category="header" Name="Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h"/>
        <File Category="header" Name="Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h"/>
    </RefComponent>
</IP>

<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP xmlns="http://mcd.rou.st.com/modules.php?name=mcu" xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance"
	DBVersion="V4.0" Name="PWR" Version="STM32Cube_FW_H5_V0.2.0" IncludeFile="stm32h5xx_ll_pwr.h"
	ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">




<!-- PVD Configuration -->
  <RefConfig Comment="PVD Configuration" Name="PVDConfig">
    <CallLibMethod Name="LL_PWR_SetPVDLevel"  ReturnHAL="false">
      <MethodArg Name="PVDLevel" ParameterName="PVDLevel" />
    </CallLibMethod> 
    <IFCondition Expression="!(Mode = PWR_PVD_MODE_NORMAL) |!(AVDMode = PWR_AVD_MODE_NORMAL)">
      <CallLibMethod Name="INITSTRUCT" Type="HardCode">
         <HardCode Text="#n#t/* Configure EXTI line 16 */#n#tLL_EXTI_InitTypeDef exti_initstruct;#n#texti_initstruct.Line_0_31 = LL_EXTI_LINE_16;#n#texti_initstruct.Line_32_63 = LL_EXTI_LINE_NONE;#n#texti_initstruct.LineCommand = ENABLE;"/>
      </CallLibMethod>
    </IFCondition>    
      
    <IFCondition Expression="(Mode = PWR_PVD_MODE_IT_RISING) | (Mode = PWR_PVD_MODE_IT_FALLING) | (Mode = PWR_PVD_MODE_IT_RISING_FALLING) |(AVDMode = PWR_PVD_MODE_IT_RISING) | (AVDMode = PWR_AVD_MODE_IT_FALLING) | (AVDMode = PWR_AVD_MODE_IT_RISING_FALLING)">
      <CallLibMethod Name="MODE_IT" Type="HardCode">
        <HardCode Text="#n#texti_initstruct.Mode = LL_EXTI_MODE_IT;"/>
      </CallLibMethod>
    </IFCondition>
      
    <IFCondition Expression="(Mode = PWR_PVD_MODE_EVENT_RISING) | (Mode = PWR_PVD_MODE_EVENT_FALLING) | (Mode = PWR_PVD_MODE_EVENT_RISING_FALLING) |(AVDMode = PWR_AVD_MODE_EVENT_RISING) | (AVDMode = AWR_PVD_MODE_EVENT_FALLING) | (AVDMode = PWR_AVD_MODE_EVENT_RISING_FALLING)">
      <CallLibMethod Name="MODE_EVENT" Type="HardCode">
        <HardCode Text="#n#texti_initstruct.Mode = LL_EXTI_MODE_EVENT;"/>
      </CallLibMethod>
    </IFCondition>
          
    <IFCondition Expression="(Mode = PWR_PVD_MODE_IT_RISING) | (Mode = PWR_PVD_MODE_EVENT_RISING) |(AVDMode = PWR_AVD_MODE_IT_RISING) | (AVDMode = PWR_AVD_MODE_EVENT_RISING)">
      <CallLibMethod Name="TRIGGER_RISING" Type="HardCode">
       <HardCode Text="#n#texti_initstruct.Trigger = LL_EXTI_TRIGGER_RISING;"/>
      </CallLibMethod>
    </IFCondition>
      
    <IFCondition Expression="(Mode = PWR_PVD_MODE_IT_FALLING) | (Mode = PWR_PVD_MODE_EVENT_FALLING) |(AVDMode = PWR_AVD_MODE_IT_FALLING) | (AVDMode = PWR_AVD_MODE_EVENT_FALLING)">
      <CallLibMethod Name="TRIGGER_FALLING" Type="HardCode">
       <HardCode Text="#n#texti_initstruct.Trigger = LL_EXTI_TRIGGER_FALLING;"/>
      </CallLibMethod>
    </IFCondition>
      
    <IFCondition Expression="(Mode = PWR_PVD_MODE_IT_RISING_FALLING) | (Mode = PWR_PVD_MODE_EVENT_RISING_FALLING) |(AVDMode = PWR_AVD_MODE_IT_RISING_FALLING) | (AVDMode = PWR_AVD_MODE_EVENT_RISING_FALLING)">
      <CallLibMethod Name="TRIGGER_RISING_FALLING" Type="HardCode">
       <HardCode Text="#n#texti_initstruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;"/>
      </CallLibMethod>
    </IFCondition>
         
    <IFCondition Expression="!(Mode = PWR_PVD_MODE_NORMAL) |!(AVDMode = PWR_AVD_MODE_NORMAL)">
      <CallLibMethod Name="EXTI_INIT" Type="HardCode">
         <HardCode Text="#n#tLL_EXTI_Init( &amp;exti_initstruct);"/>
      </CallLibMethod>
    </IFCondition>
    
  </RefConfig>
  
  <RefConfig Comment="Enable the PVD Output" Name="PVDEnable">
      
		<CallLibMethod Name="LL_PWR_EnablePVD" ReturnHAL="false"/>
  </RefConfig>
<!-- AVD Configuration -->
  <RefConfig Comment="AVD Configuration" Name="AVDConfig">
     
    <CallLibMethod Name="LL_PWR_SetAVDLevel"  ReturnHAL="false">
      <MethodArg Name="AVDLevel" ParameterName="AVDLevel" />
    </CallLibMethod>
    </RefConfig>
  <RefConfig Comment="Enable the AVD Output" Name="AVDEnable">
 
		<CallLibMethod Name="LL_PWR_EnableAVD" ReturnHAL="false"/>
              
                
  </RefConfig>
<RefConfig Comment="PWR Privilege Configuration" Name="ConfigAttributesPRIV">
         <IFCondition Expression ="pwrPrivilegeSecure=PWR_PRIVILEGE_SECURE_YES" >
      <CallLibMethod Name="LL_PWR_EnableSecurePrivilege" ReturnHAL="false">
                       
        </CallLibMethod>
         </IFCondition>
                  <IFCondition Expression ="(pwrPrivilege=PWR_PRIVILEGE_YES)|pwrPrivilegeNSecure=PWR_PRIVILEGE_NSECURE_YES" >
      <CallLibMethod Name="LL_PWR_EnableNSecurePrivilege" ReturnHAL="false">
                       
        </CallLibMethod>
         </IFCondition>
     </RefConfig>	
<RefConfig Comment="PWR Privilege/Secure Items Configurations" Name="ConfigAttributesSECPRIV">
          <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_WKUP1=WKUP1_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemWKUP1"/>
                
        </CallLibMethod>
         </IFCondition>
          <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_WKUP2=WKUP2_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemWKUP2"/>
                    
        </CallLibMethod>
         </IFCondition>
          <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_WKUP3=WKUP3_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemWKUP3"/>
            
        </CallLibMethod>
         </IFCondition>
          <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_WKUP4=WKUP4_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemWKUP4"/>
                       
        </CallLibMethod>
         </IFCondition>
          <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_WKUP5=WKUP5_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemWKUP5"/>
                   
        </CallLibMethod>
         </IFCondition>
                   <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_WKUP6=WKUP6_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemWKUP6"/>
                   
        </CallLibMethod>
         </IFCondition>
                   <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_WKUP7=WKUP7_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemWKUP7"/>
                   
        </CallLibMethod>
         </IFCondition>
                   <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_WKUP8=WKUP8_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemWKUP8"/>
                   
        </CallLibMethod>
         </IFCondition>

          <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_VDM=VDM_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemVDM"/>
                     
        </CallLibMethod>
         </IFCondition>
           <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_APC=APC_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemAPC"/>
            
        </CallLibMethod>
         </IFCondition>
           <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_LPM=LPM_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemLPM"/>
                   
        </CallLibMethod>
         </IFCondition>
         <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_IO=IO_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemIO"/>
                   
        </CallLibMethod>
         </IFCondition>
         <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_SCM=SCM_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemSCM"/>
                   
        </CallLibMethod>
         </IFCondition>
         <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_VUSB=VUSB_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemVUSB"/>
                   
        </CallLibMethod>
         </IFCondition>
           <IFCondition Expression ="S_SECURE  &amp; SEM_M33S &amp; (PWR_VB=VB_SECURE_YES)" >
        <CallLibMethod Name="LL_PWR_ConfigSecure" ReturnHAL="false">
            <MethodArg Name="Item" ParameterName="ItemVB"/>
                
        </CallLibMethod>
         </IFCondition>
    </RefConfig>	
	<LibMethod Comment="Enable Power Voltage Detector" Name="LL_PWR_EnablePVD" />
	<LibMethod Comment="Disable Power Voltage Detector" Name="LL_PWR_DisablePVD" />

	<LibMethod Comment="Configure the voltage threshold detected by the Power Voltage Detector" Name="LL_PWR_SetPVDLevel">
		<Argument AddressOf="false" GenericType="simple" Name="PVDLevel" OptimizationCondition="equal" />
	</LibMethod>
<LibMethod Comment="" Name="LL_PWR_ConfigSecure">
		<Argument AddressOf="false" GenericType="simple" Name="Item" OptimizationCondition="equal" />
	</LibMethod>
	<RefConfig Comment="Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral" Name="DisableDeadBatterySignals">
		<IFCondition Expression="DisableDeadBatterySignalsConfig=Disable">
			<CallLibMethod Name="LL_PWR_DisableUCPDDeadBattery" ReturnHAL="false"/>
		</IFCondition>
	</RefConfig>

	<LibMethod Comment="" Name="LL_PWR_DisableUCPDDeadBattery"/>
 <LibMethod Comment="" Name="LL_PWR_EnableSecurePrivilege"/>
  <LibMethod Comment="" Name="LL_PWR_EnableNSecurePrivilege"/>
    <LibMethod Comment="Enable Analog Voltage Detector" Name="LL_PWR_EnableAVD" />
	<LibMethod Comment="Disable Analog Voltage Detector" Name="LL_PWR_DisableAVD" />

	<LibMethod Comment="Configure the voltage threshold detected by the Analog Voltage Detector" Name="LL_PWR_SetAVDLevel">
		<Argument AddressOf="false" GenericType="simple" Name="AVDLevel" OptimizationCondition="equal" />
	</LibMethod>
<RefComponent Cclass="LL" Cgroup="DAC" Cversion="1.5.0">
        
       
         <File Category="header" Name="Drivers/STM32H5xx_HAL_Driver/Inc/stm32h5xx_ll_pwr.h"/>
        <File Category="source" Name="Drivers/STM32H5xx_HAL_Driver/Src/stm32h5xx_ll_pwr.c"/>
    </RefComponent>
</IP>

<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP DBVersion="V4.0" Name="" Version="STM32Cube_FW_U5_V1.0" IncludeFile="" xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://mcd.rou.st.com/modules.php?name=mcu" ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">
<!--
    <RefMode Name="START">
        <ConfigForMode>LPTIM_START</ConfigForMode>
        <Parameter Name="START_StartMode"/>
        <Parameter Name="START_WakeupIT"/>
    </RefMode>

     <RefMode Name="STOP">
        <ConfigForMode>LPTIM_STOP</ConfigForMode>
        <Parameter Name="STOP_Mode"/>
    </RefMode>

    <RefMode Name="IC">
        <ConfigForMode>LPTIM_IC</ConfigForMode>
		
        <Parameter Name="IC_BufferAddress"/>
        <Parameter Name="IC_Size"/>
        <Parameter Name="MYCHANNELIC"/>

       
    </RefMode>
    <RefMode Name="PWM">
        <ConfigForMode>LPTIM_PWM</ConfigForMode>
        <Parameter Name="MYCHANNELPWM"/>
        <Parameter Name="PWM_UpdatePeriod"/>
		<Parameter Name="PWM_PeriodValue"/>
		<Parameter Name="PWM_UpdatePulse"/>
		<Parameter Name="PWM_PulseValue"/>
		<Parameter Name="PWM_UpdateRepetition"/>
		<Parameter Name="PWM_RepetitionValue"/>
    </RefMode>

	
	    <RefMode Name="UE">
        <ConfigForMode>LPTIM_UE</ConfigForMode>
        <Parameter Name="UE_Period"/>
		<Parameter Name="UE_Repetition"/> 
    </RefMode>
	-->
 <RefConfig Name="LPTIM_PWM">
   <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_LPTIM_PWM_SetFullQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_PWM"/>

       <MethodArg Name="Channel" 				ParameterName="MYCHANNEL_PWM"/>
       <MethodArg Name="UpdatePeriod"     		ParameterName="UpdatePeriod_PWM"/>
	   <MethodArg Name="PeriodValue"       		ParameterName="PeriodValue_PWM"/>
	   <MethodArg Name="UpdatePulse"       		ParameterName="UpdatePulse_PWM"/>
	   <MethodArg Name="PulseValue"       		ParameterName="PulseValue_PWM"/>
	   <MethodArg Name="UpdateRepetition"  		ParameterName="UpdateRepetition_PWM"/>
	   <MethodArg Name="RepetitionValue"  		ParameterName="RepetitionValue_PWM"/>


     </CallLibMethod>
      </IFCondition>

<IFCondition Expression = "!(TriggerPolarity_PWM=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel" ParameterName="NodeLevel_PWM"/>
    <MethodArg Name="TriggerMode" ParameterName="TriggerMode_PWM"/>
    <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_PWM"/>
     <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_PWM"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_PWM"/>
    </CallLibMethod>
     </IFCondition>


  </RefConfig>

  <RefConfig Name="LPTIM_IC">
     <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_LPTIM_IC_SetFullQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_IC"/>

       <MethodArg Name="Channel" ParameterName="MYCHANNEL_IC"/>
       <MethodArg Name="Size"    ParameterName="Size_IC"/>
	   <MethodArg Name="pData"   ParameterName="BufferAddress_IC"/>


     </CallLibMethod>
      </IFCondition>

      <IFCondition Expression = "S_SECURE &amp; !( (UpdateSrcInc_IC=DISABLE) &amp; (UpdateDestInc_IC=DISABLE) &amp; (UpdateSrcDataWidth_IC=DISABLE) &amp; (UpdateDestDataWidth_IC=DISABLE)  &amp; (UpdateTransferEventMode_IC=DISABLE) &amp;  (UpdateSrcSecure_IC=DISABLE) &amp; (UpdateDestSecure_IC=DISABLE) )">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_IC"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_IC"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_IC"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_IC"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_IC"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_IC"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_IC"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_IC"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_IC"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_IC"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_IC"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_IC"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_IC"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_IC"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_IC"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_IC"/>
    </CallLibMethod>
    </IFCondition>
    <IFCondition Expression = "!S_SECURE &amp; !( (UpdateSrcInc_IC=DISABLE) &amp; (UpdateDestInc_IC=DISABLE) &amp; (UpdateSrcDataWidth_IC=DISABLE) &amp; (UpdateDestDataWidth_IC=DISABLE)  &amp; (UpdateTransferEventMode_IC=DISABLE))">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_IC"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_IC"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_IC"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_IC"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_IC"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_IC"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_IC"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_IC"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_IC"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_IC"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_IC"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_IC"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_IC"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_IC"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_IC"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_IC"/>
    </CallLibMethod>
    </IFCondition>

  </RefConfig>

 <RefConfig Name="LPTIM_UE">
   <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_LPTIM_UE_SetFullQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_UE"/>

       <MethodArg Name="Period"     ParameterName="Period_UE"/>
	   <MethodArg Name="Repetition" ParameterName="Repetition_UE"/>
     </CallLibMethod>
      </IFCondition>

     <IFCondition Expression = "!(TriggerPolarity_UE=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel" ParameterName="NodeLevel_UE"/>
    <MethodArg Name="TriggerMode" ParameterName="TriggerMode_UE"/>
    <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_UE"/>
     <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_UE"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_UE"/>
    </CallLibMethod>
     </IFCondition>

  </RefConfig>
  
  
  <RefConfig Name="LPTIM_START">
     <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_LPTIM_Start_SetFullQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_START"/>

      <!-- <MethodArg Name="Channel" 	ParameterName="MYCHANNEL_START"/>-->
       <MethodArg Name="StartMode" 	ParameterName="StartMode_START"/>
	   <MethodArg Name="WakeupIT" 	ParameterName="WakeupIT_START"/>
     </CallLibMethod>
      </IFCondition>

     <IFCondition Expression = "!(TriggerPolarity_START=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel" ParameterName="NodeLevel_START"/>
    <MethodArg Name="TriggerMode" ParameterName="TriggerMode_START"/>
    <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_START"/>
     <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_START"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_START"/>
    </CallLibMethod>
     </IFCondition>

  </RefConfig>

   <RefConfig Name="LPTIM_STOP">
     <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_LPTIM_Stop_SetFullQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_STOP"/>


       <MethodArg Name="Mode" ParameterName="Mode_STOP"/>

     </CallLibMethod>
      </IFCondition>

     <IFCondition Expression = "!(TriggerPolarity_STOP=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel" ParameterName="NodeLevel_STOP"/>
    <MethodArg Name="TriggerMode" ParameterName="TriggerMode_STOP"/>
    <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_STOP"/>
     <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_STOP"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_STOP"/>
    </CallLibMethod>
     </IFCondition>

  </RefConfig>
  
  <RefConfig Name="LPTIM_GETCOUNTER">
      <IFCondition Expression = "1=1">
          <CallLibMethod Name="ADV_LPBAM_LPTIM_GetCounter_SetFullQ">
              <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
              <MethodArg Name="pInstance" FValue="LPDMA1"/> 
              <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
              <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
              <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_GETCOUNTER"/>
              <MethodArg Name="Size"    ParameterName="Size_IC"/>
              <MethodArg Name="pData"   ParameterName="BufferAddress_IC"/>
          </CallLibMethod>
      </IFCondition>
      
            <IFCondition Expression = "S_SECURE &amp; !( (UpdateSrcInc_IC=DISABLE) &amp; (UpdateDestInc_IC=DISABLE) &amp; (UpdateSrcDataWidth_IC=DISABLE) &amp; (UpdateDestDataWidth_IC=DISABLE)  &amp; (UpdateTransferEventMode_IC=DISABLE) &amp;  (UpdateSrcSecure_IC=DISABLE) &amp; (UpdateDestSecure_IC=DISABLE) )">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_IC"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_IC"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_IC"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_IC"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_IC"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_IC"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_IC"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_IC"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_IC"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_IC"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_IC"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_IC"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_IC"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_IC"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_IC"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_IC"/>
    </CallLibMethod>
    </IFCondition>
    <IFCondition Expression = "!S_SECURE &amp; !( (UpdateSrcInc_IC=DISABLE) &amp; (UpdateDestInc_IC=DISABLE) &amp; (UpdateSrcDataWidth_IC=DISABLE) &amp; (UpdateDestDataWidth_IC=DISABLE)  &amp; (UpdateTransferEventMode_IC=DISABLE))">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_IC"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_IC"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_IC"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_IC"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_IC"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_IC"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_IC"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_IC"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_IC"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_IC"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_IC"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_IC"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_IC"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_IC"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_IC"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_IC"/>
    </CallLibMethod>
    </IFCondition>
      
          
    <IFCondition Expression = "!(TriggerPolarity_GETCOUNTER_CONFIG=LPBAM_DMA_TRIG_POLARITY_MASKED)">
        <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig" >
            <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_GETCOUNTER_CONFIG"/>
            <MethodArg Name="NodeLevel" ParameterName="NodeLevel_GETCOUNTER_CONFIG"/>
            <MethodArg Name="TriggerMode" ParameterName="TriggerMode_GETCOUNTER_CONFIG"/>
   
            <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_GETCOUNTER_CONFIG"/>
            <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_GETCOUNTER"/>
        </CallLibMethod>
    </IFCondition>
  </RefConfig>
 

<!--
 LPBAM_Status_t ADV_LPBAM_LPTIM_PWM_SetFullQ(LPTIM_TypeDef                *const pInstance,
                                            uint32_t                     Channel,
                                            LPBAM_DMAListInfo_t          const *const pDMAListInfo,
                                            LPBAM_LPTIM_PWMFullAdvConf_t const *const pPWMFull,
                                            LPBAM_LPTIM_PWMFullDesc_t    *const pDescriptor,
                                            DMA_QListTypeDef             *const pQueue);
-->
<LibMethod Comment="" Name="ADV_LPBAM_LPTIM_PWM_SetFullQ">
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

    <Argument AddressOf="false" GenericType="simple" Name="Channel"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>    
	
<!-- IP owner addition -->
    <Argument AddressOf="true" GenericType="struct" Name="pPWMFull" TypeName="LPBAM_LPTIM_PWMFullAdvConf_t">
       <Argument AddressOf="false" GenericType="simple" Name="UpdatePeriod"/>
	   <Argument AddressOf="false" GenericType="simple" Name="PeriodValue"/> 
	   <Argument AddressOf="false" GenericType="simple" Name="UpdatePulse"/> 
	   <Argument AddressOf="false" GenericType="simple" Name="PulseValue"/> 
	   <Argument AddressOf="false" GenericType="simple" Name="UpdateRepetition"/> 
	   <Argument AddressOf="false" GenericType="simple" Name="RepetitionValue"/> 	    
    </Argument> 
<!-- end of IP owner addition -->

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_LPTIM_PWMFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>

<!--

LPBAM_Status_t ADV_LPBAM_LPTIM_IC_SetFullQ(LPTIM_TypeDef               *const pInstance,
                                           uint32_t                    Channel,
                                           LPBAM_DMAListInfo_t         const *const pDMAListInfo,
                                           LPBAM_LPTIM_ICFullAdvConf_t const *const pICFull,
                                           LPBAM_LPTIM_ICFullDesc_t    *const pDescriptor,
                                           DMA_QListTypeDef            *const pQueue);
-->


<LibMethod Comment="" Name="ADV_LPBAM_LPTIM_IC_SetFullQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

    <Argument AddressOf="false" GenericType="simple" Name="Channel"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>   
    
<!-- IP owner addition -->
    <Argument AddressOf="true" GenericType="struct" Name="pICFull" TypeName="LPBAM_LPTIM_ICFullAdvConf_t">
	   <Argument AddressOf="false" GenericType="simple" Name="pData"/> 
       <Argument AddressOf="false" GenericType="simple" Name="Size"/>    
    </Argument> 
<!-- end of IP owner addition --> 

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_LPTIM_ICFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>

<!--
LPBAM_Status_t ADV_LPBAM_LPTIM_UE_SetFullQ(LPTIM_TypeDef              *const pInstance,
                                           uint32_t                    Channel,
                                           LPBAM_DMAListInfo_t         const *const pDMAListInfo,
                                           LPBAM_LPTIM_UEFullAdvConf_t const *const pUEFull,
                                           LPBAM_LPTIM_UEFullDesc_t    *const pDescriptor,
                                           DMA_QListTypeDef            *const pQueue);
-->

<LibMethod Comment="" Name="ADV_LPBAM_LPTIM_UE_SetFullQ">
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

  <!--  <Argument AddressOf="false" GenericType="simple" Name="Channel"/>-->

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument> 
	
<!-- IP owner addition -->
    <Argument AddressOf="true" GenericType="struct" Name="pUEFull" TypeName="LPBAM_LPTIM_UEFullAdvConf_t">
       <Argument AddressOf="false" GenericType="simple" Name="Period"/>
	   <Argument AddressOf="false" GenericType="simple" Name="Repetition"/> 
    </Argument> 
<!-- end of IP owner addition -->

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_LPTIM_UEFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>


<!--
LPBAM_Status_t ADV_LPBAM_LPTIM_Start_SetFullQ(LPTIM_TypeDef                  *const pInstance,
                                              uint32_t                       Channel,
                                              LPBAM_DMAListInfo_t            const *const pDMAListInfo,
                                              LPBAM_LPTIM_StartFullAdvConf_t const *const pStartFull,
                                              LPBAM_LPTIM_StartFullDesc_t    *const pDescriptor,
                                              DMA_QListTypeDef               *const pQueue);
-->
<LibMethod Comment="" Name="ADV_LPBAM_LPTIM_Start_SetFullQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

   <!-- <Argument AddressOf="false" GenericType="simple" Name="Channel"/>-->

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>
<!-- IP owner addition -->
    <Argument AddressOf="true" GenericType="struct" Name="pStartFull" TypeName="LPBAM_LPTIM_StartFullAdvConf_t">
       <Argument AddressOf="false" GenericType="simple" Name="StartMode"/> 
	   <Argument AddressOf="false" GenericType="simple" Name="WakeupIT"/> 
    </Argument> 
<!-- end of IP owner addition -->       


    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_LPTIM_StartFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>



<!--
LPBAM_Status_t ADV_LPBAM_LPTIM_Stop_SetFullQ(LPTIM_TypeDef                 *const pInstance,
                                             LPBAM_LPTIM_StopFullAdvConf_t const *const pStopFull,
                                             LPBAM_DMAListInfo_t           const *const pDMAListInfo,
                                             LPBAM_LPTIM_StopFullDesc_t    *const pDescriptor,
                                             DMA_QListTypeDef              *const pQueue);
-->
<LibMethod Comment="" Name="ADV_LPBAM_LPTIM_Stop_SetFullQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>
	
<!-- IP owner addition --><!-- end of IP owner addition -->
    <Argument AddressOf="true" GenericType="struct" Name="pStopFull" TypeName="LPBAM_LPTIM_StopFullAdvConf_t">
       <Argument AddressOf="false" GenericType="simple" Name="Mode"/> 
    </Argument> 
<!-- end of IP owner addition -->

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_LPTIM_StopFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>




<!--LPBAM_Status_t ADV_LPBAM_Q_SetDataConfig(LPBAM_COMMON_DataAdvConf_t const *const pDataConfig,
                                         uint32_t                   DataNode,
                                         void                       const *const pDescriptor);

-->

  <LibMethod Comment="" Name="ADV_LPBAM_Q_SetDataConfig">
    <Argument AddressOf="true" GenericType="struct" Name="pDataConfig" TypeName="LPBAM_COMMON_DataAdvConf_t">
      <Argument AddressOf="true" GenericType="struct" Name="TransferConfig" TypeName="LPBAM_DMA_NodeConfTypeDef">
        <Argument AddressOf="true" GenericType="struct" Name="Transfer" TypeName="LPBAM_DMA_InitTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="SrcInc"/>
            <Argument AddressOf="false" GenericType="simple" Name="DestInc"/>
            <Argument AddressOf="false" GenericType="simple" Name="SrcDataWidth"/>
            <Argument AddressOf="false" GenericType="simple" Name="DestDataWidth"/>
            <Argument AddressOf="false" GenericType="simple" Name="TransferEventMode"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="SrcSecure"/>  
        <Argument AddressOf="false" GenericType="simple" Name="DestSecure"/> 
      </Argument> 
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcInc"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestInc"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcDataWidth"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestDataWidth"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateTransferEventMode"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcSecure"/>  
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestSecure"/>
    </Argument>   

    <Argument AddressOf="false" GenericType="simple" Name="DataNode"/>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="DONTCARE" Optional="output">
      <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>   
 </LibMethod>







<!--LPBAM_Status_t ADV_LPBAM_Q_SetTriggerConfig(LPBAM_COMMON_TrigAdvConf_t const *const pTrigConfig,
                                            uint32_t                   NodeLevel,
                                            void                       const *const pDescriptor);
-->
   <LibMethod Comment="" Name="ADV_LPBAM_Q_SetTriggerConfig">
     <Argument AddressOf="true" GenericType="struct" Name="pTrigConfig" TypeName="LPBAM_COMMON_TrigAdvConf_t">
      <Argument AddressOf="true" GenericType="struct" Name="TriggerConfig" TypeName="LPBAM_DMA_TriggerConfTypeDef">
         <Argument AddressOf="false" GenericType="simple" Name="TriggerMode"/>  
         <Argument AddressOf="false" GenericType="simple" Name="TriggerPolarity"/> 
         <Argument AddressOf="false" GenericType="simple" Name="TriggerSelection"/> 
      </Argument>  
    </Argument>   

    <Argument AddressOf="false" GenericType="simple" Name="NodeLevel"/>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="DONTCARE" Optional="output">
      <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>   
  </LibMethod>
  
  
  
  
<!--  LPBAM_Status_t ADV_LPBAM_LPTIM_GetCounter_SetFullQ(LPTIM_TypeDef                       *const pInstance,
                                                   LPBAM_DMAListInfo_t                 const *const pDMAListInfo,
                                                   LPBAM_LPTIM_GetCounterFullAdvConf_t const *const pGetCounterFull,
                                                   LPBAM_LPTIM_GetCounterFullDesc_t    *const pDescriptor,
                                                   DMA_QListTypeDef                    *const pQueue)
{-->
   <LibMethod Comment="" Name="ADV_LPBAM_LPTIM_GetCounter_SetFullQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>
    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
    </Argument>       
    
    <Argument AddressOf="true" GenericType="struct" Name="pGetCounterFull" TypeName="LPBAM_LPTIM_GetCounterFullAdvConf_t">
        <Argument AddressOf="false" GenericType="simple" Name="pData"/> 
        <Argument AddressOf="false" GenericType="simple" Name="Size"/> 

    </Argument> 
 
    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_LPTIM_GetCounterFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    <Argument Comment="" AddressOf="true" GenericType="simple" Name="pQueue" TypeName="DMA_QListTypeDef"  Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
   </LibMethod>


  <RefComponent Cclass="HAL" Cgroup="LPBAM" Cversion="1.0">
    <File Category="header" Name="Utilities/lpbam/STM32U5/stm32_platform_lpbam_lptim.h"/>
    <File Category="header" Name="Utilities/lpbam/stm32_adv_lpbam_lptim.h"/>
    <File Category="header" Name="Utilities/lpbam/stm32_adv_lpbam_common.h"/>
    <File Category="source" Name="Utilities/lpbam/stm32_adv_lpbam_lptim.c"/>
    <File Category="source" Name="Utilities/lpbam/stm32_adv_lpbam_common.c"/>
    <File Category="header" Name="Utilities/lpbam/stm32_lpbam_lptim.h"/>
    <File Category="source" Name="Utilities/lpbam/stm32_lpbam_lptim.c"/>  
  </RefComponent>

</IP>

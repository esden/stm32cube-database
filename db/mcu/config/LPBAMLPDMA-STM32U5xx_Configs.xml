<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP DBVersion="V4.0" Name="" Version="STM32Cube_FW_U5_V1.0" IncludeFile="" xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://mcd.rou.st.com/modules.php?name=mcu" ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">


 <RefConfig Name="LPDMA_START">
   <IFCondition Expression = "1=1">
        <CallLibMethod Name="ADV_LPBAM_DMA_Start_SetFullQ">
            <MethodArg Name="InstanceIP"/>  
            <MethodArg Name="pInstance" FValue="LPDMA1"/> 
            <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
            <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
            <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_START"/>
            <MethodArg Name="HeadQAddress" ParameterName="HeadQAddressArg"/>
        </CallLibMethod>
    </IFCondition>

    <IFCondition Expression = "!(TriggerPolarity_START=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel" ParameterName="NodeLevel_START"/>
    <MethodArg Name="TriggerMode" ParameterName="TriggerMode_START"/>
    <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_START"/>
     <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_START"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_START"/>
    </CallLibMethod>
     </IFCondition>

  </RefConfig>
   <RefConfig Name="LPDMA_STOP">
   <IFCondition Expression = "1=1">
        <CallLibMethod Name="ADV_LPBAM_DMA_Stop_SetFullQ">
            <MethodArg Name="InstanceIP" ParameterName="InstanceIPStop"/>  
            <MethodArg Name="pInstance" FValue="LPDMA1"/> 
            <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
            <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
            <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_STOP"/>
            <MethodArg Name="HeadQAddress" ParameterName="HeadQAddressArg"/>
        </CallLibMethod>
    </IFCondition>

    <IFCondition Expression = "!(TriggerPolarity_STOP=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel" ParameterName="NodeLevel_STOP"/>
    <MethodArg Name="TriggerMode" ParameterName="TriggerMode_STOP"/>
    <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_STOP"/>
     <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_STOP"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_STOP"/>
    </CallLibMethod>
     </IFCondition>

  </RefConfig>

 

 <!--LPBAM_Status_t ADV_LPBAM_DMA_Start_SetFullQ(DMA_Channel_TypeDef          *const pInstance,
                                            LPBAM_DMAListInfo_t          const *const pDMAListInfo,
                                            LPBAM_DMA_StartFullAdvConf_t const *const pStartFull,
                                            LPBAM_DMA_StartFullDesc_t    *const pDescriptor,
                                            DMA_QListTypeDef             *const pQueue);
-->

<LibMethod Comment="" Name="ADV_LPBAM_DMA_Start_SetFullQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>       

    <Argument AddressOf="true" GenericType="struct" Name="pStartFull" TypeName="LPBAM_DMA_StartFullAdvConf_t">
       <Argument AddressOf="false" GenericType="simple" Name="WakeupIT"/> 
       <Argument AddressOf="false" GenericType="simple" Name="HeadQAddress"/> 
       
       
    </Argument> 

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_DMA_StartFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>
<!-- LPBAM_Status_t ADV_LPBAM_DMA_Stop_SetFullQ(DMA_Channel_TypeDef      *const pInstance,
                                           LPBAM_DMAListInfo_t      const *const pDMAListInfo,
                                           LPBAM_DMA_StopFullDesc_t *const pDescriptor,
                                           DMA_QListTypeDef         *const pQueue)
{ -->

<LibMethod Comment="" Name="ADV_LPBAM_DMA_Stop_SetFullQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>       

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_DMA_StopFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>




<!--LPBAM_Status_t ADV_LPBAM_Q_SetDataConfig(LPBAM_COMMON_DataAdvConf_t const *const pDataConfig,
                                         uint32_t                   DataNode,
                                         void                       const *const pDescriptor);

-->

  <LibMethod Comment="" Name="ADV_LPBAM_Q_SetDataConfig">
    <Argument AddressOf="true" GenericType="struct" Name="pDataConfig" TypeName="LPBAM_COMMON_DataAdvConf_t">
      <Argument AddressOf="true" GenericType="struct" Name="TransferConfig" TypeName="LPBAM_DMA_NodeConfTypeDef">
        <Argument AddressOf="true" GenericType="struct" Name="Transfer" TypeName="LPBAM_DMA_InitTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="SrcInc"/>
            <Argument AddressOf="false" GenericType="simple" Name="DestInc"/>
            <Argument AddressOf="false" GenericType="simple" Name="SrcDataWidth"/>
            <Argument AddressOf="false" GenericType="simple" Name="DestDataWidth"/>
            <Argument AddressOf="false" GenericType="simple" Name="TransferEventMode"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="SrcSecure"/>  
        <Argument AddressOf="false" GenericType="simple" Name="DestSecure"/> 
      </Argument> 
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcInc"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestInc"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcDataWidth"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestDataWidth"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateTransferEventMode"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcSecure"/>  
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestSecure"/>
    </Argument>   

    <Argument AddressOf="false" GenericType="simple" Name="DataNode"/>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="DONTCARE" Optional="output">
      <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>   
 </LibMethod>







<!--LPBAM_Status_t ADV_LPBAM_Q_SetTriggerConfig(LPBAM_COMMON_TrigAdvConf_t const *const pTrigConfig,
                                            uint32_t                   NodeLevel,
                                            void                       const *const pDescriptor);
-->
   <LibMethod Comment="" Name="ADV_LPBAM_Q_SetTriggerConfig">
     <Argument AddressOf="true" GenericType="struct" Name="pTrigConfig" TypeName="LPBAM_COMMON_TrigAdvConf_t">
      <Argument AddressOf="true" GenericType="struct" Name="TriggerConfig" TypeName="LPBAM_DMA_TriggerConfTypeDef">
         <Argument AddressOf="false" GenericType="simple" Name="TriggerMode"/>  
         <Argument AddressOf="false" GenericType="simple" Name="TriggerPolarity"/> 
         <Argument AddressOf="false" GenericType="simple" Name="TriggerSelection"/> 
      </Argument>  
    </Argument>   

    <Argument AddressOf="false" GenericType="simple" Name="NodeLevel"/>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="DONTCARE" Optional="output">
      <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>   
  </LibMethod>



  <RefComponent Cclass="HAL" Cgroup="LPBAM" Cversion="1.0">
    <File Category="header" Name="Utilities/lpbam/STM32U5/stm32_platform_lpbam_dma.h"/>
    <File Category="header" Name="Utilities/lpbam/stm32_adv_lpbam_dma.h"/>
    <File Category="header" Name="Utilities/lpbam/stm32_adv_lpbam_common.h"/>
    <File Category="source" Name="Utilities/lpbam/stm32_adv_lpbam_dma.c"/>
    <File Category="source" Name="Utilities/lpbam/stm32_adv_lpbam_common.c"/>
    <File Category="header" Name="Utilities/lpbam/stm32_lpbam_dma.h"/>
    <File Category="source" Name="Utilities/lpbam/stm32_lpbam_dma.c"/>  
  </RefComponent>

</IP>

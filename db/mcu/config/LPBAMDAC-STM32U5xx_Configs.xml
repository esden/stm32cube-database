<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP DBVersion="V4.0" Name="" Version="STM32Cube_FW_U5_V1.0" IncludeFile="" xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://mcd.rou.st.com/modules.php?name=mcu" ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">


 <RefConfig Name="DAC_CONVERSION_CONFIG">
   <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_DAC_Conversion_SetConfigQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_CONVERSION_CONFIG"/>

       <MethodArg Name="Channel" ParameterName="MYCHANNELCONVERSION_CONFIG"/>
      <MethodArg Name="DAC_Trigger" ParameterName="DAC_Trigger_CONVERSION_CONFIG"/>

       

     </CallLibMethod>
     </IFCondition>

      <IFCondition Expression = "!(TriggerPolarity_CONVERSION_CONFIG=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel" ParameterName="NodeLevel_CONVERSION_CONFIG"/>
    <MethodArg Name="TriggerMode" ParameterName="TriggerMode_CONVERSION_CONFIG"/>
    <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_CONVERSION_CONFIG"/>
     <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_CONVERSION_CONFIG"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_CONVERSION_CONFIG"/>
    </CallLibMethod>
    </IFCondition>
  </RefConfig>

  <RefConfig Name="DAC_CONVERSION_DATA">
     <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_DAC_Conversion_SetDataQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_CONVERSION_DATA"/>

       <MethodArg Name="Channel" ParameterName="MYCHANNELCONVERSION_DATA"/>
       <MethodArg Name="Alignment" ParameterName="Alignment_CONVERSION_DATA"/>
       <MethodArg Name="Size" ParameterName="Size_CONVERSION_DATA"/>
       <MethodArg Name="pData" ParameterName="BufferAddress_CONVERSION_DATA"/>
 
     </CallLibMethod>
      </IFCondition>

      <IFCondition Expression = "!(TriggerPolarity_CONVERSION_DATA=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel" ParameterName="NodeLevel_CONVERSION_DATA"/>
    <MethodArg Name="TriggerMode" ParameterName="TriggerMode_CONVERSION_DATA"/>
    <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_CONVERSION_DATA"/>
     <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_CONVERSION_DATA"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_CONVERSION_DATA"/>
    </CallLibMethod>
    </IFCondition>
<IFCondition Expression = "S_SECURE &amp; !( (UpdateSrcInc_CONVERSION_DATA=DISABLE) &amp; (UpdateDestInc_CONVERSION_DATA=DISABLE) &amp; (UpdateSrcDataWidth_CONVERSION_DATA=DISABLE) &amp; (UpdateDestDataWidth_CONVERSION_DATA=DISABLE)  &amp; (UpdateTransferEventMode_CONVERSION_DATA=DISABLE) &amp;  (UpdateSrcSecure_CONVERSION_DATA=DISABLE) &amp; (UpdateDestSecure_CONVERSION_DATA=DISABLE) )">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_CONVERSION_DATA"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_CONVERSION_DATA"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_CONVERSION_DATA"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_CONVERSION_DATA"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_CONVERSION_DATA"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_CONVERSION_DATA"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_CONVERSION_DATA"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_CONVERSION_DATA"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_CONVERSION_DATA"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_CONVERSION_DATA"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_CONVERSION_DATA"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_CONVERSION_DATA"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_CONVERSION_DATA"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_CONVERSION_DATA"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_CONVERSION_DATA"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_CONVERSION_DATA"/>
    </CallLibMethod>
    </IFCondition>
    <IFCondition Expression = "!S_SECURE &amp; !( (UpdateSrcInc_CONVERSION_DATA=DISABLE) &amp; (UpdateDestInc_CONVERSION_DATA=DISABLE) &amp; (UpdateSrcDataWidth_CONVERSION_DATA=DISABLE) &amp; (UpdateDestDataWidth_CONVERSION_DATA=DISABLE)  &amp; (UpdateTransferEventMode_CONVERSION_DATA=DISABLE))">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_CONVERSION_DATA"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_CONVERSION_DATA"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_CONVERSION_DATA"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_CONVERSION_DATA"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_CONVERSION_DATA"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_CONVERSION_DATA"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_CONVERSION_DATA"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_CONVERSION_DATA"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_CONVERSION_DATA"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_CONVERSION_DATA"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_CONVERSION_DATA"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_CONVERSION_DATA"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_CONVERSION_DATA"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_CONVERSION_DATA"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_CONVERSION_DATA"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_CONVERSION_DATA"/>
    </CallLibMethod>
    </IFCondition>

  </RefConfig>

   <RefConfig Name="DAC_CONVERSION">
     <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_DAC_Conversion_SetFullQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_CONVERSION"/>

       <MethodArg Name="MYPARAMCONVERSION"/>
       <MethodArg Name="Channel" ParameterName="MYCHANNELCONVERSION"/>
       <MethodArg Name="DAC_Trigger" ParameterName="DAC_Trigger_CONVERSION"/>
        <MethodArg Name="Alignment" ParameterName="Alignment_CONVERSION"/>
       <MethodArg Name="Size" ParameterName="Size_CONVERSION"/>
       <MethodArg Name="pData" ParameterName="BufferAddress_CONVERSION"/>

     </CallLibMethod>
 </IFCondition>
    

      <IFCondition Expression = "!(TriggerPolarity_CONVERSION=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel" ParameterName="NodeLevel_CONVERSION"/>
    <MethodArg Name="TriggerMode" ParameterName="TriggerMode_CONVERSION"/>
    <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_CONVERSION"/>
     <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_CONVERSION"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_CONVERSION"/>
    </CallLibMethod>
    </IFCondition>


     <IFCondition Expression = "S_SECURE &amp; !( (UpdateSrcInc_CONVERSION=DISABLE) &amp; (UpdateDestInc_CONVERSION=DISABLE) &amp; (UpdateSrcDataWidth_CONVERSION=DISABLE) &amp; (UpdateDestDataWidth_CONVERSION=DISABLE)  &amp; (UpdateTransferEventMode_CONVERSION=DISABLE) &amp;  (UpdateSrcSecure_CONVERSION=DISABLE) &amp; (UpdateDestSecure_CONVERSION=DISABLE) )">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_CONVERSION"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_CONVERSION"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_CONVERSION"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_CONVERSION"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_CONVERSION"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_CONVERSION"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_CONVERSION"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_CONVERSION"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_CONVERSION"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_CONVERSION"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_CONVERSION"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_CONVERSION"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_CONVERSION"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_CONVERSION"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_CONVERSION"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_CONVERSION"/>
    </CallLibMethod>
    </IFCondition>
    <IFCondition Expression = "!S_SECURE &amp; !( (UpdateSrcInc_CONVERSION=DISABLE) &amp; (UpdateDestInc_CONVERSION=DISABLE) &amp; (UpdateSrcDataWidth_CONVERSION=DISABLE) &amp; (UpdateDestDataWidth_CONVERSION=DISABLE)  &amp; (UpdateTransferEventMode_CONVERSION=DISABLE))">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_CONVERSION"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_CONVERSION"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_CONVERSION"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_CONVERSION"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_CONVERSION"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_CONVERSION"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_CONVERSION"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_CONVERSION"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_CONVERSION"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_CONVERSION"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_CONVERSION"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_CONVERSION"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_CONVERSION"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_CONVERSION"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_CONVERSION"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_CONVERSION"/>
    </CallLibMethod>
    </IFCondition>
  </RefConfig>




<RefConfig Name="DAC_STOP">
   <IFCondition Expression = "1=1">
     <CallLibMethod Name="ADV_LPBAM_DAC_Stop_SetFullQ">
        <MethodArg Name="InstanceIP" ParameterName="InstanceHAL" />
        <MethodArg Name="pInstance" FValue="LPDMA1" />
        <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q" />
        <MethodArg Name="pQueue" ParameterName="QUEUE_NAME" />
        <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_STOP" />
      </CallLibMethod>
    </IFCondition>
    <IFCondition Expression="!(TriggerPolarity_STOP=LPBAM_DMA_TRIG_POLARITY_MASKED)">
        <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
            <MethodArg Name="NodeLevel" ParameterName="NodeLevel_STOP" />
            <MethodArg Name="TriggerMode" ParameterName="TriggerMode_STOP" />
            <MethodArg Name="TriggerPolarity" ParameterName="TriggerPolarity_STOP" />
            <MethodArg Name="TriggerSelection" ParameterName="TriggerSelection_STOP" />
            <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_STOP" />
        </CallLibMethod>
    </IFCondition>
   </RefConfig>
  





<!--LPBAM_Status_t ADV_LPBAM_DAC_Conversion_SetConfigQ(DAC_TypeDef                *const pInstance,
                                                   uint32_t                   Channel,
                                                   LPBAM_DMAListInfo_t        const *const pDMAListInfo,
                                                   LPBAM_DAC_ConfigAdvConf_t  const *const pConfig,
                                                   LPBAM_DAC_ConvConfigDesc_t *const pDescriptor,
                                                   DMA_QListTypeDef           *const pQueue);
-->

<LibMethod Comment="" Name="ADV_LPBAM_DAC_Conversion_SetConfigQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

     <Argument AddressOf="false" GenericType="simple" Name="Channel"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>       

    <Argument AddressOf="true" GenericType="struct" Name="pConfig" TypeName="LPBAM_DAC_ConfigAdvConf_t">
       <Argument AddressOf="false" GenericType="simple" Name="DAC_Trigger"/> 
       
    </Argument> 

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_DAC_ConvConfigDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>

  
<!--LPBAM_Status_t ADV_LPBAM_DAC_Conversion_SetDataQ(DAC_TypeDef              *const pInstance,
                                                 uint32_t                 Channel,
                                                 LPBAM_DMAListInfo_t      const *const pDMAListInfo,
                                                 LPBAM_DAC_DataAdvConf_t  const *const pData,
                                                 LPBAM_DAC_ConvDataDesc_t *const pDescriptor,
                                                 DMA_QListTypeDef         *const pQueue);

    -->

<LibMethod Comment="" Name="ADV_LPBAM_DAC_Conversion_SetDataQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

     <Argument AddressOf="false" GenericType="simple" Name="Channel"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>       

    <Argument AddressOf="true" GenericType="struct" Name="pSetData" TypeName="LPBAM_DAC_DataAdvConf_t">
       <Argument AddressOf="false" GenericType="simple" Name="Alignment"/> 
       <Argument AddressOf="false" GenericType="simple" Name="Size"/> 
       <Argument AddressOf="false" GenericType="simple" Name="pData"/> 
     </Argument> 

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_DAC_ConvDataDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>




<!--LPBAM_Status_t ADV_LPBAM_DAC_Conversion_SetFullQ(DAC_TypeDef              *const pInstance,
                                                 uint32_t                 Channel,
                                                 LPBAM_DMAListInfo_t      const *const pDMAListInfo,
                                                 LPBAM_DAC_FullAdvConf_t  const *const pFull,
                                                 LPBAM_DAC_ConvFullDesc_t *const pDescriptor,
                                                 DMA_QListTypeDef         *const pQueue);
-->


<LibMethod Comment="" Name="ADV_LPBAM_DAC_Conversion_SetFullQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

     <Argument AddressOf="false" GenericType="simple" Name="Channel"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>       

    <Argument AddressOf="true" GenericType="struct" Name="pFull" TypeName="LPBAM_DAC_FullAdvConf_t">
       <Argument AddressOf="false" GenericType="simple" Name="DAC_Trigger"/> 
       <Argument AddressOf="false" GenericType="simple" Name="Alignment"/> 
       <Argument AddressOf="false" GenericType="simple" Name="Size"/> 
       <Argument AddressOf="false" GenericType="simple" Name="pData"/> 
       
    </Argument> 

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_DAC_ConvFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>








<!--LPBAM_Status_t ADV_LPBAM_Q_SetDataConfig(LPBAM_COMMON_DataAdvConf_t const *const pDataConfig,
                                         uint32_t                   DataNode,
                                         void                       const *const pDescriptor);

-->

  <LibMethod Comment="" Name="ADV_LPBAM_Q_SetDataConfig">
    <Argument AddressOf="true" GenericType="struct" Name="pDataConfig" TypeName="LPBAM_COMMON_DataAdvConf_t">
      <Argument AddressOf="true" GenericType="struct" Name="TransferConfig" TypeName="LPBAM_DMA_NodeConfTypeDef">
        <Argument AddressOf="true" GenericType="struct" Name="Transfer" TypeName="LPBAM_DMA_InitTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="SrcInc"/>
            <Argument AddressOf="false" GenericType="simple" Name="DestInc"/>
            <Argument AddressOf="false" GenericType="simple" Name="SrcDataWidth"/>
            <Argument AddressOf="false" GenericType="simple" Name="DestDataWidth"/>
            <Argument AddressOf="false" GenericType="simple" Name="TransferEventMode"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="SrcSecure"/>  
        <Argument AddressOf="false" GenericType="simple" Name="DestSecure"/> 
      </Argument> 
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcInc"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestInc"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcDataWidth"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestDataWidth"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateTransferEventMode"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcSecure"/>  
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestSecure"/>
    </Argument>   

    <Argument AddressOf="false" GenericType="simple" Name="DataNode"/>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="DONTCARE" Optional="output">
      <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>   
 </LibMethod>







<!--LPBAM_Status_t ADV_LPBAM_Q_SetTriggerConfig(LPBAM_COMMON_TrigAdvConf_t const *const pTrigConfig,
                                            uint32_t                   NodeLevel,
                                            void                       const *const pDescriptor);
-->
   <LibMethod Comment="" Name="ADV_LPBAM_Q_SetTriggerConfig">
     <Argument AddressOf="true" GenericType="struct" Name="pTrigConfig" TypeName="LPBAM_COMMON_TrigAdvConf_t">
      <Argument AddressOf="true" GenericType="struct" Name="TriggerConfig" TypeName="LPBAM_DMA_TriggerConfTypeDef">
         <Argument AddressOf="false" GenericType="simple" Name="TriggerMode"/>  
         <Argument AddressOf="false" GenericType="simple" Name="TriggerPolarity"/> 
         <Argument AddressOf="false" GenericType="simple" Name="TriggerSelection"/> 
      </Argument>  
    </Argument>   

    <Argument AddressOf="false" GenericType="simple" Name="NodeLevel"/>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="DONTCARE" Optional="output">
      <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>   
  </LibMethod>

<!-- LPBAM_Status_t ADV_LPBAM_DAC_Stop_SetFullQ(DAC_TypeDef              *const pInstance,
                                           LPBAM_DMAListInfo_t      const *const pDMAListInfo,
                                           LPBAM_DAC_ConvStopDesc_t  *const pDescriptor,
                                           DMA_QListTypeDef         *const pQueue);-->

     <LibMethod Comment="" Name="ADV_LPBAM_DAC_Stop_SetFullQ">
        <Argument AddressOf="false" GenericType="simple" Name="InstanceIP" />
        <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
            <Argument AddressOf="false" GenericType="simple" Name="QueueType" />
            <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef" />
        </Argument>
        <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_DAC_StopConvDesc_t" Optional="output">
            <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct" />
        </Argument>
        <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
            <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct" />
        </Argument>
    </LibMethod>

  <RefComponent Cclass="HAL" Cgroup="LPBAM" Cversion="1.0">
    <File Category="header" Name="Utilities/lpbam/STM32U5/stm32_platform_lpbam_dac.h"/>
    <File Category="header" Name="Utilities/lpbam/stm32_adv_lpbam_dac.h"/>
    <File Category="header" Name="Utilities/lpbam/stm32_adv_lpbam_common.h"/>
    <File Category="source" Name="Utilities/lpbam/stm32_adv_lpbam_dac.c"/>
    <File Category="source" Name="Utilities/lpbam/stm32_adv_lpbam_common.c"/>
    <File Category="header" Name="Utilities/lpbam/stm32_lpbam_dac.h"/>
    <File Category="source" Name="Utilities/lpbam/stm32_lpbam_dac.c"/>  
  </RefComponent>
</IP>
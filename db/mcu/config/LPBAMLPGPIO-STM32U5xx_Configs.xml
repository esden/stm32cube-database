<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP DBVersion="V4.0" Name="" Version="STM32Cube_FW_U5_V1.0" IncludeFile="" xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://mcd.rou.st.com/modules.php?name=mcu" ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">


 <RefConfig Name="LPGPIO_WRITEPIN">
     <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_GPIO_WritePin_SetFullQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_WRITEPIN"/>
       <MethodArg Name="PinState" ParameterName="PinState_WRITEPIN"/>
       <MethodArg Name="Pin" ParameterName="Pin_WRITEPIN"/>


     </CallLibMethod>
     </IFCondition>

    <IFCondition Expression = "!(TriggerPolarity=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel"/>
    <MethodArg Name="TriggerMode"/>
    <MethodArg Name="TriggerPolarity"/>
     <MethodArg Name="TriggerSelection"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_WRITEPIN"/>
    </CallLibMethod>
     </IFCondition>

      <IFCondition Expression = "S_SECURE &amp; !( (UpdateSrcInc_WRITEPIN=DISABLE) &amp; (UpdateDestInc_WRITEPIN=DISABLE) &amp; (UpdateSrcDataWidth_WRITEPIN=DISABLE) &amp; (UpdateDestDataWidth_WRITEPIN=DISABLE)  &amp; (UpdateTransferEventMode_WRITEPIN=DISABLE) &amp;  (UpdateSrcSecure_WRITEPIN=DISABLE) &amp; (UpdateDestSecure_WRITEPIN=DISABLE) )">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_WRITEPIN"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_WRITEPIN"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_WRITEPIN"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_WRITEPIN"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_WRITEPIN"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_WRITEPIN"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_WRITEPIN"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_WRITEPIN"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_WRITEPIN"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_WRITEPIN"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_WRITEPIN"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_WRITEPIN"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_WRITEPIN"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_WRITEPIN"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_WRITEPIN"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_WRITEPIN"/>
    </CallLibMethod>
    </IFCondition>
    <IFCondition Expression = "!S_SECURE &amp; !( (UpdateSrcInc_WRITEPIN=DISABLE) &amp; (UpdateDestInc_WRITEPIN=DISABLE) &amp; (UpdateSrcDataWidth_WRITEPIN=DISABLE) &amp; (UpdateDestDataWidth_WRITEPIN=DISABLE)  &amp; (UpdateTransferEventMode_WRITEPIN=DISABLE))">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_WRITEPIN"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_WRITEPIN"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_WRITEPIN"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_WRITEPIN"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_WRITEPIN"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_WRITEPIN"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_WRITEPIN"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_WRITEPIN"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_WRITEPIN"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_WRITEPIN"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_WRITEPIN"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_WRITEPIN"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_WRITEPIN"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_WRITEPIN"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_WRITEPIN"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_WRITEPIN"/>
    </CallLibMethod>
    </IFCondition>

  </RefConfig>

  <RefConfig Name="LPGPIO_WRITEPINSEQUENCE">
     <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_GPIO_WritePinSequence_SetFullQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_WRITEPINSEQUENCE"/>
       <MethodArg Name="pData" ParameterName="BufferAddress_WRITEPINSEQUENCE"/>
      <MethodArg Name="Size" ParameterName="Size_WRITEPINSEQUENCE"/>
       <MethodArg Name="Pin" ParameterName="Pin_WRITEPINSEQUENCE"/>
     </CallLibMethod>
      </IFCondition>

    <IFCondition Expression = "!(TriggerPolarity=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel"/>
    <MethodArg Name="TriggerMode"/>
    <MethodArg Name="TriggerPolarity"/>
     <MethodArg Name="TriggerSelection"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_WRITEPINSEQUENCE"/>
    </CallLibMethod>
     </IFCondition>

     <IFCondition Expression = "S_SECURE &amp; !( (UpdateSrcInc_WRITEPINSEQUENCE=DISABLE) &amp; (UpdateDestInc_WRITEPINSEQUENCE=DISABLE) &amp; (UpdateSrcDataWidth_WRITEPINSEQUENCE=DISABLE) &amp; (UpdateDestDataWidth_WRITEPINSEQUENCE=DISABLE)  &amp; (UpdateTransferEventMode_WRITEPINSEQUENCE=DISABLE) &amp;  (UpdateSrcSecure_WRITEPINSEQUENCE=DISABLE) &amp; (UpdateDestSecure_WRITEPINSEQUENCE=DISABLE) )">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_WRITEPINSEQUENCE"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_WRITEPINSEQUENCE"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_WRITEPINSEQUENCE"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_WRITEPINSEQUENCE"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_WRITEPINSEQUENCE"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_WRITEPINSEQUENCE"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_WRITEPINSEQUENCE"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_WRITEPINSEQUENCE"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_WRITEPINSEQUENCE"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_WRITEPINSEQUENCE"/>
    </CallLibMethod>
    </IFCondition>
    <IFCondition Expression = "!S_SECURE &amp; !( (UpdateSrcInc_WRITEPINSEQUENCE=DISABLE) &amp; (UpdateDestInc_WRITEPINSEQUENCE=DISABLE) &amp; (UpdateSrcDataWidth_WRITEPINSEQUENCE=DISABLE) &amp; (UpdateDestDataWidth_WRITEPINSEQUENCE=DISABLE)  &amp; (UpdateTransferEventMode_WRITEPINSEQUENCE=DISABLE))">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_WRITEPINSEQUENCE"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_WRITEPINSEQUENCE"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_WRITEPINSEQUENCE"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_WRITEPINSEQUENCE"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_WRITEPINSEQUENCE"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_WRITEPINSEQUENCE"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_WRITEPINSEQUENCE"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_WRITEPINSEQUENCE"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_WRITEPINSEQUENCE"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_WRITEPINSEQUENCE"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_WRITEPINSEQUENCE"/>
    </CallLibMethod>
    </IFCondition>

  </RefConfig>

   <RefConfig Name="LPGPIO_READPINSEQUENCE">
     <IFCondition Expression = "1=1">
    <CallLibMethod Name="ADV_LPBAM_GPIO_ReadPinSequence_SetFullQ">
       <MethodArg Name="InstanceIP" ParameterName="InstanceHAL"/>  
       <MethodArg Name="pInstance" FValue="LPDMA1"/> 
       <MethodArg Name="QueueType" FValue="LPBAM_LINEAR_ADDRESSING_Q"/> 
       <MethodArg Name="pQueue" ParameterName="QUEUE_NAME"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_READPINSEQUENCE"/>
     <MethodArg Name="pData" ParameterName="BufferAddress_READPINSEQUENCE"/>
      <MethodArg Name="Size" ParameterName="Size_READPINSEQUENCE"/>
       <MethodArg Name="Pin" ParameterName="Pin_READPINSEQUENCE"/>
     </CallLibMethod>
       </IFCondition>

    <IFCondition Expression = "!(TriggerPolarity=LPBAM_DMA_TRIG_POLARITY_MASKED)">
    <CallLibMethod Name="ADV_LPBAM_Q_SetTriggerConfig">
    <MethodArg Name="NodeLevel"/>
    <MethodArg Name="TriggerMode"/>
    <MethodArg Name="TriggerPolarity"/>
     <MethodArg Name="TriggerSelection"/>
     <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_READPINSEQUENCE"/>
    </CallLibMethod>
     </IFCondition>


     <IFCondition Expression = "S_SECURE &amp; !( (UpdateSrcInc_READPINSEQUENCE=DISABLE) &amp; (UpdateDestInc_READPINSEQUENCE=DISABLE) &amp; (UpdateSrcDataWidth_READPINSEQUENCE=DISABLE) &amp; (UpdateDestDataWidth_READPINSEQUENCE=DISABLE)  &amp; (UpdateTransferEventMode_READPINSEQUENCE=DISABLE) &amp;  (UpdateSrcSecure_READPINSEQUENCE=DISABLE) &amp; (UpdateDestSecure_READPINSEQUENCE=DISABLE) )">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_READPINSEQUENCE"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_READPINSEQUENCE"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_READPINSEQUENCE"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_READPINSEQUENCE"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_READPINSEQUENCE"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_READPINSEQUENCE"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_READPINSEQUENCE"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_READPINSEQUENCE"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_READPINSEQUENCE"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_READPINSEQUENCE"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_READPINSEQUENCE"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_READPINSEQUENCE"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_READPINSEQUENCE"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_READPINSEQUENCE"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_READPINSEQUENCE"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_READPINSEQUENCE"/>
    </CallLibMethod>
    </IFCondition>
    <IFCondition Expression = "!S_SECURE &amp; !( (UpdateSrcInc_READPINSEQUENCE=DISABLE) &amp; (UpdateDestInc_READPINSEQUENCE=DISABLE) &amp; (UpdateSrcDataWidth_READPINSEQUENCE=DISABLE) &amp; (UpdateDestDataWidth_READPINSEQUENCE=DISABLE)  &amp; (UpdateTransferEventMode_READPINSEQUENCE=DISABLE))">
    <CallLibMethod Name="ADV_LPBAM_Q_SetDataConfig">
       <MethodArg Name="SrcInc" ParameterName="SrcInc_READPINSEQUENCE"/>
       <MethodArg Name="DestInc" ParameterName="DestInc_READPINSEQUENCE"/>
       <MethodArg Name="SrcDataWidth" ParameterName="SrcDataWidth_READPINSEQUENCE"/>
       <MethodArg Name="DestDataWidth" ParameterName="DestDataWidth_READPINSEQUENCE"/>
       <MethodArg Name="TransferEventMode" ParameterName="TransferEventMode_READPINSEQUENCE"/>
       <MethodArg Name="SrcSecure" ParameterName="SrcSecure_READPINSEQUENCE"/>
       <MethodArg Name="DestSecure" ParameterName="DestSecure_READPINSEQUENCE"/> 
       <MethodArg Name="UpdateSrcInc" ParameterName="UpdateSrcInc_READPINSEQUENCE"/>
       <MethodArg Name="UpdateDestInc" ParameterName="UpdateDestInc_READPINSEQUENCE"/>
       <MethodArg Name="UpdateSrcDataWidth" ParameterName="UpdateSrcDataWidth_READPINSEQUENCE"/>
       <MethodArg Name="UpdateDestDataWidth" ParameterName="UpdateDestDataWidth_READPINSEQUENCE"/>
       <MethodArg Name="UpdateTransferEventMode" ParameterName="UpdateTransferEventMode_READPINSEQUENCE"/>
       <MethodArg Name="UpdateSrcSecure" ParameterName="UpdateSrcSecure_READPINSEQUENCE"/>
       <MethodArg Name="UpdateDestSecure" ParameterName="UpdateDestSecure_READPINSEQUENCE"/> 
       <MethodArg Name="DataNode" ParameterName="NodeLevel_Data_READPINSEQUENCE"/>
       <MethodArg Name="pDescriptor" ParameterName="DESCRIPTOR_NAME_READPINSEQUENCE"/>
    </CallLibMethod>
    </IFCondition>
  </RefConfig>


 
<!--LPBAM_Status_t ADV_LPBAM_GPIO_WritePin_SetFullQ(GPIO_TypeDef                     *const pInstance,
                                                LPBAM_DMAListInfo_t              const *const pDMAListInfo,
                                                LPBAM_GPIO_WritePinFullAdvConf_t const *const pWritePinFull,
                                                LPBAM_GPIO_WritePinFullDesc_t    *const pDescriptor,
                                                DMA_QListTypeDef                 *const pQueue);
-->
<LibMethod Comment="" Name="ADV_LPBAM_GPIO_WritePin_SetFullQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>       

    <Argument AddressOf="true" GenericType="struct" Name="pWritePinFull" TypeName="LPBAM_GPIO_WritePinFullAdvConf_t">
       <Argument AddressOf="false" GenericType="simple" Name="Pin"/> 
      <Argument AddressOf="false" GenericType="simple" Name="PinState"/> 
    </Argument> 

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_GPIO_WritePinFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>

<!--LPBAM_Status_t ADV_LPBAM_GPIO_WritePinSequence_SetFullQ(GPIO_TypeDef                     *const pInstance,
                                                        LPBAM_DMAListInfo_t              const *const pDMAListInfo,
                                                        LPBAM_GPIO_PinSeqFullAdvConf_t   const *const pWritePinSeqFull,
                                                        LPBAM_GPIO_WritePinSeqFullDesc_t *const pDescriptor,
                                                        DMA_QListTypeDef                 *const pQueue);
-->


<LibMethod Comment="" Name="ADV_LPBAM_GPIO_WritePinSequence_SetFullQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>       

    <Argument AddressOf="true" GenericType="struct" Name="pWritePinSeqFull" TypeName="LPBAM_GPIO_PinSeqFullAdvConf_t">
       <Argument AddressOf="false" GenericType="simple" Name="MYPARAMWRITEPINSEQUENCE"/>
        <Argument AddressOf="false" GenericType="simple" Name="Pin"/> 
      <Argument AddressOf="false" GenericType="simple" Name="Size"/> 
        <Argument AddressOf="false" GenericType="simple" Name="pData"/>      
    </Argument> 

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_GPIO_WritePinSeqFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>



<!--LPBAM_Status_t ADV_LPBAM_GPIO_ReadPinSequence_SetFullQ(GPIO_TypeDef                    *const pInstance,
                                                       LPBAM_DMAListInfo_t             const *const pDMAListInfo,
                                                       LPBAM_GPIO_PinSeqFullAdvConf_t  const *const pReadPinSeqFull,
                                                       LPBAM_GPIO_ReadPinSeqFullDesc_t *const pDescriptor,
                                                       DMA_QListTypeDef                *const pQueue);
-->

<LibMethod Comment="" Name="ADV_LPBAM_GPIO_ReadPinSequence_SetFullQ"> 
    <Argument AddressOf="false" GenericType="simple" Name="InstanceIP"/>

    <Argument AddressOf="true" GenericType="struct" Name="pDMAListInfo" TypeName="LPBAM_DMAListInfo_t">
       <Argument AddressOf="false" GenericType="simple" Name="QueueType"/> 
       <Argument AddressOf="true" GenericType="baseaddress" Name="pInstance" TypeName="DMA_TypeDef"/>
    </Argument>       

    <Argument AddressOf="true" GenericType="struct" Name="pReadPinSeqFull" TypeName="LPBAM_GPIO_PinSeqFullAdvConf_t">
      <Argument AddressOf="false" GenericType="simple" Name="Pin"/> 
      <Argument AddressOf="false" GenericType="simple" Name="Size"/> 
        <Argument AddressOf="false" GenericType="simple" Name="pData"/>    
    </Argument> 

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="LPBAM_GPIO_ReadPinSeqFullDesc_t" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pQueue" TypeName="DMA_QListTypeDef" Optional="output">
         <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>
    
</LibMethod>




<!--LPBAM_Status_t ADV_LPBAM_Q_SetDataConfig(LPBAM_COMMON_DataAdvConf_t const *const pDataConfig,
                                         uint32_t                   DataNode,
                                         void                       const *const pDescriptor);

-->

  <LibMethod Comment="" Name="ADV_LPBAM_Q_SetDataConfig">
    <Argument AddressOf="true" GenericType="struct" Name="pDataConfig" TypeName="LPBAM_COMMON_DataAdvConf_t">
      <Argument AddressOf="true" GenericType="struct" Name="TransferConfig" TypeName="LPBAM_DMA_NodeConfTypeDef">
        <Argument AddressOf="true" GenericType="struct" Name="Transfer" TypeName="LPBAM_DMA_InitTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="SrcInc"/>
            <Argument AddressOf="false" GenericType="simple" Name="DestInc"/>
            <Argument AddressOf="false" GenericType="simple" Name="SrcDataWidth"/>
            <Argument AddressOf="false" GenericType="simple" Name="DestDataWidth"/>
            <Argument AddressOf="false" GenericType="simple" Name="TransferEventMode"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="SrcSecure"/>  
        <Argument AddressOf="false" GenericType="simple" Name="DestSecure"/> 
      </Argument> 
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcInc"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestInc"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcDataWidth"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestDataWidth"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateTransferEventMode"/>
      <Argument AddressOf="false" GenericType="simple" Name="UpdateSrcSecure"/>  
      <Argument AddressOf="false" GenericType="simple" Name="UpdateDestSecure"/>
    </Argument>   

    <Argument AddressOf="false" GenericType="simple" Name="DataNode"/>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="DONTCARE" Optional="output">
      <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>   
 </LibMethod>







<!--LPBAM_Status_t ADV_LPBAM_Q_SetTriggerConfig(LPBAM_COMMON_TrigAdvConf_t const *const pTrigConfig,
                                            uint32_t                   NodeLevel,
                                            void                       const *const pDescriptor);
-->
   <LibMethod Comment="" Name="ADV_LPBAM_Q_SetTriggerConfig">
     <Argument AddressOf="true" GenericType="struct" Name="pTrigConfig" TypeName="LPBAM_COMMON_TrigAdvConf_t">
      <Argument AddressOf="true" GenericType="struct" Name="TriggerConfig" TypeName="LPBAM_DMA_TriggerConfTypeDef">
         <Argument AddressOf="false" GenericType="simple" Name="TriggerMode"/>  
         <Argument AddressOf="false" GenericType="simple" Name="TriggerPolarity"/> 
         <Argument AddressOf="false" GenericType="simple" Name="TriggerSelection"/> 
      </Argument>  
    </Argument>   

    <Argument AddressOf="false" GenericType="simple" Name="NodeLevel"/>

    <Argument Comment="" AddressOf="true" GenericType="struct" Name="pDescriptor" TypeName="DONTCARE" Optional="output">
      <Argument Comment="" AddressOf="false" GenericType="simple" Name="fake_for_struct"/>
    </Argument>   
  </LibMethod>



  <RefComponent Cclass="HAL" Cgroup="LPBAM" Cversion="1.0">
    <File Category="header" Name="Utilities/lpbam/STM32U5/stm32_platform_lpbam_gpio.h"/>
    <File Category="header" Name="Utilities/lpbam/stm32_adv_lpbam_gpio.h"/>
    <File Category="header" Name="Utilities/lpbam/stm32_adv_lpbam_common.h"/>
    <File Category="source" Name="Utilities/lpbam/stm32_adv_lpbam_gpio.c"/>
    <File Category="source" Name="Utilities/lpbam/stm32_adv_lpbam_common.c"/>
    <File Category="header" Name="Utilities/lpbam/stm32_lpbam_gpio.h"/>
    <File Category="source" Name="Utilities/lpbam/stm32_lpbam_gpio.c"/>  
  </RefComponent>

</IP>

<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<IP xmlns="http://mcd.rou.st.com/modules.php?name=mcu" DBVersion="V4.0" Name="RTC" Version="STM32Cube_FW_WBA_V0.1.0RC2" xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance" ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../doc/V4/Development/Specifications/db/IP_Configs.xsd">
    <RefConfig Name="TAMP_SetActiveTamper" Comment="Enable the RTC Active Tamper">
        
        <IFCondition Expression ="!S_SECURE" > 
            <CallLibMethod Name="HAL_RTCEx_PrivilegeModeSet">
                <MethodArg ParameterName="tampPrivilegeFull" Name="tampPrivilegeFull"/>     	        	
                <MethodArg ParameterName="MonotonicCounterPrivilege" Name="MonotonicCounterPrivilege"/>     	        	
            </CallLibMethod>                         
        </IFCondition>
        <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S)) " >
           <CallLibMethod Name="HAL_RTCEx_SecureModeSet">	             
                <MethodArg ParameterName="tampSecureFull" Name="State"/>     
            </CallLibMethod>  
            <CallLibMethod Name="HAL_RTCEx_PrivilegeModeSet">
                <MethodArg ParameterName="tampPrivilegeFull" Name="tampPrivilegeFull"/>     	        	
                <MethodArg ParameterName="MonotonicCounterPrivilege" Name="MonotonicCounterPrivilege"/>     	        	
            </CallLibMethod>                         
        </IFCondition>
         <IFCondition Expression ="1=1 &amp; S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)  &amp; (Semaphore_ActiveTamper1|Semaphore_ActiveTamper2|Semaphore_ActiveTamper3|Semaphore_ActiveTamper4|Semaphore_ActiveTamper5|Semaphore_ActiveTamper6|Semaphore_ActiveTamper7|Semaphore_ActiveTamper8)"> 

          <CallLibMethod Name="HAL_RTCEx_SetActiveTampers">
                 <!--MethodArg Name="TampInput" ParameterName="TampInput[RTC_ATAMP_5]"/-->
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].Enable" ParameterName="Enable10"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].Output" ParameterName="Output1"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].Interrupt" ParameterName="Interrupt1"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].NoErase" ParameterName="NoErase_10"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].MaskFlag" ParameterName="MaskFlag_10"/>
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].Enable" ParameterName="Enable20"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].Output" ParameterName="Output2"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].Interrupt" ParameterName="Interrupt2"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].NoErase" ParameterName="NoErase_20"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].MaskFlag" ParameterName="MaskFlag_20"/>
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].Enable" ParameterName="Enable30"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].Output" ParameterName="Output3"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].Interrupt" ParameterName="Interrupt3"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].NoErase" ParameterName="NoErase_30"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].MaskFlag" ParameterName="MaskFlag_30"/>
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].Enable" ParameterName="Enable40"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].Output" ParameterName="Output4"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].Interrupt" ParameterName="Interrupt4"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].NoErase" ParameterName="NoErase_40"/>

                
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].Enable" ParameterName="Enable50"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].Output" ParameterName="Output5"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].Interrupt" ParameterName="Interrupt5"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].NoErase" ParameterName="NoErase_50"/>

                          
                
              
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].Enable" ParameterName="Enable60"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].Output" ParameterName="Output6"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].Interrupt" ParameterName="Interrupt6"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].NoErase" ParameterName="NoErase_60"/>

                         
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].Enable" ParameterName="Enable70"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].Output" ParameterName="Output7"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].Interrupt" ParameterName="Interrupt7"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].NoErase" ParameterName="NoErase_70"/>

                         
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].Enable" ParameterName="Enable80"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].Output" ParameterName="Output8"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].Interrupt" ParameterName="Interrupt8"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].NoErase" ParameterName="NoErase_80"/>

                         
                
                <MethodArg Name="Seed[0]" ParameterName="Seed_Size0"/>
                <MethodArg Name="Seed[1]" ParameterName="Seed_Size1"/>
                <MethodArg Name="Seed[2]" ParameterName="Seed_Size2"/>
                <MethodArg Name="Seed[3]" ParameterName="Seed_Size3"/>
                <MethodArg Name="ActiveOutputChangePeriod" ParameterName="ActiveOutputChangePeriod"/>
                <MethodArg Name="ActiveAsyncPrescaler" ParameterName="ActiveAsyncPrescaler"/>
                <MethodArg Name="TimeStampOnTamperDetection" ParameterName="TimeStampOnTamperDetection"/>

          </CallLibMethod>      
          
                
         </IFCondition> 
         <IFCondition Expression ="1=1 &amp; S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (Semaphore_ActiveTamper1|Semaphore_ActiveTamper2|Semaphore_ActiveTamper3|Semaphore_ActiveTamper4|Semaphore_ActiveTamper5|Semaphore_ActiveTamper6|Semaphore_ActiveTamper7|Semaphore_ActiveTamper8)"> <!--(!S_SECURE | (S_SECURE &amp; (SEM_M33NS)) &amp; !Semaphore_PassiveTamper1"-->
             <CallLibMethod Name="HAL_RTCEx_SetActiveTampers">
                 <!--MethodArg Name="TampInput" ParameterName="TampInput[RTC_ATAMP_5]"/-->
                 <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].Enable" ParameterName="Enable10"/>
                 <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].Output" ParameterName="Output1"/>
                 <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].Interrupt" ParameterName="Interrupt1"/>
                 <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].NoErase" ParameterName="NoErase_10"/>
                 <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].MaskFlag" ParameterName="MaskFlag_10"/>
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].Enable" ParameterName="Enable20"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].Output" ParameterName="Output2"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].Interrupt" ParameterName="Interrupt2"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].NoErase" ParameterName="NoErase_20"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].MaskFlag" ParameterName="MaskFlag_20"/>
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].Enable" ParameterName="Enable30"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].Output" ParameterName="Output3"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].Interrupt" ParameterName="Interrupt3"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].NoErase" ParameterName="NoErase_30"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].MaskFlag" ParameterName="MaskFlag_30"/>
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].Enable" ParameterName="Enable40"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].Output" ParameterName="Output4"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].Interrupt" ParameterName="Interrupt4"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].NoErase" ParameterName="NoErase_40"/>

                
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].Enable" ParameterName="Enable50"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].Output" ParameterName="Output5"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].Interrupt" ParameterName="Interrupt5"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].NoErase" ParameterName="NoErase_50"/>

                          
                
              
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].Enable" ParameterName="Enable60"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].Output" ParameterName="Output6"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].Interrupt" ParameterName="Interrupt6"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].NoErase" ParameterName="NoErase_60"/>

                         
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].Enable" ParameterName="Enable70"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].Output" ParameterName="Output7"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].Interrupt" ParameterName="Interrupt7"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].NoErase" ParameterName="NoErase_70"/>

                         
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].Enable" ParameterName="Enable80"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].Output" ParameterName="Output8"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].Interrupt" ParameterName="Interrupt8"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].NoErase" ParameterName="NoErase_80"/>

                         
                
                <MethodArg Name="Seed[0]" ParameterName="Seed_Size0"/>
                <MethodArg Name="Seed[1]" ParameterName="Seed_Size1"/>
                <MethodArg Name="Seed[2]" ParameterName="Seed_Size2"/>
                <MethodArg Name="Seed[3]" ParameterName="Seed_Size3"/>
                <MethodArg Name="ActiveOutputChangePeriod" ParameterName="ActiveOutputChangePeriod"/>
                <MethodArg Name="ActiveAsyncPrescaler" ParameterName="ActiveAsyncPrescaler"/>
                <MethodArg Name="TimeStampOnTamperDetection" ParameterName="TimeStampOnTamperDetection"/>
           
          </CallLibMethod>           
        </IFCondition> 
          <IFCondition Expression ="1=1 &amp; (!S_SECURE) &amp; (Semaphore_ActiveTamper1|Semaphore_ActiveTamper2|Semaphore_ActiveTamper3|Semaphore_ActiveTamper4|Semaphore_ActiveTamper5|Semaphore_ActiveTamper6|Semaphore_ActiveTamper7|Semaphore_ActiveTamper8)"> <!--(!S_SECURE | (S_SECURE &amp; (SEM_M33NS)) &amp; !Semaphore_PassiveTamper1"-->

          <CallLibMethod Name="HAL_RTCEx_SetActiveTampers">
                 <!--MethodArg Name="TampInput" ParameterName="TampInput[RTC_ATAMP_5]"/-->
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].Enable" ParameterName="Enable10"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].Output" ParameterName="Output1"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].Interrupt" ParameterName="Interrupt1"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].NoErase" ParameterName="NoErase_10"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_1].MaskFlag" ParameterName="MaskFlag_10"/>
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].Enable" ParameterName="Enable20"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].Output" ParameterName="Output2"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].Interrupt" ParameterName="Interrupt2"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].NoErase" ParameterName="NoErase_20"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_2].MaskFlag" ParameterName="MaskFlag_20"/>
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].Enable" ParameterName="Enable30"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].Output" ParameterName="Output3"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].Interrupt" ParameterName="Interrupt3"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].NoErase" ParameterName="NoErase_30"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_3].MaskFlag" ParameterName="MaskFlag_30"/>
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].Enable" ParameterName="Enable40"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].Output" ParameterName="Output4"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].Interrupt" ParameterName="Interrupt4"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_4].NoErase" ParameterName="NoErase_40"/>

                
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].Enable" ParameterName="Enable50"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].Output" ParameterName="Output5"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].Interrupt" ParameterName="Interrupt5"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_5].NoErase" ParameterName="NoErase_50"/>

                          
                
              
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].Enable" ParameterName="Enable60"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].Output" ParameterName="Output6"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].Interrupt" ParameterName="Interrupt6"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_6].NoErase" ParameterName="NoErase_60"/>

                         
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].Enable" ParameterName="Enable70"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].Output" ParameterName="Output7"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].Interrupt" ParameterName="Interrupt7"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_7].NoErase" ParameterName="NoErase_70"/>

                         
                
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].Enable" ParameterName="Enable80"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].Output" ParameterName="Output8"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].Interrupt" ParameterName="Interrupt8"/>
                <MethodArg Name="sAllTamper.TampInput[RTC_ATAMP_8].NoErase" ParameterName="NoErase_80"/>

                         
                
                <MethodArg Name="Seed[0]" ParameterName="Seed_Size0"/>
                <MethodArg Name="Seed[1]" ParameterName="Seed_Size1"/>
                <MethodArg Name="Seed[2]" ParameterName="Seed_Size2"/>
                <MethodArg Name="Seed[3]" ParameterName="Seed_Size3"/>
                <MethodArg Name="ActiveOutputChangePeriod" ParameterName="ActiveOutputChangePeriod"/>
                <MethodArg Name="ActiveAsyncPrescaler" ParameterName="ActiveAsyncPrescaler"/>
                <MethodArg Name="TimeStampOnTamperDetection" ParameterName="TimeStampOnTamperDetection"/>

          </CallLibMethod>            
        </IFCondition> 
    </RefConfig>
    <RefConfig Comment="Initialize RTC Only" Name="RTC_Init_Only">  
        <!-- +++++++++++++++++++++++SECURE INIT++++++++++++++++++++++++++++++++++--> 
         
         
         
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
            <CallLibMethod Name="HAL_RTC_Init"/>      
            <CallLibMethod Name="HAL_RTCEx_PrivilegeModeSet">	        	
            </CallLibMethod>       
             <CallLibMethod Name="HAL_RTCEx_SecureModeSet">	
                <MethodArg Name="backupRegisterStartZone2" ParameterName="backupRegisterStartZone2_gS"/>
                <MethodArg Name="backupRegisterStartZone3" ParameterName="backupRegisterStartZone3_gS"/>
                <MethodArg ParameterName="tampSecureFull" Name="State"/>     
            </CallLibMethod>
        </IFCondition> 
        
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=__NULL))" >
            <CallLibMethod Name="HAL_RTC_Init"/>      
            <CallLibMethod Name="HAL_RTCEx_PrivilegeModeSet">	        	
            </CallLibMethod>       
             <CallLibMethod Name="HAL_RTCEx_SecureModeSet">	
                <MethodArg Name="backupRegisterStartZone2" ParameterName="backupRegisterStartZone2_gS"/>
                <MethodArg Name="backupRegisterStartZone3" ParameterName="backupRegisterStartZone3_gS"/>
                <MethodArg ParameterName="tampSecureFull" Name="State"/>     
            </CallLibMethod>
        </IFCondition>  
         <IFCondition Expression ="(S_SECURE  &amp; (!SEM_M33S)  &amp; (rtcSecureFull=RTC_SECURE_FULL_NO ) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_ALRB=!__NULL) &amp;(RTC_NONSECURE_FEATURE_ALRA=!__NULL) &amp;(RTC_NONSECURE_FEATURE_WUT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_CAL=!__NULL)&amp;(RTC_NONSECURE_FEATURE_TS=!__NULL) )" >
            <CallLibMethod Name="HAL_RTC_Init"/>      
            
        </IFCondition> 
        <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_ALRB=__NULL))|(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_ALRA=__NULL))|(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_TS=__NULL))|(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_CAL=__NULL))|(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp;(RTC_NONSECURE_FEATURE_WUT=__NULL))" >
            <CallLibMethod Name="HAL_RTC_Init"/>             
        </IFCondition>      
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (rtcSecureFull=RTC_SECURE_FULL_NO) &amp; (RTC_NONSECURE_FEATURE_INIT=RTC_NONSECURE_FEATURE_INIT))" >
           <CallLibMethod Name="HAL_RTCEx_SecureModeSet">	
                <MethodArg Name="backupRegisterStartZone2" ParameterName="backupRegisterStartZone2_gS"/>
                <MethodArg Name="backupRegisterStartZone3" ParameterName="backupRegisterStartZone3_gS"/>
                <MethodArg ParameterName="tampSecureFull" Name="State"/>     
            </CallLibMethod>  
            <CallLibMethod Name="HAL_RTCEx_PrivilegeModeSet">	        	
            </CallLibMethod>                 
        </IFCondition>
         
         <IFCondition Expression ="!S_SECURE">
            <CallLibMethod Name="HAL_RTC_Init"/>      
            <CallLibMethod Name="HAL_RTCEx_PrivilegeModeSet">	        	
            </CallLibMethod>       
            
        </IFCondition>  
          

            <ImplementCallBack Name="HAL_RTC_MspInit" />
            <ImplementCallBack Name="HAL_RTC_MspDeInit" />
    </RefConfig>
    <RefConfig Name="RTC_Init" Comment="Initialize RTC and set the Time and Date">
           <IFCondition Expression ="(S_SECURE  &amp; (!SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=!__NULL) &amp; (rtcSecureFull=RTC_SECURE_FULL_NO ))" >
            <CallLibMethod Name="HAL_RTC_Init"/>      
            
        </IFCondition>
        
        <IFCondition Expression ="!S_SECURE">
            <CallLibMethod Name="HAL_RTC_Init" />
             <CallLibMethod Name="HAL_RTC_SetTime">
                <MethodArg Name="sTime.Hours" ParameterName="HoursARG" />
                <MethodArg Name="sTime.Minutes" ParameterName="MinutesARG" />
                <MethodArg Name="sTime.Seconds" ParameterName="SecondsARG" />
                <MethodArg Name="sTime.SubSeconds" ParameterName="SubSecondsARG" />
            </CallLibMethod>
            <CallLibMethod Name="HAL_RTC_SetDate">
                <MethodArg Name="sDate.Date" ParameterName="DateARG" />
                <MethodArg Name="sDate.Year" ParameterName="YearARG" />
            </CallLibMethod>
        </IFCondition>   
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
            <CallLibMethod Name="HAL_RTC_Init" />
             <CallLibMethod Name="HAL_RTC_SetTime">
                <MethodArg Name="sTime.Hours" ParameterName="HoursARG" />
                <MethodArg Name="sTime.Minutes" ParameterName="MinutesARG" />
                <MethodArg Name="sTime.Seconds" ParameterName="SecondsARG" />
                <MethodArg Name="sTime.SubSeconds" ParameterName="SubSecondsARG" />
            </CallLibMethod>
            <CallLibMethod Name="HAL_RTC_SetDate">
                <MethodArg Name="sDate.Date" ParameterName="DateARG" />
                <MethodArg Name="sDate.Year" ParameterName="YearARG" />
            </CallLibMethod>
        </IFCondition> 
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_INIT=__NULL) )" >
            <CallLibMethod Name="HAL_RTC_Init" />
             <CallLibMethod Name="HAL_RTC_SetTime">
                <MethodArg Name="sTime.Hours" ParameterName="HoursARG" />
                <MethodArg Name="sTime.Minutes" ParameterName="MinutesARG" />
                <MethodArg Name="sTime.Seconds" ParameterName="SecondsARG" />
                <MethodArg Name="sTime.SubSeconds" ParameterName="SubSecondsARG" />
            </CallLibMethod>
            <CallLibMethod Name="HAL_RTC_SetDate">
                <MethodArg Name="sDate.Date" ParameterName="DateARG" />
                <MethodArg Name="sDate.Year" ParameterName="YearARG" />
            </CallLibMethod>
        </IFCondition> 
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp;  (rtcSecureFull=RTC_SECURE_FULL_YES) &amp;  (RTC_NONSECURE_FEATURE_INIT=RTC_NONSECURE_FEATURE_INIT) )" >
            <CallLibMethod Name="HAL_RTC_Init" />
             <CallLibMethod Name="HAL_RTC_SetTime">
                <MethodArg Name="sTime.Hours" ParameterName="HoursARG" />
                <MethodArg Name="sTime.Minutes" ParameterName="MinutesARG" />
                <MethodArg Name="sTime.Seconds" ParameterName="SecondsARG" />
                <MethodArg Name="sTime.SubSeconds" ParameterName="SubSecondsARG" />
            </CallLibMethod>
            <CallLibMethod Name="HAL_RTC_SetDate">
                <MethodArg Name="sDate.Date" ParameterName="DateARG" />
                <MethodArg Name="sDate.Year" ParameterName="YearARG" />
            </CallLibMethod>
        </IFCondition> 
       
         <IFCondition Expression="SSRU_Underflow_Interrupt=Enable">
            <CallLibMethod Name="HAL_RTCEx_SetSSRU_IT"/>

        </IFCondition>
        
            <ImplementCallBack Name="HAL_RTC_MspInit" />
            <ImplementCallBack Name="HAL_RTC_MspDeInit" />

    </RefConfig>
    
    <!-- Alarm A -->
    <RefConfig Name="RTC_SetAlarm_A" Comment="Enable the Alarm A">
        <IFCondition Expression ="(S_SECURE  &amp; SEM_M33S  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >

        <CallLibMethod Name="HAL_RTC_SetAlarm">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_A" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_A" />     
        </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_ALRA=__NULL) )" >

        <CallLibMethod Name="HAL_RTC_SetAlarm">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_A" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_A" />     
        </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp;   (rtcSecureFull=RTC_SECURE_FULL_NO)&amp;(RTC_NONSECURE_FEATURE_ALRA=!__NULL) )" >

        <CallLibMethod Name="HAL_RTC_SetAlarm">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_A" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_A" />     
        </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="(!S_SECURE )" >

        <CallLibMethod Name="HAL_RTC_SetAlarm">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_A" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_A" />     
        </CallLibMethod>
        </IFCondition>
    </RefConfig>
     <RefConfig Name="RTC_SetAlarm_A_IT" Comment="Enable the Alarm A">
                <IFCondition Expression ="(S_SECURE  &amp; SEM_M33S  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >

        <CallLibMethod Name="HAL_RTC_SetAlarm_IT">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_A" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_A" />     
        </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_ALRA=__NULL) )" >

        <CallLibMethod Name="HAL_RTC_SetAlarm_IT">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_A" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_A" />     
        </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp;   (rtcSecureFull=RTC_SECURE_FULL_NO)&amp;(RTC_NONSECURE_FEATURE_ALRA=!__NULL) )" >

        <CallLibMethod Name="HAL_RTC_SetAlarm_IT">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_A" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_A" />     
        </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="(!S_SECURE )" >

        <CallLibMethod Name="HAL_RTC_SetAlarm_IT">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_A" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_A" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_A" />     
        </CallLibMethod>
        </IFCondition>
    </RefConfig>
    <!-- Alarm B -->
    <RefConfig Name="RTC_SetAlarm_B" Comment="Enable the Alarm B">
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >

        <CallLibMethod Name="HAL_RTC_SetAlarm">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_B" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_B" />     
            <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
            <MethodArg Name="AlarmSubSecondMask" ParameterName="AlarmSubSecondMask_B" />
            <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
            <MethodArg Name="Alarm" ParameterName="Alarm_B" />
        </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_ALRB=__NULL) )" >

        <CallLibMethod Name="HAL_RTC_SetAlarm">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_B" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_B" />     
            <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
            <MethodArg Name="AlarmSubSecondMask" ParameterName="AlarmSubSecondMask_B" />
            <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
            <MethodArg Name="Alarm" ParameterName="Alarm_B" />
        </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (rtcSecureFull=RTC_SECURE_FULL_NO)&amp;(RTC_NONSECURE_FEATURE_ALRB=!__NULL) )" >

        <CallLibMethod Name="HAL_RTC_SetAlarm">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_B" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_B" />     
            <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
            <MethodArg Name="AlarmSubSecondMask" ParameterName="AlarmSubSecondMask_B" />
            <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
            <MethodArg Name="Alarm" ParameterName="Alarm_B" />
        </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="(!S_SECURE )" >
            <CallLibMethod Name="HAL_RTC_SetAlarm">
                <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_B" />
                <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_B" />
                <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_B" />
                <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_B" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_B" />     
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
                <MethodArg Name="AlarmSubSecondMask" ParameterName="AlarmSubSecondMask_B" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
                <MethodArg Name="Alarm" ParameterName="Alarm_B" />
            </CallLibMethod>
        </IFCondition>
    </RefConfig>

    <RefConfig Name="RTC_SetAlarm_B_IT" Comment="Enable the Alarm B">
                <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >

        <CallLibMethod Name="HAL_RTC_SetAlarm_IT">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_B" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_B" />     
            <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
            <MethodArg Name="AlarmSubSecondMask" ParameterName="AlarmSubSecondMask_B" />
            <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
            <MethodArg Name="Alarm" ParameterName="Alarm_B" />
        </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_ALRB=__NULL) )" >

        <CallLibMethod Name="HAL_RTC_SetAlarm_IT">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_B" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_B" />     
            <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
            <MethodArg Name="AlarmSubSecondMask" ParameterName="AlarmSubSecondMask_B" />
            <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
            <MethodArg Name="Alarm" ParameterName="Alarm_B" />
        </CallLibMethod>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; (rtcSecureFull=RTC_SECURE_FULL_NO)&amp;(RTC_NONSECURE_FEATURE_ALRB=!__NULL) )" >

        <CallLibMethod Name="HAL_RTC_SetAlarm_IT">
            <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_B" />
            <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_B" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_B" />     
            <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
            <MethodArg Name="AlarmSubSecondMask" ParameterName="AlarmSubSecondMask_B" />
            <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
            <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
            <MethodArg Name="Alarm" ParameterName="Alarm_B" />
        </CallLibMethod>
        </IFCondition>
        <IFCondition Expression ="(!S_SECURE )" >
            <CallLibMethod Name="HAL_RTC_SetAlarm_IT">
                <MethodArg Name="sAlarm.AlarmTime.Hours" ParameterName="HoursARG_B" />
                <MethodArg Name="sAlarm.AlarmTime.Minutes" ParameterName="MinutesARG_B" />
                <MethodArg Name="sAlarm.AlarmTime.Seconds" ParameterName="SecondsARG_B" />
                <MethodArg Name="sAlarm.AlarmTime.SubSeconds" ParameterName="SubSecondsARG_B" />
            <MethodArg Name="sAlarm.BinaryAutoClr" ParameterName="BinaryAutoClr_B" />     
                <MethodArg Name="AlarmMask" ParameterName="AlarmMask_B" />
                <MethodArg Name="AlarmSubSecondMask" ParameterName="AlarmSubSecondMask_B" />
                <MethodArg Name="AlarmDateWeekDaySel" ParameterName="AlarmDateWeekDaySel_B" />
                <MethodArg Name="AlarmDateWeekDay" ParameterName="AlarmDateWeekDayARG_B" />
                <MethodArg Name="Alarm" ParameterName="Alarm_B" />
            </CallLibMethod>
        </IFCondition>
    </RefConfig>
	
    <RefConfig Name="RTC_DeInit" Comment="Restore Default Initialisation">
        <CallLibMethod Name="HAL_RTC_DeInit"/>
    </RefConfig>
   
    <!-- Tamper 1 -->
    <RefConfig Name="RTC_SetTamper_1" Comment="Enable the RTC Tamper 1">
         <IFCondition Expression ="(S_SECURE &amp; SEM_M33S &amp; (tampSecureFull=TAMP_SECURE_FULL_YES)&amp; (Semaphore_PassiveTamper1) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_1"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_1"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_1"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_1"/>
                <MethodArg Name="sTamper.TimeStampOnTamperDetection" ParameterName="TimeStampOnTamperDetection"/>

            </CallLibMethod>
           
         </IFCondition>
          
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)&amp; (Semaphore_PassiveTamper1) )">

             <CallLibMethod Name="HAL_RTCEx_SetTamper">
                 <MethodArg Name="Tamper" ParameterName="Tamper_1"/>
                 <MethodArg Name="Trigger" ParameterName="Trigger_1"/>
                 <MethodArg Name="NoErase" ParameterName="NoErase_1"/>
                 <MethodArg Name="MaskFlag" ParameterName="MaskFlag_1"/>
                 <MethodArg Name="sTamper.TimeStampOnTamperDetection" ParameterName="TimeStampOnTamperDetection"/>

             </CallLibMethod>
           
         </IFCondition>
        
         <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper1) ">

             <CallLibMethod Name="HAL_RTCEx_SetTamper">
                 <MethodArg Name="Tamper" ParameterName="Tamper_1"/>
                 <MethodArg Name="Trigger" ParameterName="Trigger_1"/>
                 <MethodArg Name="NoErase" ParameterName="NoErase_1"/>
                 <MethodArg Name="MaskFlag" ParameterName="MaskFlag_1"/>
             </CallLibMethod>          
        
         </IFCondition>
                    
    </RefConfig>
    <RefConfig Name="RTC_SetTamper_1_IT" Comment="Enable the RTC Tamper 1">

        <IFCondition Expression ="(S_SECURE &amp; SEM_M33S &amp; (tampSecureFull=TAMP_SECURE_FULL_YES)&amp; (Semaphore_PassiveTamper1) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_1"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_1"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_1"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_1"/>
                <MethodArg Name="sTamper.TimeStampOnTamperDetection" ParameterName="TimeStampOnTamperDetection"/>

            </CallLibMethod>
          
        </IFCondition>
         
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)&amp; (Semaphore_PassiveTamper1) )">
             <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                 <MethodArg Name="Tamper" ParameterName="Tamper_1"/>
                 <MethodArg Name="Trigger" ParameterName="Trigger_1"/>
                 <MethodArg Name="NoErase" ParameterName="NoErase_1"/>
                 <MethodArg Name="MaskFlag" ParameterName="MaskFlag_1"/>
                 <MethodArg Name="TimeStampOnTamperDetection" ParameterName="TimeStampOnTamperDetection"/>

             </CallLibMethod>           
         </IFCondition>
     
         <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper1) ">
             <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                 <MethodArg Name="Tamper" ParameterName="Tamper_1"/>
                 <MethodArg Name="Trigger" ParameterName="Trigger_1"/>
                 <MethodArg Name="NoErase" ParameterName="NoErase_1"/>
                 <MethodArg Name="MaskFlag" ParameterName="MaskFlag_1"/>
             </CallLibMethod>               
         </IFCondition>
        
    </RefConfig>
	
    <!-- Tamper 2 -->
    <RefConfig Name="RTC_SetTamper_2" Comment="Enable the RTC Tamper 2">
         
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)&amp; (!Semaphore_ActiveTamper2) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_2"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_2"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_2"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_2"/>
            </CallLibMethod>
            
     
        </IFCondition>
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (!Semaphore_ActiveTamper2) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_2"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_2"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_2"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_2"/>
            </CallLibMethod>
                    
        </IFCondition>
                               
        <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper2) ">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_2"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_2"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_2"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_2"/>
            </CallLibMethod>          
        
        </IFCondition>
 
    </RefConfig>
    <RefConfig Name="RTC_SetTamper_2_IT" Comment="Enable the RTC Tamper 2">
        
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)&amp; (!Semaphore_ActiveTamper2) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_2"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_2"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_2"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_2"/>
            </CallLibMethod>
            
        </IFCondition>
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (!Semaphore_ActiveTamper2) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_2"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_2"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_2"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_2"/>
            </CallLibMethod>
        
                    
        </IFCondition>
                 
         <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper2) ">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_2"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_2"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_2"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_2"/>
            </CallLibMethod>          
        
        </IFCondition>
    </RefConfig>
	
    <!-- Tamper 3 -->
    <RefConfig Name="RTC_SetTamper_3" Comment="Enable the RTC Tamper 3">
         
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)&amp; (!Semaphore_ActiveTamper3) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_3"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_3"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_3"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_3"/>
            </CallLibMethod>
       
       
        </IFCondition>
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES)&amp; (!Semaphore_ActiveTamper3) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_3"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_3"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_3"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_3"/>
            </CallLibMethod>
       
           
        </IFCondition>
        
         <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper3)">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_3"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_3"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_3"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_3"/>
            </CallLibMethod>
      
        </IFCondition>
       
    </RefConfig>
    <RefConfig Name="RTC_SetTamper_3_IT" Comment="Enable the RTC Tamper 3">
         
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)&amp; (!Semaphore_ActiveTamper3) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_3"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_3"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_3"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_3"/>
            </CallLibMethod>
       
       
        </IFCondition>
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES)&amp; (!Semaphore_ActiveTamper3) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_3"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_3"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_3"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_3"/>
            </CallLibMethod>
       
           
        </IFCondition>
      
         <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper3)">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_3"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_3"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_3"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_3"/>
            </CallLibMethod>
      
        </IFCondition>
    </RefConfig>
    <!-- Tamper 4 -->
    <RefConfig Name="RTC_SetTamper_4" Comment="Enable the RTC Tamper 4">
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)&amp; (Semaphore_PassiveTamper4) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_4"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_4"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_4"/>
			
            </CallLibMethod>
      
          
        </IFCondition> 
       
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (Semaphore_PassiveTamper4))">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_4"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_4"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_4"/>
			
            </CallLibMethod>
         
        
        </IFCondition>
        <IFCondition Expression ="!S_SECURE &amp; (Semaphore_PassiveTamper4)">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_4"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_4"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_4"/>
			
            </CallLibMethod>
         
         
        </IFCondition> 
                 
    </RefConfig>
    <RefConfig Name="RTC_SetTamper_4_IT" Comment="Enable the RTC Tamper 4">
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)&amp; (Semaphore_PassiveTamper4) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_4"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_4"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_4"/>
			
            </CallLibMethod>
      
          
        </IFCondition> 
       
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (!(Semaphore_PassiveTamper4)))">

             <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                 <!--MethodArg Name="TampInput" ParameterName="TampInput[RTC_ATAMP_4]"/-->
                 <MethodArg Name="Enable" ParameterName="Enable4"/>
                 <MethodArg Name="Output" ParameterName="Output4"/>
                 <MethodArg Name="Interrupt" ParameterName="Interrupt4"/>
                 <MethodArg Name="NoErase" ParameterName="NoErase_4"/>

                 <MethodArg Name="Seed[0]" ParameterName="Seed_Size0"/>
                 <MethodArg Name="Seed[1]" ParameterName="Seed_Size1"/>
                 <MethodArg Name="Seed[2]" ParameterName="Seed_Size2"/>
                 <MethodArg Name="Seed[3]" ParameterName="Seed_Size3"/>
             </CallLibMethod>  
        
         </IFCondition> 
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (Semaphore_PassiveTamper4))">

             <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                 <MethodArg Name="Tamper" ParameterName="Tamper_4"/>
                 <MethodArg Name="Trigger" ParameterName="Trigger_4"/>
                 <MethodArg Name="NoErase" ParameterName="NoErase_4"/>
			
             </CallLibMethod>
         
        
         </IFCondition>
         <IFCondition Expression ="!S_SECURE &amp; (Semaphore_PassiveTamper4)">

             <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                 <MethodArg Name="Tamper" ParameterName="Tamper_4"/>
                 <MethodArg Name="Trigger" ParameterName="Trigger_4"/>
                 <MethodArg Name="NoErase" ParameterName="NoErase_4"/>
			
             </CallLibMethod>
         
         </IFCondition> 
                 
    </RefConfig>
    <!-- Tamper 5 -->
    <RefConfig Name="RTC_SetTamper_5" Comment="Enable the RTC Tamper 5">
        
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO) &amp; (Semaphore_PassiveTamper5) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_5"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_5"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_5"/>
            </CallLibMethod>
         
        
        </IFCondition>
        
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES)&amp; (Semaphore_PassiveTamper5)  )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_5"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_5"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_5"/>
            </CallLibMethod>
        
        </IFCondition>
        
        <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper5) ">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_5"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_5"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_5"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_5"/>
            </CallLibMethod>          
        
        </IFCondition>  
        
    </RefConfig>
    <RefConfig Name="RTC_SetTamper_5_IT" Comment="Enable the RTC Tamper 5">
         
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO) &amp; (Semaphore_PassiveTamper5) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_5"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_5"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_5"/>
            </CallLibMethod>
         
        
        </IFCondition>
        
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES)&amp; (Semaphore_PassiveTamper5)  )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_5"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_5"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_5"/>
            </CallLibMethod>
        
        
        </IFCondition>
        
        <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper5) ">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_5"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_5"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_5"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_5"/>
            </CallLibMethod>          
        
        </IFCondition>   
        
    </RefConfig>
    <!-- Tamper 6 -->
    <RefConfig Name="RTC_SetTamper_6" Comment="Enable the RTC Tamper 6">
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)&amp; (Semaphore_PassiveTamper6) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_6"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_6"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_6"/>
            </CallLibMethod>
       
        </IFCondition>  
        
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (Semaphore_PassiveTamper6))">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_6"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_6"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_6"/>
            </CallLibMethod>
       
        </IFCondition>
        <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper6) ">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_6"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_6"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_6"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_6"/>
            </CallLibMethod>          
        
        </IFCondition> 
          
    </RefConfig>
    <RefConfig Name="RTC_SetTamper_6_IT" Comment="Enable the RTC Tamper 6">
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO)&amp; (Semaphore_PassiveTamper6) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_6"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_6"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_6"/>
            </CallLibMethod>
       
        </IFCondition>  
       
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (Semaphore_PassiveTamper6))">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_6"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_6"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_6"/>
            </CallLibMethod>
       
        </IFCondition>
       <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper6) ">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_6"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_6"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_6"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_6"/>
            </CallLibMethod>          
        
        </IFCondition>   
         
    </RefConfig>
    <!-- Tamper 7 -->
    <RefConfig Name="RTC_SetTamper_7" Comment="Enable the RTC Tamper 7">
         <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO) &amp; (Semaphore_PassiveTamper7) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_7"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_7"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_7"/>
            </CallLibMethod>
        
        </IFCondition>  
          
         
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (Semaphore_PassiveTamper7) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_7"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_7"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_7"/>
            </CallLibMethod>
       
        </IFCondition>
         <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper7) ">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_7"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_7"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_7"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_7"/>
            </CallLibMethod>          
        
        </IFCondition>  
       
       
    </RefConfig>
    <RefConfig Name="RTC_SetTamper_7_IT" Comment="Enable the RTC Tamper 7">
          <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO) &amp; (Semaphore_PassiveTamper7) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_7"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_7"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_7"/>
            </CallLibMethod>
        
        </IFCondition>  
         
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (Semaphore_PassiveTamper7) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_7"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_7"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_7"/>
            </CallLibMethod>
       
        </IFCondition>
        <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper7) ">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_7"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_7"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_7"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_7"/>
            </CallLibMethod>          
        
        </IFCondition>   
        
    </RefConfig>
    <!-- Tamper 8 -->
    <RefConfig Name="RTC_SetTamper_8" Comment="Enable the RTC Tamper 8">
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO) &amp; (Semaphore_PassiveTamper8) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_8"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_8"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_8"/>
            </CallLibMethod>
        
        </IFCondition>  
        
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33S) &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (Semaphore_PassiveTamper8) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_8"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_8"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_8"/>
            </CallLibMethod>
     
         
        </IFCondition> 
        <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper8) ">

            <CallLibMethod Name="HAL_RTCEx_SetTamper">
                <MethodArg Name="Tamper" ParameterName="Tamper_8"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_8"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_8"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_8"/>
            </CallLibMethod>          
        
        </IFCondition>  
         
    </RefConfig>
    <RefConfig Name="RTC_SetTamper_8_IT" Comment="Enable the RTC Tamper 8">
        <IFCondition Expression ="(S_SECURE &amp; (SEM_M33NS) &amp; (tampSecureFull=TAMP_SECURE_FULL_NO) &amp; (Semaphore_PassiveTamper8) )">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_8"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_8"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_8"/>
            </CallLibMethod>
        
        </IFCondition>  
       
        <IFCondition Expression ="S_SECURE &amp; SEM_M33S &amp; (tampSecureFull=TAMP_SECURE_FULL_YES) &amp; (Semaphore_PassiveTamper8)">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_8"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_8"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_8"/>
            </CallLibMethod>
     
        </IFCondition> 
        <IFCondition Expression ="!S_SECURE &amp; (!Semaphore_ActiveTamper8) ">

            <CallLibMethod Name="HAL_RTCEx_SetTamper_IT">
                <MethodArg Name="Tamper" ParameterName="Tamper_8"/>
                <MethodArg Name="Trigger" ParameterName="Trigger_8"/>
                <MethodArg Name="NoErase" ParameterName="NoErase_8"/>
                <MethodArg Name="MaskFlag" ParameterName="MaskFlag_8"/>
            </CallLibMethod>          
        
        </IFCondition>
               
    </RefConfig>
	
	
    <!-- TimeStamp -->
    <RefConfig Name="RTC_Timestamp" Comment="Enable the TimeStamp">
        <IFCondition Expression ="S_SECURE  &amp; (SEM_M33S)  &amp; (rtcSecureFull=RTC_SECURE_FULL_YES)" >
            <CallLibMethod Name="HAL_RTCEx_SetTimeStamp">
                <MethodArg Name="RTC_TimeStampPin" ParameterName="TimeStampPin"/>
            </CallLibMethod>        
        </IFCondition>
         <IFCondition Expression ="S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_TS=__NULL) " >
            <CallLibMethod Name="HAL_RTCEx_SetTimeStamp">
                <MethodArg Name="RTC_TimeStampPin" ParameterName="TimeStampPin"/>
            </CallLibMethod>        
        </IFCondition>
        <IFCondition Expression ="S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_TS=!__NULL)  &amp; (rtcSecureFull=RTC_SECURE_FULL_NO)" >
            <CallLibMethod Name="HAL_RTCEx_SetTimeStamp">
                <MethodArg Name="RTC_TimeStampPin" ParameterName="TimeStampPin"/>
            </CallLibMethod>        
        </IFCondition>
       
        <IFCondition Expression ="!S_SECURE" >
            <CallLibMethod Name="HAL_RTCEx_SetTimeStamp">
                <MethodArg Name="RTC_TimeStampPin" ParameterName="TimeStampPin"/>
            </CallLibMethod>
        </IFCondition>
                
    </RefConfig>
        
    <RefConfig Name="RTC_Timestamp_IT" Comment="Enable the TimeStamp">
        <IFCondition Expression ="S_SECURE  &amp; (SEM_M33S)  &amp; (rtcSecureFull=RTC_SECURE_FULL_YES)" >
            <CallLibMethod Name="HAL_RTCEx_SetTimeStamp_IT">
                <MethodArg Name="RTC_TimeStampPin" ParameterName="TimeStampPin"/>
            </CallLibMethod>        
        </IFCondition>
         <IFCondition Expression ="S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_TS=__NULL) " >
            <CallLibMethod Name="HAL_RTCEx_SetTimeStamp_IT">
                <MethodArg Name="RTC_TimeStampPin" ParameterName="TimeStampPin"/>
            </CallLibMethod>        
        </IFCondition>
        <IFCondition Expression ="S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_TS=!__NULL)  &amp; (rtcSecureFull=RTC_SECURE_FULL_NO)" >
            <CallLibMethod Name="HAL_RTCEx_SetTimeStamp_IT">
                <MethodArg Name="RTC_TimeStampPin" ParameterName="TimeStampPin"/>
            </CallLibMethod>        
        </IFCondition>
        <IFCondition Expression ="(!S_SECURE) ">

            <CallLibMethod Name="HAL_RTCEx_SetTimeStamp_IT">
                <MethodArg Name="RTC_TimeStampPin" ParameterName="TimeStampPin"/>
            </CallLibMethod>
        </IFCondition>


    </RefConfig>
	
   <!-- Wake up -->
    <RefConfig Name="RTC_WakeUp" Comment="Enable the WakeUp">
        <IFCondition Expression ="S_SECURE  &amp; (SEM_M33S)  &amp; (rtcSecureFull=RTC_SECURE_FULL_YES)" >
            <CallLibMethod Name="HAL_RTCEx_SetWakeUpTimer"/>
        </IFCondition>
         <IFCondition Expression ="S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_WUT=__NULL) " >
            <CallLibMethod Name="HAL_RTCEx_SetWakeUpTimer"/>
        </IFCondition>
         <IFCondition Expression ="S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_WUT=!__NULL)  &amp; (rtcSecureFull=RTC_SECURE_FULL_NO)" >
            <CallLibMethod Name="HAL_RTCEx_SetWakeUpTimer"/>
        </IFCondition>
        
         <IFCondition Expression ="!S_SECURE">         
            <CallLibMethod Name="HAL_RTCEx_SetWakeUpTimer"/>
        </IFCondition>
    </RefConfig>
    <RefConfig Name="RTC_WakeUp_IT" Comment="Enable the WakeUp">
     <IFCondition Expression ="S_SECURE  &amp; (SEM_M33S)  &amp; (rtcSecureFull=RTC_SECURE_FULL_YES)" >
                   <CallLibMethod Name="HAL_RTCEx_SetWakeUpTimer_IT"/>
        
        </IFCondition>
         <IFCondition Expression ="S_SECURE  &amp; (SEM_M33S) &amp; (RTC_NONSECURE_FEATURE_WUT=__NULL) " >
                   <CallLibMethod Name="HAL_RTCEx_SetWakeUpTimer_IT"/>
        
        </IFCondition>
        <IFCondition Expression ="S_SECURE  &amp; (SEM_M33NS) &amp; (RTC_NONSECURE_FEATURE_WUT=!__NULL)  &amp; (rtcSecureFull=RTC_SECURE_FULL_NO)" >
                    <CallLibMethod Name="HAL_RTCEx_SetWakeUpTimer_IT"/>
        
        </IFCondition>
         <IFCondition Expression ="!S_SECURE">         
        <CallLibMethod Name="HAL_RTCEx_SetWakeUpTimer_IT"/>
        </IFCondition>
        
    </RefConfig>	
    <RefConfig Name="TAMP_CommonInit">
        
    </RefConfig>
    
    <!-- Calibration -->  
    <RefConfig Name="RTC_Calibration" Comment="Enable Calibration">
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
            <CallLibMethod Name="HAL_RTCEx_SetCalibrationOutPut"/>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33S) &amp; (RTC_SECURE_FEATURE_CAL=__NULL) )" >
            <CallLibMethod Name="HAL_RTCEx_SetCalibrationOutPut"/>
        </IFCondition>
        <IFCondition Expression ="!S_SECURE">         
            <CallLibMethod Name="HAL_RTCEx_SetCalibrationOutPut"/>
        </IFCondition>
         <IFCondition Expression ="S_SECURE  &amp; SEM_M33NS &amp;(rtcSecureFull=RTC_SECURE_FULL_NO)&amp; (RTC_SECURE_FEATURE_CAL=!__NULL)" >
            <CallLibMethod Name="HAL_RTCEx_SetCalibrationOutPut"/>
        </IFCondition>
      
    </RefConfig>
	
    <!-- RefClock -->
    <RefConfig Name="RTC_RefClock" Comment="Enable the reference Clock input">
        
        
        <IFCondition Expression ="(S_SECURE  &amp; ((SEM_M33S))  &amp; ((rtcSecureFull=RTC_SECURE_FULL_YES)))" >
        <CallLibMethod Name="HAL_RTCEx_SetRefClock"/>
        </IFCondition>
         <IFCondition Expression ="(S_SECURE  &amp; (SEM_M33NS) &amp; ((rtcSecureFull=RTC_SECURE_FULL_NO)) )" >
        <CallLibMethod Name="HAL_RTCEx_SetRefClock"/>
        </IFCondition>
         <IFCondition Expression ="!S_SECURE">         
        <CallLibMethod Name="HAL_RTCEx_SetRefClock"/>
        </IFCondition>
        
    </RefConfig>
	
    <LibMethod Comment="" Name="HAL_RTC_Init" Optimizable="true">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
                 <Argument AddressOf="false" GenericType="simple" Name="BinMode" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="BinMixBcdU" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_DeInit" Optimizable="true">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_MspInit" Optimizable="true">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_MspDeInit" Optimizable="true">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_SetTime" Optimizable="true">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sTime" TypeName="RTC_TimeTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="SubSeconds" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="DayLightSaving" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="StoreOperation" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Format" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_GetTime">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sTime" TypeName="RTC_TimeTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="SubSeconds" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="SecondFraction" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="DayLightSaving" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="StoreOperation" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Format" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_SetDate" Optimizable="true">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sDate" TypeName="RTC_DateTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="WeekDay" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Month" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Date" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Year" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Format" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_GetDate">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sDate" TypeName="RTC_DateTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="WeekDay" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Month" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Date" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Year" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Format" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_SetAlarm" >
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sAlarm" TypeName="RTC_AlarmTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="BinaryAutoClr" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="struct" Name="AlarmTime" TypeName="RTC_TimeTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SubSeconds" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
               
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmMask" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmSubSecondMask" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDaySel" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDay" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Alarm" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="BinaryAutoClr" OptimizationCondition="equal"/>

        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Format" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_SetAlarm_IT">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sAlarm" TypeName="RTC_AlarmTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="BinaryAutoClr" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="struct" Name="AlarmTime" TypeName="RTC_TimeTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SubSeconds" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
              
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmMask" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmSubSecondMask" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDaySel" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDay" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Alarm" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Format" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_DeactivateAlarm">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Alarm" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_GetAlarm">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sAlarm" TypeName="RTC_AlarmTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="BinaryAutoClr" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="struct" Name="AlarmTime" TypeName="RTC_TimeTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SubSeconds" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="DayLightSaving" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="StoreOperation" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmMask" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmSubSecondMask" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDaySel" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="AlarmDateWeekDay" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Alarm" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Alarm" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Format" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_AlarmIRQHandler">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_AlarmIRQHandler_S">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_PollForAlarmAEvent">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Timeout" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_AlarmAEventCallback">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_WaitForSynchro">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTC_GetState">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="RTC_EnterInitMode">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="RTC_ByteToBcd2">
        <Argument AddressOf="false" GenericType="simple" Name="Value" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="RTC_Bcd2ToByte">
        <Argument AddressOf="false" GenericType="simple" Name="Value" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_SetTimeStamp" Optimizable="true">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="TimeStampEdge" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="RTC_TimeStampPin" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_SetTimeStamp_IT">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="TimeStampEdge" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="RTC_TimeStampPin" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_DeactivateTimeStamp">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_GetTimeStamp">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sTimeStamp" TypeName="RTC_TimeTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="Hours" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Minutes" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Seconds" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="SubSeconds" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="TimeFormat" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="DayLightSaving" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="StoreOperation" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sTimeStampDate" TypeName="RTC_DateTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="WeekDay" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Month" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Date" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Year" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Format" OptimizationCondition="equal"/>
    </LibMethod>
    
    <LibMethod Comment="" Name="HAL_RTCEx_SetTamper_IT">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sTamper" TypeName="RTC_TamperTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="Tamper" OptimizationCondition="equal"/>
        
            <Argument AddressOf="false" GenericType="simple" Name="Trigger" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="NoErase" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="MaskFlag" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Filter" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="SamplingFrequency" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="PrechargeDuration" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="TamperPullUp" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_DeactivateTamper">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Tamper" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_SetWakeUpTimer">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="WakeUpCounter" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="WakeUpClock" OptimizationCondition="equal"/>
    </LibMethod>
     <LibMethod Comment="" Name="HAL_RTCEx_SetWakeUpTimer_IT">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="WakeUpCounter" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="WakeUpClock" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="WakeUpAutoClr" OptimizationCondition="equal"/>

    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_DeactivateWakeUpTimer">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_GetWakeUpTimer">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_BKUPWrite">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="BackupRegister" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Data" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_BKUPRead">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="BackupRegister" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_SetCoarseCalib">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="CalibSign" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="Value" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_DeactivateCoarseCalib">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_SetSmoothCalib">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="SmoothCalibPeriod" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="SmoothCalibPlusPulses" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="SmouthCalibMinusPulsesValue" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_SetSynchroShift">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="ShiftAdd1S" OptimizationCondition="equal"/>
        <Argument AddressOf="false" GenericType="simple" Name="ShiftSubFS" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_SetCalibrationOutPut">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="CalibOutput" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_DeactivateCalibrationOutPut">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_SetRefClock">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_DeactivateRefClock">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_EnableBypassShadow">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_DisableBypassShadow">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_TamperTimeStampIRQHandler">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_WakeUpTimerIRQHandler">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_AlarmBEventCallback">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_TimeStampEventCallback">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
     <LibMethod Comment="" Name="HAL_RTCEx_SetSSRU_IT">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_WakeUpTimerEventCallback">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_Tamper1EventCallback">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_Tamper2EventCallback">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_PollForAlarmBEvent">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Timeout" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_PollForTimeStampEvent">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Timeout" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_PollForTamper1Event">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="false" GenericType="simple" Name="Timeout" OptimizationCondition="equal"/>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_PollForTamper2Event">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <!-- RTC privilege functions -->
    <LibMethod Comment="" Name="HAL_RTCEx_PrivilegeModeSet">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="privilegeState" TypeName="RTC_PrivilegeStateTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="rtcPrivilegeFull" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="rtcPrivilegeFeatures" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="tampPrivilegeFull" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="MonotonicCounterPrivilege" OptimizationCondition="equal"/>

            <Argument AddressOf="false" GenericType="simple" Name="backupRegisterPrivZone" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="backupRegisterStartZone2" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="backupRegisterStartZone3" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_PrivilegeModeGet">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="features" TypeName="RTC_PrivilegeStateTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="rtcPrivilegeFull" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="rtcPrivilegeFeatures" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="tampPrivilegeFull" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="MonotonicCounterPrivilege" OptimizationCondition="equal"/>

            <Argument AddressOf="false" GenericType="simple" Name="backupRegisterPrivZone" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="backupRegisterStartZone2" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="backupRegisterStartZone3" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_DeactivateActiveTampers">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        
    </LibMethod>
    
    <LibMethod Comment="" Name="HAL_RTCEx_SetTamper">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sTamper" TypeName="RTC_TamperTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="Tamper" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Trigger" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="NoErase" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="MaskFlag" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Filter" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="SamplingFrequency" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="PrechargeDuration" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="TamperPullUp" OptimizationCondition="equal"/>
             <Argument AddressOf="false" GenericType="simple" Name="TimeStampOnTamperDetection" OptimizationCondition="equal"/>            
        </Argument>
    </LibMethod>
 <!--
    <LibMethod Comment="" Name="HAL_RTCEx_SetActiveSeed">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>            
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>   
            <Argument AddressOf="false" GenericType="simple" Name="pSeed" OptimizationCondition="equal"/>                           

        </Argument> 
        <Argument AddressOf="false" GenericType="simple" Name="pSeed" OptimizationCondition="equal"/> 
    </LibMethod> -->

    <!-- RTC security functions -->
    <LibMethod Comment="" Name="HAL_RTCEx_SecureModeSet">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="secureState" TypeName="RTC_SecureStateTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="rtcSecureFull" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="rtcNonSecureFeatures" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="tampSecureFull" OptimizationCondition="equal"/>
             <Argument AddressOf="false" GenericType="simple" Name="MonotonicCounterSecure" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="backupRegisterStartZone2" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="backupRegisterStartZone3" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_SecureModeGet">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="secureState" TypeName="RTC_SecureStateTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="rtcSecureFull" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="rtcNonSecureFeatures" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="tampSecureFull" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="backupRegisterStartZone2" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="backupRegisterStartZone3" OptimizationCondition="equal"/>        
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_TamperIRQHandler_S">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            <Argument AddressOf="false" GenericType="simple" Name="Lock" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="State" OptimizationCondition="equal"/>
        </Argument>
    </LibMethod>
    <LibMethod Comment="" Name="HAL_RTCEx_SetActiveTampers" Optimizable="true">
        <Argument AddressOf="true" Context="global" GenericType="struct" Name="hrtc" TypeName="RTC_HandleTypeDef">
            <Argument AddressOf="false" GenericType="baseaddress" Name="Instance" TypeName="RTC_TypeDef"/>
            <Argument AddressOf="false" GenericType="struct" Name="Init" TypeName="RTC_InitTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="HourFormat" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="AsynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="SynchPrediv" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPut" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutRemap" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPolarity" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutType" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="OutPutPullUp" OptimizationCondition="equal"/>
            </Argument>
            
        </Argument>
        <Argument AddressOf="true" GenericType="struct" Name="sAllTamper" TypeName="RTC_ActiveTampersTypeDef">
            <Argument AddressOf="false" GenericType="simple" Name="ActiveFilter" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="ActiveAsyncPrescaler" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="TimeStampOnTamperDetection" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="ActiveOutputChangePeriod" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Seed[0]" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Seed[1]" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Seed[2]" OptimizationCondition="equal"/>
            <Argument AddressOf="false" GenericType="simple" Name="Seed[3]" OptimizationCondition="equal"/>
            
            <Argument AddressOf="false" GenericType="struct" Name="TampInput[RTC_ATAMP_1]" TypeName="RTC_ATampInputTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Enable" OptimizationCondition="equal"/>               
                <Argument AddressOf="false" GenericType="simple" Name="Interrupt" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Output" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="NoErase" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="MaskFlag" OptimizationCondition="equal"/>  
            </Argument>
            <Argument AddressOf="false" GenericType="struct" Name="TampInput[RTC_ATAMP_2]" TypeName="RTC_ATampInputTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Enable" OptimizationCondition="equal"/>               
                <Argument AddressOf="false" GenericType="simple" Name="Interrupt" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Output" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="NoErase" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="MaskFlag" OptimizationCondition="equal"/>  
            </Argument>
            <Argument AddressOf="false" GenericType="struct" Name="TampInput[RTC_ATAMP_3]" TypeName="RTC_ATampInputTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Enable" OptimizationCondition="equal"/>               
                <Argument AddressOf="false" GenericType="simple" Name="Interrupt" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Output" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="NoErase" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="MaskFlag" OptimizationCondition="equal"/>  
            </Argument>
            <Argument AddressOf="false" GenericType="struct" Name="TampInput[RTC_ATAMP_4]" TypeName="RTC_ATampInputTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Enable" OptimizationCondition="equal"/>               
                <Argument AddressOf="false" GenericType="simple" Name="Interrupt" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Output" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="NoErase" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="MaskFlag" OptimizationCondition="equal"/>  
            </Argument>
            <Argument AddressOf="false" GenericType="struct" Name="TampInput[RTC_ATAMP_5]" TypeName="RTC_ATampInputTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Enable" OptimizationCondition="equal"/>               
                <Argument AddressOf="false" GenericType="simple" Name="Interrupt" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Output" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="NoErase" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="MaskFlag" OptimizationCondition="equal"/>  
            </Argument>
            <Argument AddressOf="false" GenericType="struct" Name="TampInput[RTC_ATAMP_6]" TypeName="RTC_ATampInputTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Enable" OptimizationCondition="equal"/>               
                <Argument AddressOf="false" GenericType="simple" Name="Interrupt" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Output" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="NoErase" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="MaskFlag" OptimizationCondition="equal"/>  
            </Argument>
            <Argument AddressOf="false" GenericType="struct" Name="TampInput[RTC_ATAMP_7]" TypeName="RTC_ATampInputTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Enable" OptimizationCondition="equal"/>               
                <Argument AddressOf="false" GenericType="simple" Name="Interrupt" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Output" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="NoErase" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="MaskFlag" OptimizationCondition="equal"/>  
            </Argument>
            <Argument AddressOf="false" GenericType="struct" Name="TampInput[RTC_ATAMP_8]" TypeName="RTC_ATampInputTypeDef">
                <Argument AddressOf="false" GenericType="simple" Name="Enable" OptimizationCondition="equal"/>               
                <Argument AddressOf="false" GenericType="simple" Name="Interrupt" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="Output" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="NoErase" OptimizationCondition="equal"/>
                <Argument AddressOf="false" GenericType="simple" Name="MaskFlag" OptimizationCondition="equal"/>  
            </Argument>
           
        </Argument>
            
    </LibMethod>
    <!--  ========HAL========= -->

    <RefComponent Cclass="HAL" Cgroup="RTC" Cversion="0.3.1">
        <File Category="header" Name="Drivers/STM32WBAxx_HAL_Driver/Inc/stm32wbaxx_hal_rtc.h"/>
        <File Category="source" Name="Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_rtc.c"/>
        <File Category="header" Name="Drivers/STM32WBAxx_HAL_Driver/Inc/stm32wbaxx_hal_rtc_ex.h"/>
        <File Category="source" Name="Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_rtc_ex.c"/>
        <File Category="header" Name="Drivers/STM32WBAxx_HAL_Driver/Inc/stm32wbaxx_ll_rtc.h"/>
    </RefComponent>
</IP>

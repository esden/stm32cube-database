<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<IP xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance"
    ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../doc/V4/Development/Specifications/db/IP_Modes.xsd"
    xmlns="http://mcd.rou.st.com/modules.php?name=mcu"
    DBVersion="V4.0"
    IPType="middleware"
    IpGroup="Middleware"
    Name="LWIP"
    Version="v1.4.1_Cube">
    
    <About>LWIP: LightWeight TCP/IP</About>
    <RefParameter Name="LwIP Version" Comment="LwIP Version (Version of LwIP supported by CubeMX ** CubeMX specific **)" Type="string" Group="LwIP Version" DefaultValue="1.4.1" TabName="General Settings" Mode="Basic" >
        <Description>This LwIP version supported by CubeMX is an Official Release v1.4.1 dated Dec 17, 2012.&lt;br&gt;LwIP stack has an internal parameter defined in init.h providing its version: LWIP_VERSION.&lt;br&gt;Here, the LwIP Version is just displayed to highlight the LwIP version supported by CubeMX.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: This parameter has been introduced by CubeMX and is not configurable, LWIP_VERSION being already defined in init.h.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DHCP" Comment="LWIP_DHCP (DHCP Module)" Type="list" Group="DHCP Option" DefaultValue="1" TabName="General Settings" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_DHCP requires LWIP_UDP=1." Expression="LWIP_UDP"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, DHCP (Dynamic Host Configuration Protocol) module is enabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DHCP" Comment="LWIP_DHCP (DHCP Module)" Type="list" Group="DHCP Option" DefaultValue="0" TabName="General Settings" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, DHCP (Dynamic Host Configuration Protocol) module is enabled.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_DHCP requires LWIP_UDP=1.</Description>
    </RefParameter>
    <RefParameter Name="IP_ADDRESS" Comment="IP_ADDRESS (IP Address)" Type="Array" Separator="." ArrayTypeElement="uint8_t;10" ArraySize="4" Group="IP Address Settings" DefaultValue="000.000.000.000" TabName="General Settings" Mode="Basic" Max="255" Visible="true">
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: If DHCP is disabled, the IP address is mandatory." Expression="!LWIP_DHCP"/>
    </RefParameter>
    <RefParameter Name="IP_ADDRESS" Comment="IP_ADDRESS (IP Address)" Type="Array" Separator="." ArrayTypeElement="uint8_t;10" ArraySize="4" Group="IP Address Settings" DefaultValue="0.0.0.0" TabName="General Settings" Mode="Basic" Visible="false"/>
    <RefParameter Name="NETMASK_ADDRESS" Comment="NETMASK_ADDRESS (Netmask Address)" Type="Array" Separator="." ArrayTypeElement="uint8_t;10" ArraySize="4" Group="IP Address Settings" DefaultValue="000.000.000.000" TabName="General Settings" Mode="Basic" Max="255" Visible="true">
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: If DHCP is disabled, the Netmask address is mandatory." Expression="!LWIP_DHCP"/>
    </RefParameter>
    <RefParameter Name="NETMASK_ADDRESS" Comment="NETMASK_ADDRESS (Netmask Address)" Type="Array" Separator="." ArrayTypeElement="uint8_t;10" ArraySize="4" Group="IP Address Settings" DefaultValue="0.0.0.0" TabName="General Settings" Mode="Basic" Visible="false"/>
    <RefParameter Name="GATEWAY_ADDRESS" Comment="GATEWAY_ADDRESS (Gateway Address)" Type="Array" Separator="." ArrayTypeElement="uint8_t;10" ArraySize="4" Group="IP Address Settings" DefaultValue="000.000.000.000" TabName="General Settings" Mode="Basic" Max="255" Visible="true">
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: If DHCP is disabled, the Gateway address is mandatory." Expression="!LWIP_DHCP"/>
    </RefParameter>
    <RefParameter Name="GATEWAY_ADDRESS" Comment="GATEWAY_ADDRESS (Gateway Address)" Type="Array" Separator="." ArrayTypeElement="uint8_t;10" ArraySize="4" Group="IP Address Settings" DefaultValue="0.0.0.0" TabName="General Settings" Mode="Basic" Visible="false"/>
    <RefParameter Name="WITH_RTOS" Comment="WITH_RTOS (Use FREERTOS ** CubeMX specific **)" Type="list" Group="RTOS Settings" DefaultValue="0" TabName="General Settings" Mode="Basic" Visible="true">
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: WITH_RTOS is enabled means NO_SYS is enabled (set to 0) and FREERTOS is enabled." Expression="!NO_SYS"/>
        <PossibleValue Comment="Enabled" Value="1" Semaphore="S_NO_SYS"/>
        <Description>This parameter is enabled as soon as FREERTOS is enabled in MiddleWares tree.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: This parameter has been introduced by CubeMX.</Description>
    </RefParameter>
    <RefParameter Name="WITH_RTOS" Comment="WITH_RTOS (Use FREERTOS ** CubeMX specific **)" Type="list" Group="RTOS Settings" DefaultValue="0" TabName="General Settings" Mode="Basic" Visible="true">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>This parameter is disabled as soon as FREERTOS is disabled in MiddleWares tree.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: This parameter has been introduced by CubeMX.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: WITH_RTOS is disabled means NO_SYS is disabled (set to 1) and FREERTOS is disabled.</Description>
    </RefParameter>
    <RefParameter Name="PHY" Comment="PHY (Phy MII)" Type="string" Group="RTOS Settings" DefaultValue="+ETH:PHY_Name_MII" TabName="General Settings" Mode="Basic" Visible="false">
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: MII." Expression="MII"/>
        <Description>PHY MII parameter.</Description>
    </RefParameter>
    <RefParameter Name="PHY" Comment="PHY (Phy RMII)" Type="string" Group="RTOS Settings" DefaultValue="+ETH:PHY_Name_RMII" TabName="General Settings" Mode="Basic" Visible="false">
        <Description>PHY RMII parameter.</Description>
    </RefParameter>
    <RefParameter Name="SYS_LIGHTWEIGHT_PROT" Comment="SYS_LIGHTWEIGHT_PROT (Memory Functions Protection)" Type="list" Group="Platform Specific Locking" DefaultValue="0" TabName="Key Options" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: SYS_LIGHTWEIGHT_PROT is used for inter task protection which works with an RTOS only when NO_SYS=0." Expression="!NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable this option if you want inter-task protection for certain critical regions during buffer allocation, deallocation and memory allocation and deallocation.</Description>
    </RefParameter>
    <RefParameter Name="SYS_LIGHTWEIGHT_PROT" Comment="SYS_LIGHTWEIGHT_PROT (Memory Functions Protection)" Type="list" Group="Platform Specific Locking" DefaultValue="0" TabName="Key Options" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>This option can be enabled only when NO_SYS=0, if you want inter-task protection for certain critical regions during buffer allocation, deallocation and memory allocation and deallocation.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: This parameter is disable without RTOS (when NO_SYS=1)</Description>
    </RefParameter>
    <RefParameter Name="NO_SYS" Comment="NO_SYS (LwIP Facilities)" Type="list" Group="Platform Specific Locking" DefaultValue="0" TabName="Key Options" Mode="Basic" Visible="true">
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Forced to Enabled (set to 0) by activating FREERTOS middleware. To set NO_SYS to 1 (Disabled), unset FREERTOS middleware." Expression="S_NO_SYS &amp; S_FREERTOS"/>
        <PossibleValue Comment="LwIP Facilities Enabled" Value="0"/>
        <Description>This parameter allows using lwIP facilities like sequential APIs (LWIP_NETCONN, LWIP_SOCKET)&lt;br&gt;otherwise a reduced set of LwIP functionalities is available.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: Take care about NO_SYS value: NO_SYS(Enabled)=0.</Description>
    </RefParameter>
    <RefParameter Name="NO_SYS" Comment="NO_SYS (LwIP Facilities)" Type="list" Group="Platform Specific Locking" DefaultValue="1" TabName="Key Options" Mode="Basic" Visible="true">
        <PossibleValue Comment="LwIP Facilities Disabled" Value="1"/>
        <Description>When forced to Disabled, this parameter prevents from using lwIP facilities like sequential APIs (LWIP_NETCONN, LWIP_SOCKET).&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: Take care about NO_SYS value: NO_SYS(Disabled)=1.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Forced to Disabled (set to 1) when FREERTOS middleware is not used. To set NO_SYS to 0 (Enabled), enable FREERTOS middleware.</Description>
    </RefParameter>
    <RefParameter Name="NO_SYS_NO_TIMERS" Comment="NO_SYS_NO_TIMERS (Drop Support For sys_timeout)" Type="list" Group="Platform Specific Locking" DefaultValue="0" TabName="Key Options" Mode="Basic" Visible="true">
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Drop support for sys_timeout can be enabled only when NO_SYS=1" Expression="NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable this parameter drop support for sys_timeout when NO_SYS=1.&lt;br&gt;Parameter used mainly for compatibility to old versions.</Description>
    </RefParameter>
    <RefParameter Name="NO_SYS_NO_TIMERS" Comment="NO_SYS_NO_TIMERS (Drop Support For sys_timeout)" Type="list" Group="Platform Specific Locking" DefaultValue="0" TabName="Key Options" Mode="Basic" Visible="true">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>This parameter can be enabled to drop support for sys_timeout only when NO_SYS=1.&lt;br&gt;Parameter used mainly for compatibility to old versions.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: This parameter is disabled when NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="MEMCPY(dst,src,len)" Comment="MEMCPY(dst,src,len) (Normal Memory Copy)" Type="StringRW" Group="Platform Specific Locking" DefaultValue="memcpy(dst,src,len)" TabName="Key Options" Mode="Advanced" Visible="true">
        <Description>This parameter allows to replace the default implementation included in C library by a faster user function.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="SMEMCPY(dst,src,len)" Comment="SMEMCPY(dst,src,len) (Small Memory Copy)" Type="StringRW" Group="Platform Specific Locking" DefaultValue="memcpy(dst,src,len)" TabName="Key Options" Mode="Advanced" Visible="true">
        <Description>This parameter allows to replace the default implementation by a user hand made. Some compilers (e.g. gcc) can inline a call to memcpy() if the length is known at compile time and is small.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="heth" Comment="heth (Ethernet Handle)" Type="integer" Group="Global" DefaultValue="0" Min="0" Max="1" Visible="false"/>
    <RefParameter Name="gnetif" Comment="gnetif (Network Interface)" Type="integer" Group="Global" DefaultValue="0" Min="0" Max="1" Visible="false"/>
    <RefParameter Name="ipaddr" Comment="ipaddr (IP Address)" Type="integer" Group="Global" DefaultValue="0" Min="0" Max="1" Visible="false"/>
    <RefParameter Name="netmask" Comment="netmask (Netmask IP Address)" Type="integer" Group="Global" DefaultValue="0" Min="0" Max="1" Visible="false"/>
    <RefParameter Name="gw" Comment="gw (Gateway Address)" Type="integer" Group="Global" DefaultValue="0" Min="0" Max="1" Visible="false"/>
    <RefParameter Name="MEM_LIBC_MALLOC" Comment="MEM_LIBC_MALLOC (User Memory Library)" Type="list" Group="Memory Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1" Semaphore="S_MEM_USE_POOLS"/>
        <Description>This option can be set with:&lt;br&gt;- Enable: use malloc/free/realloc provided by your C-library instead of the lwip internal allocator. Can save code size if you already use it.&lt;br&gt;- Disable: use LwIP internal allocator library&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: If MEM_LIBC_MALLOC=1, MEMP_USE_POOLS cannot be enabled. MEM_STATS value setting depends on MEM_LIBC_MALLOC value.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_MEM_MALLOC" Comment="MEMP_MEM_MALLOC (User Memory Pool Functions)" Type="list" Group="Memory Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>This option is set as followed:&lt;br&gt;- Enabled: Use User C Pool Alloctor Functions (Use mem_malloc/mem_free instead of the lwip pool allocator, especially useful with MEM_LIBC_MALLOC but handle with care regarding execution speed and usage from interrupts!)&lt;br&gt;- Disabled: Use LwIP Internal Pool Allocator Memory Functions.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: There are several other parameters linked to this one:&lt;br&gt;MEMP_NUM_RAW_PCB, MEMP_NUM_UDP_PCB, MEMP_NUM_TCP_PCB, MEMP_NUM_TCP_SEG, MEMP_NUM_REASSDATA, MEMP_NUM_IGMP_GROUP, MEMP_NUM_SYS_TIMEOUT, MEMP_NUM_NETCONN, MEMP_NUM_TCPIP_MSG_API, ARP_QUEUEING, IP_REASS_MAX_PBUFS, LWIP_RAW, LWIP_IGMP, LWIP_UDP, LWIP_TCP, TCP_WND, TCP_SND_QUEUELEN, LWIP_NETCONN, LWIP_SOCKET</Description>
    </RefParameter>
    <RefParameter Name="MEM_ALIGNMENT" Comment="MEM_ALIGNMENT (Memory Byte Alignment of CPU)" Type="list" Unit="Byte(s)" Group="Memory Options" DefaultValue="4" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="4" Value="4"/>
        <PossibleValue Comment="2" Value="2"/>
        <Description>This parameter should be set to the alignment of the CPU: 4 byte alignment or 2 byte alignment.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: PBUF_POOL_BUFSIZE must be greater than MEM_ALIGNMENT.</Description>
    </RefParameter>
    <RefParameter Name="MEM_SIZE" Comment="MEM_SIZE (Heap Memory Size)" Type="integer" Unit="Byte(s)" Group="Memory Options" DefaultValue="1600" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" >
        <Description>Size of the heap memory. If the application will send a lot of data that needs to be copied, this should be set high.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_SEPARATE_POOLS" Comment="MEMP_SEPARATE_POOLS (Memory Pool Separation)" Type="list" Group="Memory Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>If this option is enabled, each pool is placed in its own array. This can be used to individually change the location of each pool. When it is disabled, there is one big array for all pools.&lt;br&gt;&lt;b&gt;Warning (Not implemented: issue in LwIP stack =&gt; up to user to take care!)&lt;/b&gt;: You'll get a compiler error while combining MEMP_OVERFLOW_CHECK with MEMP_SEPARATE_POOLS.&lt;br&gt;memp_overflow_init and other overflow check related functions (run if MEMP_SEPARATE_POOLS=1) use memp_memory variable, which exists only if MEMP_SEPARATE_POOLS=0.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_OVERFLOW_CHECK" Comment="MEMP_OVERFLOW_CHECK (Memory Pool Overflow Protection)" Type="Integer" Group="Memory Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>The memp overflow protection parameter reserves a configurable amount of bytes before and after each memp element in every pool and fills it with a prominent default value:&lt;br&gt;- MEMP_OVERFLOW_CHECK=0: no checking&lt;br&gt;- MEMP_OVERFLOW_CHECK=1: checks each element when it is freed&lt;br&gt;- MEMP_OVERFLOW_CHECK&gt;1: checks each element in every pool every time.&lt;br&gt;The function memp_malloc() or memp_free() is called (useful but slow!).&lt;br&gt;&lt;b&gt;Warning (Not implemented: issue in LwIP stack =&gt; up to user to take care!)&lt;/b&gt;: You'll get a compiler error while combining MEMP_OVERFLOW_CHECK with MEMP_SEPARATE_POOLS.&lt;br&gt;memp_overflow_init and other overflow check related functions (run if MEMP_SEPARATE_POOLS=1) use memp_memory variable, which exists only if MEMP_SEPARATE_POOLS=0.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_SANITY_CHECK" Comment="MEMP_SANITY_CHECK (Memory Pool Sanity Check)" Type="list" Group="Memory Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>If this option is enabled, sanity check is run after each memp_free() to make sure that there are no cycles in the linked lists.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEM_USE_POOLS" Comment="MEM_USE_POOLS (Use an Alternative to malloc Function)" Type="list" Group="Memory Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Warning&lt;/b&gt;: If you enable both MEMP_USE_CUSTOM_POOLS and MEM_USE_POOLS, you must have lwippools.h in your include path somewhere and you must define your pools within lwippools.h.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use MEM_USE_POOLS requires MEM_LIBC_MALLOC=0 and MEMP_USE_CUSTOM_POOLS=1" Expression="!S_MEM_USE_POOLS &amp; MEMP_USE_CUSTOM_POOLS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>If this option is enabled, an alternative to malloc() is used by allocating from a set of memory pools of various sizes. When mem_malloc is called, an element of the smallest pool that can provide the length needed is returned. To use this, MEMP_USE_CUSTOM_POOLS also has to be enabled.</Description>
    </RefParameter>
    <RefParameter Name="MEM_USE_POOLS" Comment="MEM_USE_POOLS (Use an Alternative to malloc Function)" Type="list" Group="Memory Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>This option is disabled when MEMP_USE_CUSTOM_POOLS is disabled, to enable it enable MEMP_USE_CUSTOM_POOLS first.&lt;br&gt;When MEM_USE_POOLS is enabled, an alternative to malloc() is used by allocating from a set of memory pools of various sizes. When mem_malloc is called, an element of the smallest pool that can provide the length needed is returned. To use this, MEMP_USE_CUSTOM_POOLS also has to be enabled.&lt;br&gt;&lt;b&gt;Warning: up to user to take care!&lt;/b&gt;: If you enable both MEMP_USE_CUSTOM_POOLS and MEM_USE_POOLS, you must have lwippools.h in your include path somewhere and you must define your pools within lwippools.h.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use MEM_USE_POOLS requires MEM_LIBC_MALLOC=0 and MEMP_USE_CUSTOM_POOLS=1</Description>
    </RefParameter>
    <RefParameter Name="MEM_USE_POOLS_TRY_BIGGER_POOL" Comment="MEM_USE_POOLS_TRY_BIGGER_POOL (Try Next Bigger Pool if Empty Malloc Pool)" Type="list" Group="Memory Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this option is enabled, if one malloc-pool is empty, the next bigger pool is tried.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: Enabling this parameter might waste memory but it can make a system more reliable.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_USE_CUSTOM_POOLS" Comment="MEMP_USE_CUSTOM_POOLS (Define Additionnal Pools)" Type="list" Group="Memory Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable this options to include a user file lwippools.h that defines additional pools beyond the standard ones required by lwIP.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: If you set this to 1, you must have lwippools.h in your include path somewhere and you must define your pools within lwippools.h.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: If MEMP_USE_CUSTOM_POOLS=0, MEM_USE_POOLS will be disabled and if MEMP_USE_CUSTOM_POOLS=1, MEM_USE_POOLS can be enabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT" Comment="LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT (Allow Memory Free From Other Context)" Type="list" Group="Memory Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable this option if you want to free PBUF_RAM pbufs (or call mem_free()) from interrupt context (or another context that doesn't allow waiting for a semaphore).&lt;br&gt;If set to 1, mem_malloc will be protected by a semaphore and SYS_ARCH_PROTECT, while mem_free will only use SYS_ARCH_PROTECT. mem_malloc SYS_ARCH_UNPROTECTs with each loop so that mem_free can run.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: As you can see from the above description, this leads to dis-/ enabling interrupts often, which can be slow! Also, on low memory, mem_malloc can need longer.&lt;br&gt;If you don't want that, at least for NO_SYS=0, you can still use the following functions to enqueue a deallocation call which then runs in the tcpip_thread context:&lt;br&gt;- pbuf_free_callback(p)&lt;br&gt;- mem_free_callback(m);.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_PBUF" Comment="MEMP_NUM_PBUF (Number of Memory Pool struct Pbufs)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="16" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" >
        <Description>Number of memp struct pbufs (used for PBUF_ROM and PBUF_REF). If the application sends a lot of data out of ROM (or other static memory), this should be set high.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_RAW_PCB" Comment="MEMP_NUM_RAW_PCB (Number of Raw Protocol Control Blocks)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="4" TabName="Key Options" Mode="Basic" Min="=IF(!MEMP_MEM_MALLOC &amp; LWIP_RAW, 1, 0)" Max="2147483647" >
        <Description>Number of Raw connection PCBs (requires the LWIP_RAW option).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use MEMP_NUM_RAW_PCB requires MEMP_MEM_MALLOC=0 and if LWIP_RAW=1, it is mandatory to have MEMP_NUM_RAW_PCB&gt;0.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_TCP_PCB_LISTEN" Comment="MEMP_NUM_TCP_PCB_LISTEN (Number of Listening TCP Connections)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="8" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" >
        <Description>Number of listening TCP connections (requires the LWIP_TCP option).&lt;br&gt;This corresponds to the maximum number of TCP ports which may be simultaneously listened on.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: MEMP_NUM_NETCONN is link to MEMP_NUM_TCP_PCB_LISTEN value.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_TCP_SEG" Comment="MEMP_NUM_TCP_SEG (Number of TCP Segments simultaneously queued)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="16" TabName="Key Options" Mode="Basic" Min="=IF(!LWIP_DISABLE_TCP_SANITY_CHECKS &amp; LWIP_TCP &amp; !MEMP_MEM_MALLOC, TCP_SND_QUEUELEN, 0)" Max="2147483647" >
        <Description>Number of simultaneously queued TCP segments (requires the LWIP_TCP option).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: MEMP_NUM_TCP_SEG shuold be at least as big as TCP_SND_QUEUELEN when LWIP_TCP and LWIP_DISABLE_TCP_SANITY_CHECKS are enabled and MEMP_MEM_MALLOC disabled.&lt;br&gt;If you know what you are doing, define LWIP_DISABLE_TCP_SANITY_CHECKS to 1 to avoid Min value limitation.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_REASSDATA" Comment="MEMP_NUM_REASSDATA (Number of IP packets simultaneously queued for reassembly)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="5" TabName="Key Options" Mode="Advanced" Min="0" Max="=IF(!MEMP_MEM_MALLOC &amp; IP_REASSEMBLY, IP_REASS_MAX_PBUFS, 1000000)" >
        <Description>Number of IP packets simultaneously queued for reassembly (whole packets, not fragments!).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: MEMP_NUM_REASSDATA must be less than IP_REASS_MAX_PBUFS when IP_REASSEMBLY is enabled and MEMP_MEM_MALLOC disabled.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_FRAG_PBUF" Comment="MEMP_NUM_FRAG_PBUF (Number of IP Fragments simultaneously sent)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="15" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of IP fragments simultaneously sent (fragments, not whole packets!).&lt;br&gt;This is only used with IP_FRAG_USES_STATIC_BUF and LWIP_NETIF_TX_SINGLE_PBUF are disabled and only has to be &gt; 1 with DMA-enabled MACs where the packet is not yet sent when netif-&gt;output returns.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_ARP_QUEUE" Comment="MEMP_NUM_ARP_QUEUE (Number of simulateously queued Pbufs waiting for an ARP Request)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="30" TabName="Key Options" Mode="Advanced" Min="=IF(!MEMP_MEM_MALLOC &amp; LWIP_ARP &amp; ARP_QUEUEING, 1, 0)" Max="2147483647" >
        <Description>Number of simulateously queued outgoing packets (pbufs) that are waiting for an ARP request (to resolve their destination address) to finish (requires the ARP_QUEUEING option).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: MEMP_NUM_ARP_QUEUE must be &gt; 1 to use ARP_QUEUEING when LWIP_ARP is enabled and MEMP_MEM_MALLOC disabled.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_IGMP_GROUP" Comment="MEMP_NUM_IGMP_GROUP (Number of Multicast Groups)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="8" TabName="Key Options" Mode="Advanced" Min="=IF(!MEMP_MEM_MALLOC &amp; LWIP_IGMP,2,0)" Max="2147483647" >
        <Description>Number of multicast groups whose network interfaces can be members at the same time: one per netif (allsystems group) plus one per netif membership. It requires the LWIP_IGMP option enabled.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: MEMP_NUM_IGMP_GROUP must be greater than 1 if LWIP_IGMP option is enabled when MEMP_MEM_MALLOC is disabled.&lt;br&gt;&lt;b&gt;Recommendation&lt;/b&gt;: This value must be at least twice the number of active network interfaces active in the configuration.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_SYS_TIMEOUT" Comment="MEMP_NUM_SYS_TIMEOUT (Number of Timeouts simultateously active)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="=LWIP_TCP+IP_REASSEMBLY+LWIP_ARP+(2*LWIP_DHCP)+LWIP_AUTOIP+LWIP_IGMP+LWIP_DNS+PPP_SUPPORT" TabName="Key Options" Mode="Advanced" Min="=IF(!MEMP_MEM_MALLOC &amp; (!NO_SYS | (NO_SYS &amp; !NO_SYS_NO_TIMERS)), LWIP_TCP+IP_REASSEMBLY+LWIP_ARP+(2*LWIP_DHCP)+LWIP_AUTOIP+LWIP_IGMP+LWIP_DNS+PPP_SUPPORT, 0)" Max="2147483647" >
        <Description>Number of simulateously active timeouts (requires NO_SYS=0).&lt;br&gt;The default number of timeouts is calculated here for all enabled modules.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: If MEMP_MEM_MALLOC is disabled and either NO_SYS=0 or NO_SYS=1 with NO_SYS_NO_TIMERS=0, the MEMP_NUM_SYS_TIMEOUT must have as minimum value: LWIP_TCP + IP_REASSEMBLY + LWIP_ARP + (2*LWIP_DHCP) + LWIP_AUTOIP + LWIP_IGMP + LWIP_DNS + PPP_SUPPORT (value expected for each parameter is either '0' or '1').</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_NETBUF" Comment="MEMP_NUM_NETBUF (Number of Netbufs Structures)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="2" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of netbuf structures which may be in use simultaneously (only needed if you use the sequential API like LWIP_NETCONN or LWIP_SOCKET).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_NETCONN" Comment="MEMP_NUM_NETCONN (Number of Netconns Structures)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="4" TabName="Key Options" Mode="Advanced" Min="=IF(!LWIP_DISABLE_MEMP_SANITY_CHECKS &amp; LWIP_NETCONN &amp; MEMP_MEM_MALLOC &amp; LWIP_SOCKET, 1, 0)" Max="=IF(!LWIP_DISABLE_MEMP_SANITY_CHECKS &amp; LWIP_NETCONN &amp; !MEMP_MEM_MALLOC, MEMP_NUM_TCP_PCB + MEMP_NUM_TCP_PCB_LISTEN + MEMP_NUM_UDP_PCB + MEMP_NUM_RAW_PCB, 2147483647)" >
        <Description>Number of struct netconns (only needed if you use the sequential API, like like LWIP_NETCONN or LWIP_SOCKET).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: There are 2 dependencies:&lt;br&gt;1) When LWIP_NETCONN is enabled, MEMP_MEM_MALLOC and LWIP_DISABLE_MEMP_SANITY_CHECKS are disabled, MEMP_NUM_NETCONN must not ecceed MEMP_NUM_TCP_PCB + MEMP_NUM_TCP_PCB_LISTEN + MEMP_NUM_UDP_PCB + MEMP_NUM_RAW_PCB&lt;br&gt;2) When LWIP_NETCONN, LWIP_SOCKET and MEMP_MEM_MALLOC are all enabled with LWIP_DISABLE_MEMP_SANITY_CHECKS disabled, MEMP_NUM_NETCONN cannot be 0.&lt;br&gt;If you know what you are doing, define LWIP_DISABLE_MEMP_SANITY_CHECKS to 1.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_TCPIP_MSG_API" Comment="MEMP_NUM_TCPIP_MSG_API (Number of TCPIP Message Structures Used for Callback)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="8" TabName="Key Options" Mode="Advanced" Min="=IF(!MEMP_MEM_MALLOC &amp; (LWIP_NETCONN | LWIP_SOCKET), 1, 0)" Max="2147483647" >
        <Description>Number of struct tcpip_msg, which are used for callback/timeout API communication (only needed if you use tcpip.c).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use MEMP_NUM_TCPIP_MSG_API requires MEMP_MEM_MALLOC disabled and LWIP_NETCONN or LWIP_SOCKET enabled.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_TCPIP_MSG_INPKT" Comment="MEMP_NUM_TCPIP_MSG_INPKT (Number of TCPIP Message Structures Used for Incoming Packets)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="8" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of struct tcpip_msg used for incoming packets (only needed if you use tcpip.c).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_SNMP_NODE" Comment="MEMP_NUM_SNMP_NODE (Number of Leafs Nodes in the SNMP Tree)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="50" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of leafs in the SNMP tree.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_SNMP_ROOTNODE" Comment="MEMP_NUM_SNMP_ROOTNODE (Number of Root Node branches)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="30" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of branches in the SNMP tree. Every branch has one leaf (MEMP_NUM_SNMP_NODE) at least!.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_SNMP_VARBIND" Comment="MEMP_NUM_SNMP_VARBIND (Number of SNMP Variable Bindings)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="2" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of concurrent requests (does not have to be changed normally): 2 of these are used per request, 1 for input, 1 for output.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_SNMP_VALUE" Comment="MEMP_NUM_SNMP_VALUE (Number of OIDs)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="3" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of OID or values concurrently used (does not have to be changed normally): 3 of these are used per request, 1 for the value read, 2 for OIDs input and output.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_NETDB" Comment="MEMP_NUM_NETDB (Number of Concurrent lwip_addrinfo() Calls)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="1" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of concurrently running lwip_addrinfo() calls (before freeing the corresponding memory using lwip_freeaddrinfo()).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Used if LWIP_DNS is enabled.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_LOCALHOSTLIST" Comment="MEMP_NUM_LOCALHOSTLIST (Number of Host Entries in the Local Host List)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="1" TabName="Key Options" Min="0" Max="2147483647" >
        <Description>Number of host entries in the local host list if DNS_LOCAL_HOSTLIST_IS_DYNAMIC=1.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Used if LWIP_DNS is enabled.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_PPPOE_INTERFACES" Comment="MEMP_NUM_PPPOE_INTERFACES (Number of Concurrent Active PPPoE Interfaces)" Type="integer" Group="Internal Memory Pool Sizes" DefaultValue="1" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of concurrently active PPPoE interfaces (only used with PPPOE_SUPPORT enabled)</Description>
    </RefParameter>
    <RefParameter Name="PBUF_POOL_SIZE" Comment="PBUF_POOL_SIZE (Number of Buffers in the Pbuf Pool)" Type="integer" Group="Pbuf Options" DefaultValue="16" TabName="Key Options" Mode="Basic" Min="=IP_REASS_MAX_PBUFS+1" Max="2147483647" >
        <Description>Number of buffers in the pbuf pool.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_ARP" Comment="LWIP_ARP (ARP Functionality)" Type="list" Group="ARP Options" DefaultValue="1" TabName="Key Options" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_ARP requires LWIP_ETHERNET." Expression="LWIP_ETHERNET"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable ARP (Address Resolution Protocol) functionality. When ARP is disabled, either PPP or SLIPIF should be enabled or user protocol interface should be added.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_ARP" Comment="LWIP_ARP (ARP Functionality)" Type="list" Group="ARP Options" DefaultValue="0" TabName="Key Options" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable ARP (Address Resolution Protocol) functionality. When ARP is disabled, either PPP or SLIPIF should be enabled or user protocol interface should be added.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_ARP requires LWIP_ETHERNET.</Description>
    </RefParameter>
    <RefParameter Name="ARP_TABLE_SIZE" Comment="ARP_TABLE_SIZE (Number of Active MAC-IP Address Pairs Cached)" Type="integer" Group="ARP Options" DefaultValue="10" TabName="Key Options" Mode="Advanced" Min="0" Max="127" >
        <Description>Number of active MAC-IP address pairs cached.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="ARP_QUEUEING" Comment="ARP_QUEUEING (Multiple Outgoing Queued Packets)" Type="list" Group="ARP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use ARP_QUEUEING requires MEMP_NUM_ARP_QUEUE&gt;0 when MEMP_MEM_MALLOC=0 and LWIP_ARP is enabled." Expression="IF((!MEMP_MEM_MALLOC &amp; LWIP_ARP), MEMP_NUM_ARP_QUEUE &gt; 0,1)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Multiple outgoing packets are queued during hardware address  resolution.&lt;br&gt;By default, only the most recent packet is queued per IP address. This is sufficient for most protocols and mainly reduces TCP connection startup time.&lt;br&gt;Set this to 1 if you know your application sends more than one packet in a row to an IP address that is not in the ARP cache.</Description>
    </RefParameter>
    <RefParameter Name="ARP_QUEUEING" Comment="ARP_QUEUEING (Multiple Outgoing Queued Packets)" Type="list" Group="ARP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Multiple outgoing packets are queued during hardware address  resolution.&lt;br&gt;By default, only the most recent packet is queued per IP address. This is sufficient for most protocols and mainly reduces TCP connection startup time.&lt;br&gt;Set this to 1 if you know your application sends more than one packet in a row to an IP address that is not in the ARP cache.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use ARP_QUEUEING requires MEMP_NUM_ARP_QUEUE&gt;0 when MEMP_MEM_MALLOC=0 and LWIP_ARP is enabled.</Description>
    </RefParameter>
    <RefParameter Name="ETHARP_TRUST_IP_MAC" Comment="ETHARP_TRUST_IP_MAC (ARP Table Updated with source MAC and IP addresses)" Type="list" Group="ARP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, Incoming IP packets cause the ARP table to be updated with the source MAC and IP addresses supplied in the packet.&lt;br&gt;You may want to disable this if you do not trust LAN peers to have the correct addresses, or as a limited approach to attempt to handle spoofing. If disabled, lwIP will need to make a new ARP request if the peer is not already in the ARP table, adding a little latency. The peer *is* in the ARP table if it requested our address before. Also notice that this slows down input processing of every IP packet!.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="ETHARP_SUPPORT_VLAN" Comment="ETHARP_SUPPORT_VLAN (Receiving Ethernet Packets with VLAN Header)" Type="list" Group="ARP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, receiving ethernet packets with VLAN header is supported.&lt;br&gt;Additionally, you can define ETHARP_VLAN_CHECK to an u16_t VLAN ID to check. If ETHARP_VLAN_CHECK is defined, only VLAN-traffic for this VLAN is accepted. If ETHARP_VLAN_CHECK is not defined, all traffic is accepted. Alternatively, define a function/define ETHARP_VLAN_CHECK_FN(eth_hdr, vlan) that returns 1 to accept a packet or 0 to drop a packet.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_ETHERNET" Comment="LWIP_ETHERNET (Ethernet Module)" Type="list" Group="ARP Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, ethernet is supported for PPPoE even though ARP might be disabled.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: Ethernet needs to be kept activated to enable LwIP in STM32CubeMX.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: LWIP_ETHERNET needs to be turned on for LWIP_ARP or PPPOE_SUPPORT.</Description>
    </RefParameter>
    <RefParameter Name="ETH_PAD_SIZE" Comment="ETH_PAD_SIZE (Bytes Added before Ethernet Header)" Type="integer" Unit="Byte(s)" Group="ARP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of bytes added before the ethernet header to ensure  alignment of payload after that header.&lt;br&gt;Since the header is 14 bytes long, without this padding e.g. addresses in the IP header will not be aligned on a 32-bit boundary, so setting this to 2 can speed up 32-bit-platforms.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: By default PBUF_LINK_HLEN value is set to ETH_PAD_SIZE+14.</Description>
    </RefParameter>
    <RefParameter Name="ETHARP_SUPPORT_STATIC_ENTRIES" Comment="ETHARP_SUPPORT_STATIC_ENTRIES (Support Static ARP Table Entries)" Type="list" Group="ARP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>This parameter enables code to support static ARP table entries (using etharp_add_static_entry/etharp_remove_static_entry).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="IP_FORWARD" Comment="IP_FORWARD (Forward IP Packets Across Network Interfaces)" Type="list" Group="IP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>This parameter enables the ability to forward IP packets across network interfaces. If you are going to run lwIP on a device with only one network interface, define this to 0.</Description>
    </RefParameter>
    <RefParameter Name="IP_OPTIONS_ALLOWED" Comment="IP_OPTIONS_ALLOWED (IP Options Allowed)" Type="list" Group="IP Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>This option defines the behavior for IP options:&lt;br&gt;- IP_OPTIONS_ALLOWED=0: All packets with IP options are dropped.&lt;br&gt;- IP_OPTIONS_ALLOWED=1: IP options are allowed (but not parsed).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="IP_REASSEMBLY" Comment="IP_REASSEMBLY (Incoming Fragmented IP packets Reassembly)" Type="list" Group="IP Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, incoming fragmented IP packets are reassembled. Note that this option does not affect outgoing packet sizes, which can be controlled via IP_FRAG.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Some dependencies with MEMP_NUM_REASSDATA, IP_REASS_MAX_PBUFS, MEMP_NUM_SYS_TIMEOUT.</Description>
    </RefParameter>
    <RefParameter Name="IP_FRAG" Comment="IP_FRAG (IP Packets Fragmentation)" Type="list" Group="IP Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, outgoing IP packets are fragmented if their size exceeds MTU. Note that this option does not affect incoming packet sizes, which can be controlled via IP_REASSEMBLY.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Some dependencies with IP_FRAG_USES_STATIC_BUF and LWIP_NETIF_TX_SINGLE_PBUF.</Description>
    </RefParameter>
    <RefParameter Name="IP_REASS_MAXAGE" Comment="IP_REASS_MAXAGE (IP Packets Fragmentation if Size exceeds MTU)" Type="integer" Unit="Second(s)" Group="IP Options" DefaultValue="3" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Maximum time (in multiples of IP_TMR_INTERVAL - so seconds, normally) a fragmented IP packet waits for all fragments to arrive. If not all fragments arrived in this time, the whole packet is discarded.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="IP_REASS_MAX_PBUFS" Comment="IP_REASS_MAX_PBUFS (Maximum of Pbufs waiting to Be Reassembled)" Type="integer" Group="IP Options" DefaultValue="10" TabName="Key Options" Mode="Advanced" Min="=IF(MEMP_MEM_MALLOC &amp; IP_REASSEMBLY, MEMP_NUM_REASSDATA, 0)" Max="=PBUF_POOL_SIZE-1" >
        <Description>Total maximum amount of pbufs waiting to be reassembled. Since the received pbufs are enqueued, be sure to configure PBUF_POOL_SIZE &gt; IP_REASS_MAX_PBUFS so that the stack is still able to receive packets even if the maximum amount of fragments is enqueued for reassembly!.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use IP_REASSEMBLY requires IP_REASS_MAX_PBUFS&gt;=MEMP_NUM_REASSDATA when MEMP_MEM_MALLOC is enabled.</Description>
    </RefParameter>
    <RefParameter Name="IP_FRAG_USES_STATIC_BUF" Comment="IP_FRAG_USES_STATIC_BUF (IP Packets Fragmentation with Static MTU Buffer)" Type="list" Group="IP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, a static MTU-sized buffer is used for IP fragmentation. Otherwise pbufs are allocated and reference the original packet data to be fragmented (or with LWIP_NETIF_TX_SINGLE_PBUF=1, new PBUF_RAM pbufs are used for fragments).&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: IP_FRAG_USES_STATIC_BUF=1 may not be used for DMA-enabled MACs!&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: LWIP_NETIF_TX_SINGLE_PBUF does not work with IP_FRAG_USES_STATIC_BUF=1 as that creates pbuf queues</Description>
    </RefParameter>
    <RefParameter Name="IP_FRAG_MAX_MTU" Comment="IP_FRAG_MAX_MTU (MAX MTU on any Interface for IP Fragmatation Buffer)" Type="Integer" Unit="Bytes(s)" Group="IP Options" DefaultValue="1500" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use IP_FRAG_MAX_MTU requires IP_FRAG_USES_STATIC_BUF enabled." Expression="IP_FRAG_USES_STATIC_BUF"/>
        <Description>When this parameter is enabled, it is assumed that max MTU on any interface for IP frag buffer.</Description>
    </RefParameter>
    <RefParameter Name="IP_FRAG_MAX_MTU" Comment="IP_FRAG_MAX_MTU (MAX MTU on any Interface for IP Fragmatation Buffer)" Type="Integer" Unit="Bytes(s)" Group="IP Options" DefaultValue="null" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" Visible="false">
        <Description>When this parameter is enabled, it is assumed that max MTU on any interface for IP frag buffer.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use IP_FRAG_MAX_MTU requires IP_FRAG_USES_STATIC_BUF enabled.</Description>
    </RefParameter>
    <RefParameter Name="IP_DEFAULT_TTL" Comment="IP_DEFAULT_TTL (Time-To-Live Used by Transport Layers)" Type="Integer" Unit="Node(s)" Group="IP Options" DefaultValue="255" TabName="Key Options" Mode="Advanced" Min="0" Max="255" >
        <Description>Default value for Time-To-Live used by transport layers.&lt;br&gt;This tells how long the packets may live on the network before they are dropped. Each time the packet passes a router, firewall, computer, i.e a node, the TTL is decremented with one step.&lt;br&gt;Setting the TTL to 255 would be considered rude since this would make a packet live an extremely long time on the internet.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: IP_DEFAULT_TTL is used to set by default: ICMP_TTL, RAW_TTL, UDP_TTL and TCP_TTL.</Description>
    </RefParameter>
    <RefParameter Name="IP_SOF_BROADCAST" Comment="IP_SOF_BROADCAST (Broadcast Filter per Pcb on UDP and Raw Send Operations)" Type="list" Group="IP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, the SOF_BROADCAST field is used to enable broadcast filter per pcb on udp and raw send operations. To enable broadcast filter on recv operations, you also have to set IP_SOF_BROADCAST_RECV=1.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use IP_SOF_BROADCAST_RECV requires IP_SOF_BROADCAST enabled.</Description>
    </RefParameter>
    <RefParameter Name="IP_SOF_BROADCAST_RECV" Comment="IP_SOF_BROADCAST_RECV (Broadcast Filter on recv Operations)" Type="list" Group="IP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use IP_SOF_BROADCAST_RECV requires IP_SOF_BROADCAST enabled." Expression="IP_SOF_BROADCAST"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, broadcast filter on recv operations is enabled.</Description>
    </RefParameter>
    <RefParameter Name="IP_SOF_BROADCAST_RECV" Comment="IP_SOF_BROADCAST_RECV (Broadcast Filter on recv Operations)" Type="list" Group="IP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, broadcast filter on recv operations is enabled.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use IP_SOF_BROADCAST_RECV requires IP_SOF_BROADCAST enabled.</Description>
    </RefParameter>
    <RefParameter Name="IP_FORWARD_ALLOW_TX_ON_RX_NETIF" Comment="IP_FORWARD_ALLOW_TX_ON_RX_NETIF (IP Forward to send Packets back out on the NETIF)" Type="list" Group="IP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Set this parameter allows ip_forward() to send packets back out on the netif where it was received. This should only be used for wireless networks.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: When this is 1, make sure your netif driver correctly marks incoming link-layer-broadcast/multicast packets as such using the corresponding pbuf flags!&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS" Comment="LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS (Randomizes Local Port for the First Local TCP/UDP PCB)" Type="list" Group="IP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Set this parameter randomizes the local port for the first local TCP/UDP pcb (default=0). This can prevent creating predictable port numbers after booting a device.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_ICMP" Comment="LWIP_ICMP (ICMP Module Activation)" Type="list" Group="Protocols Options" DefaultValue="1" TabName="General Settings" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>This option enables ICMP (Internet Control Message Protocol) module inside the IP stack.Be careful, disable that make your product non-compliant to RFC1122.&lt;br&gt; - "Debug" tab.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more options on ICMP, please check in:&lt;br&gt; - "Key Options" tab within "ICMP/IGMP Options"&lt;br&gt; - "Statistics" tab&lt;br&gt; - "Checksum" tab</Description>
    </RefParameter>
    <RefParameter Name="ICMP_TTL" Comment="ICMP_TTL (Time-To-Live Used by ICMP Packets)" Type="Integer" Unit="Node(s)" Group="ICMP/IGMP Options" DefaultValue="=IP_DEFAULT_TTL" TabName="Key Options" Mode="Advanced" Min="0" Max="255" >
        <Description>Default value for Time-To-Live used by ICMP packets.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_BROADCAST_PING" Comment="LWIP_BROADCAST_PING (Respond to Broadcast Pings)" Type="list" Group="ICMP/IGMP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Set this parameter allows responding to broadcast pings (default is unicast only).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_MULTICAST_PING" Comment="LWIP_MULTICAST_PING (Respond to Multicast Pings)" Type="list" Group="ICMP/IGMP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Set this parameter to allow responding to multicast pings (default is unicast only).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_RAW" Comment="LWIP_RAW (Use Raw LwIP API)" Type="list" Group="Raw Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_RAW requires MEMP_NUM_RAW_PCB&gt;0 when MEMP_MEM_MALLOC is disabled." Expression="IF(!MEMP_MEM_MALLOC, MEMP_NUM_RAW_PCB &gt; 0, 1)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>If this parameter is enabled, the application layer to hook into the IP layer itself is enabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_RAW" Comment="LWIP_RAW (Use Raw LwIP API)" Type="list" Group="Raw Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>If this parameter is enabled, the application layer to hook into the IP layer itself is enabled.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_RAW requires MEMP_NUM_RAW_PCB&gt;0 when MEMP_MEM_MALLOC is disabled.</Description>
    </RefParameter>
    <RefParameter Name="RAW_TTL" Comment="RAW_TTL (Time-To-Live Used by Raw Packets)" Type="Integer" Unit="Node(s)" Group="Raw Options" DefaultValue="=IP_DEFAULT_TTL" TabName="Key Options" Mode="Advanced" Min="0" Max="255" >
        <Description>Default value for Time-To-Live used by Raw packets.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="DHCP_DOES_ARP_CHECK" Comment="DHCP_DOES_ARP_CHECK (DHCP with ARP Check on Offered Address)" Type="list" Group="DHCP Option" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use DHCP_DOES_ARP_CHECK requires LWIP_DHCP and LWIP_ARP both enabled." Expression="(LWIP_DHCP &amp; LWIP_ARP)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, an ARP check on the offered address is done.</Description>
    </RefParameter>
    <RefParameter Name="DHCP_DOES_ARP_CHECK" Comment="DHCP_DOES_ARP_CHECK (ARP Check on Offered Address)" Type="list" Group="DHCP Option" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, an ARP check on the offered address is done.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use DHCP_DOES_ARP_CHECK requires LWIP_DHCP and LWIP_ARP both enabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_AUTOIP" Comment="LWIP_AUTOIP (AUTOIP Module)" Type="list" Group="AUTOIP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_AUTOIP requires LWIP_ARP enabled." Expression="LWIP_ARP"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, AUTOIP (AUTOmatic linklocal IP) module is enabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_AUTOIP" Comment="LWIP_AUTOIP (AUTOIP Module)" Type="list" Group="AUTOIP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, AUTOIP (AUTOmatic linklocal IP) module is enabled.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_AUTOIP requires LWIP_ARP enabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DHCP_AUTOIP_COOP" Comment="LWIP_DHCP_AUTOIP_COOP (DHCP/AUTOIP Cooperation Mode)" Type="list" Group="AUTOIP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_DHCP_AUTOIP_COOP requires LWIP_AUTOIP and LWIP_DHCP both enabled." Expression="LWIP_AUTOIP &amp; LWIP_DHCP"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, it allows DHCP and AUTOIP to be both enabled on the same interface at the same time.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DHCP_AUTOIP_COOP" Comment="LWIP_DHCP_AUTOIP_COOP (DHCP/AUTOIP Cooperation Mode)" Type="list" Group="AUTOIP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, it allows DHCP and AUTOIP to be both enabled on the same interface at the same time.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_DHCP_AUTOIP_COOP requires LWIP_AUTOIP and LWIP_DHCP both enabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DHCP_AUTOIP_COOP_TRIES" Comment="LWIP_DHCP_AUTOIP_COOP_TRIES (DHCP AUTOIP Coop Tries)" Type="Integer" Group="AUTOIP Options" DefaultValue="9" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>This parameter sets to the number of DHCP DISCOVER probes that should be sent before falling back on AUTOIP. This can be set as low as 1 to get an AutoIP address very quickly, but you should be prepared to handle a changing IP address when DHCP overrides.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_SNMP" Comment="LWIP_SNMP (SNMP Module)" Type="list" Group="SNMP Options" DefaultValue="0" TabName="Key Options" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_SNMP requires LWIP_UDP enabled, SNMP_CONCURRENT_REQUESTS and SNMP_TRAP_DESTINATIONS both greater than 0." Expression="LWIP_UDP &amp; (SNMP_CONCURRENT_REQUESTS &gt; 0) &amp; (SNMP_TRAP_DESTINATIONS &gt; 0)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, it turns on SNMP (Simple Network Management Protocol) module. UDP must be available for SNMP transport.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_SNMP" Comment="LWIP_SNMP (SNMP Module)" Type="list" Group="SNMP Options" DefaultValue="0" TabName="Key Options" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, it turns on SNMP (Simple Network Management Protocol) module. UDP must be available for SNMP transport.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_SNMP requires LWIP_UDP enabled, SNMP_CONCURRENT_REQUESTS and SNMP_TRAP_DESTINATIONS both greater than 0.</Description>
    </RefParameter>
    <RefParameter Name="SNMP_CONCURRENT_REQUESTS" Comment="SNMP_CONCURRENT_REQUESTS (Number of Concurrent Requests SNMP will Allow)" Type="Integer" Group="SNMP Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" Min="=IF(LWIP_SNMP, 1, 0)" Max="2147483647" >
        <Description>Number of concurrent requests the module will allow. At least one request buffer is required. Does not have to be changed unless external MIBs answer request asynchronously.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: If you want to use SNMP, you have to define SNMP_CONCURRENT_REQUESTS&gt;=1.</Description>
    </RefParameter>
    <RefParameter Name="SNMP_TRAP_DESTINATIONS" Comment="SNMP_TRAP_DESTINATIONS (Number of SNMP Trap Destinations)" Type="Integer" Group="SNMP Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" Min="=IF(LWIP_SNMP, 1, 0)" Max="2147483647" >
        <Description>Number of trap destinations. At least one trap destination is required.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: If you want to use SNMP, you have to define SNMP_TRAP_DESTINATIONS&gt;=1.</Description>
    </RefParameter>
    <RefParameter Name="SNMP_PRIVATE_MIB" Comment="SNMP_PRIVATE_MIB (SNMP Private MIB)" Type="list" Group="SNMP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When using a private MIB, you have to create a file private_mib.h that contains a 'struct mib_array_node mib_private' which contains your MIB.&lt;br&gt;&lt;b&gt;Warning (Not implemented: up to user to take care!)&lt;/b&gt;: mib_private needs to be defined in private_mib.h.</Description>
    </RefParameter>
    <RefParameter Name="SNMP_SAFE_REQUESTS" Comment="SNMP_SAFE_REQUESTS (SNMP Safe Request)" Type="list" Group="SNMP Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Only allow SNMP write actions that are 'safe' (e.g. disabeling netifs is not a safe action and disabled when SNMP_SAFE_REQUESTS = 1). Unsafe requests are disabled by default!&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="SNMP_MAX_OCTET_STRING_LEN" Comment="SNMP_MAX_OCTET_STRING_LEN (SNMP Maximum Length of Strings Used)" Type="Integer" Unit="Byte(s)" Group="SNMP Options" DefaultValue="127" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Maximum length of strings used. This affects the size of MEMP_SNMP_VALUE elements.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="SNMP_MAX_TREE_DEPTH" Comment="SNMP_MAX_TREE_DEPTH (Maximum Depth of SNMP Tree)" Type="Integer" Group="SNMP Options" DefaultValue="15" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Maximum depth of the SNMP tree. With private MIBs enabled, this depends on your MIB! This affects the size of MEMP_SNMP_VALUE elements.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="SNMP_MAX_VALUE_SIZE" Comment="SNMP_MAX_VALUE_SIZE (Size of MEMP_SNMP_VALUE Elements)" Type="Integer" Unit="Byte(s)" Group="SNMP Options" DefaultValue="128" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>The size of the MEMP_SNMP_VALUE elements, normally calculated from SNMP_MAX_OCTET_STRING_LEN and SNMP_MAX_TREE_DEPTH.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MD5_SUPPORT" Comment="MD5_SUPPORT (MD5 Module)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Support MD5 (see also CHAP).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_IGMP" Comment="LWIP_IGMP (IGMP Module)" Type="list" Group="Protocols Options" DefaultValue="0" TabName="General Settings" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Warning (Not implemented: up to user to take care!)&lt;/b&gt;: LWIP_RAND() needs to be defined to a random-function returning an u32_t random value.&lt;br&gt;For example, you can add in cc.h file the following code: #define LWIP_RAND rand&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_IGMP requires LWIP_UDP enabled and also MEMP_NUM_IGMP_GROUP&gt;1 when MEMP_MEM_MALLOC is disabled." Expression="LWIP_UDP &amp; IF(!MEMP_MEM_MALLOC,MEMP_NUM_IGMP_GROUP&gt;1,1)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, it turns on IGMP (Internet Group Management Protocol) module.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more options on IGMP, please check in:&lt;br&gt; - "Key Options" tab within "ICMP/IGMP", "Internal Memory Pool Sizes" and "LOOPIF" Options&lt;br&gt; - "Statistics" tab&lt;br&gt; - "Debug" tab.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_IGMP" Comment="LWIP_IGMP (IGMP Module)" Type="list" Group="Protocols Options" DefaultValue="0" TabName="General Settings" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, it turns on IGMP (Internet Group Management Protocol) module.&lt;br&gt;&lt;b&gt;Warning (Not implemented: up to user to take care!)&lt;/b&gt;: LWIP_RAND() needs to be defined to a random-function returning an u32_t random value.&lt;br&gt;For example, you can add in cc.h file the following code: #define LWIP_RAND rand&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_IGMP requires LWIP_UDP enabled and also MEMP_NUM_IGMP_GROUP&gt;1 when MEMP_MEM_MALLOC is disabled.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more options on IGMP, please check in:&lt;br&gt; - "Key Options" tab within "ICMP/IGMP", "Internal Memory Pool Sizes" and "LOOPIF" Options&lt;br&gt; - "Statistics" tab&lt;br&gt; - "Debug" tab.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DNS" Comment="LWIP_DNS (DNS Module)" Type="list" Group="Protocols Options" DefaultValue="0" TabName="General Settings" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_DNS requires LWIP_UDP enabled." Expression="LWIP_UDP"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, it turns on DNS (Domain Name Server) module. UDP must be available for DNS transport.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more options on DNS, please check in:&lt;br&gt; - "Key Options" tab within "DNS" and "Internal Memory Pool Sizes" Options&lt;br&gt; - "Debug" tab.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DNS" Comment="LWIP_DNS (DNS Module)" Type="list" Group="Protocols Options" DefaultValue="0" TabName="General Settings" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, it turns on DNS (Domain Name Server) module. UDP must be available for DNS transport.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_DNS requires LWIP_UDP enabled.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more options on DNS, please check in:&lt;br&gt; - "Key Options" tab within "DNS" and "Internal Memory Pool Sizes" Options&lt;br&gt; - "Debug" tab.</Description>
    </RefParameter>
    <RefParameter Name="DNS_TABLE_SIZE" Comment="DNS_TABLE_SIZE (DNS Maximum Number of Entries)" Type="Integer" Group="DNS Options" DefaultValue="4" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>DNS maximum number of entries to maintain locally.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="DNS_MAX_NAME_LENGTH" Comment="DNS_MAX_NAME_LENGTH (DNS Maximum Host Name Length)" Type="Integer" Unit="Byte(s)" Group="DNS Options" DefaultValue="256" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>DNS maximum host name length supported in the name table.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="DNS_MAX_SERVERS" Comment="DNS_MAX_SERVERS (Maximum Number of DNS Servers)" Type="Integer" Group="DNS Options" DefaultValue="2" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>The maximum of DNS servers.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="DNS_DOES_NAME_CHECK" Comment="DNS_DOES_NAME_CHECK (DNS Name Checking)" Type="list" Group="DNS Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>DNS do a name checking between the query and the response.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="DNS_MSG_SIZE" Comment="DNS_MSG_SIZE (DNS Message Maximum Size)" Type="Integer" Unit="Byte(s)" Group="DNS Options" DefaultValue="512" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>DNS message max. size. Default value is RFC compliant.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="DNS_LOCAL_HOSTLIST" Comment="DNS_LOCAL_HOSTLIST (DNS Local host-to-address List Implementation)" Type="list" Group="DNS Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use DNS_LOCAL_HOSTLIST requires DNS_LOCAL_HOSTLIST_INIT or DNS_LOCAL_HOSTLIST_IS_DYNAMIC defined." Expression="DNS_LOCAL_HOSTLIST_INIT|DNS_LOCAL_HOSTLIST_IS_DYNAMIC"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, a local host-to-address list is implemented.&lt;br&gt;If enabled, you have to define DNS_LOCAL_HOSTLIST_INIT to {{"host1", 0x123}, {"host2", 0x234}} (an array of structs name/address, where address is an u32_t in network byte order). This additional definition can be added inside a user section within lwipopts.h file&lt;br&gt;Instead, you can also use an external function:  define DNS_LOOKUP_LOCAL_EXTERN(x) extern u32_t my_lookup_function(const char *name) that returns the IP address or INADDR_NONE if not found.</Description>
    </RefParameter>
    <RefParameter Name="DNS_LOCAL_HOSTLIST" Comment="DNS_LOCAL_HOSTLIST (DNS Local host-to-address List Implementation)" Type="list" Group="DNS Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, a local host-to-address list is implemented.&lt;br&gt;If enabled, you have to define DNS_LOCAL_HOSTLIST_INIT to {{"host1", 0x123}, {"host2", 0x234}} (an array of structs name/address, where address is an u32_t in network byte order).&lt;br&gt;Instead, you can also use an external function:  define DNS_LOOKUP_LOCAL_EXTERN(x) extern u32_t my_lookup_function(const char *name) that returns the IP address or INADDR_NONE if not found.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use DNS_LOCAL_HOSTLIST requires DNS_LOCAL_HOSTLIST_INIT or DNS_LOCAL_HOSTLIST_IS_DYNAMIC defined.</Description>
    </RefParameter>
    <RefParameter Name="DNS_LOCAL_HOSTLIST_IS_DYNAMIC" Comment="DNS_LOCAL_HOSTLIST_IS_DYNAMIC (Dynamic DNS Local host-to-address List)" Type="list" Group="DNS Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>If this is turned on, the local host-list can be dynamically changed at runtime.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use DNS_LOCAL_HOSTLIST requires DNS_LOCAL_HOSTLIST_INIT or DNS_LOCAL_HOSTLIST_IS_DYNAMIC defined.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_UDP" Comment="LWIP_UDP (UDP Module)" Type="list" Group="Protocols Options" DefaultValue="1" TabName="General Settings" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_UDP requires MEMP_NUM_UDP_PCB&gt;0 when MEMP_MEM_MALLOC is disabled." Expression="IF(!MEMP_MEM_MALLOC, MEMP_NUM_UDP_PCB &gt; 0, 1)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, it turns on UDP (User Datagram Protocol).&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more options on UDP, please check in:&lt;br&gt; - "Key Options" tab within "UDP", "IP" and "Thread" Options&lt;br&gt; - "Statistics" tab&lt;br&gt; - "Checksum" tab&lt;br&gt; - "Debug" tab.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_UDP" Comment="LWIP_UDP (UDP Module)" Type="list" Group="Protocols Options" DefaultValue="0" TabName="General Settings" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, it turns on UDP (User Datagram Protocol).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_UDP requires MEMP_NUM_UDP_PCB&gt;0 when MEMP_MEM_MALLOC is disabled.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more options on UDP, please check in:&lt;br&gt; - "Key Options" tab within "UDP", "IP" and "Thread" Options&lt;br&gt; - "Statistics" tab&lt;br&gt; - "Checksum" tab&lt;br&gt; - "Debug" tab.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_UDPLITE" Comment="LWIP_UDPLITE (UDP-Lite Module)" Type="list" Group="UDP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_UDPLITE requires LWIP_UDP enabled." Expression="LWIP_UDP"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, it turns on UDP-Lite (Requires LWIP_UDP).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_UDPLITE" Comment="LWIP_UDPLITE (UDP-Lite Module)" Type="list" Group="UDP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, it turns on UDP-Lite (Requires LWIP_UDP).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_UDPLITE requires LWIP_UDP enabled.</Description>
    </RefParameter>
    <RefParameter Name="UDP_TTL" Comment="UDP_TTL (Number of Time-To-Live Used by UDP Packets)" Type="Integer" Unit="Node(s)" Group="UDP Options" DefaultValue="=IP_DEFAULT_TTL" TabName="Key Options" Mode="Advanced" Min="0" Max="255" >
        <Description>Default UDP Time-To-Live value.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETBUF_RECVINFO" Comment="LWIP_NETBUF_RECVINFO (Append Destination and Port Addresses to every Netbuf)" Type="list" Group="UDP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Append destination addr and port to every netbuf.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_UDP_PCB" Comment="MEMP_NUM_UDP_PCB (Number of UDP Connections)" Type="integer" Group="Protocols Options" DefaultValue="4" TabName="General Settings" Mode="Basic" Min="=IF(!MEMP_MEM_MALLOC &amp; LWIP_UDP, 1, 0)" Max="2147483647" >
        <Description>Number of UDP protocol control blocks. One per active UDP connection (requires the LWIP_UDP option enabled).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use MEMP_NUM_UDP_PCB requires MEMP_MEM_MALLOC disabled and LWIP_UDP enabled, it is mandatory to have MEMP_NUM_UDP_PCB&gt;0.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more memory options, see in "Key Options" tab within "Internal Memory Pool Sizes" Options.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_TCP" Comment="LWIP_TCP (TCP Module)" Type="list" Group="Protocols Options" DefaultValue="1" TabName="General Settings" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: If you want to use TCP:&lt;br&gt;- you have to define MEMP_NUM_TCP_PCB&gt;=1 when MEMP_MEM_MALLOC is disabled&lt;br&gt;- TCP_SND_QUEUELEN must fit in an u16_t and must be greater than 1&lt;br&gt; - TCP_WND and must fit in an u16_t and must be greater than 1&lt;br&gt;- TCP_MAXRTX and TCP_SYNMAXRTX must be less or equal to 12." Expression="IF(!MEMP_MEM_MALLOC, MEMP_NUM_TCP_PCB &gt; 0, 1) &amp; (TCP_WND &lt;= 65535) &amp; (TCP_SND_QUEUELEN &lt;= 65535) &amp; (TCP_SND_QUEUELEN &gt; 1) &amp; (TCP_MAXRTX &lt; 13) &amp; (TCP_SYNMAXRTX &lt; 13)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, it turns on TCP.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more TCP options, see in:&lt;br&gt; - "Key Options" tab within "TCP", "IP", "Internal Memory Pool Sizes", "Thread" and "Sequential Layer" Options&lt;br&gt; - "Perf/Checks" tab&lt;br&gt; - "Statistics" tab&lt;br&gt; - "Checksum" tab&lt;br&gt; - "Debug" tab.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_TCP" Comment="LWIP_TCP (TCP Module)" Type="list" Group="Protocols Options" DefaultValue="0" TabName="General Settings" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, it turns on TCP.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: If you want to use TCP:&lt;br&gt;- you have to define MEMP_NUM_TCP_PCB&gt;=1 when MEMP_MEM_MALLOC is disabled&lt;br&gt;- TCP_SND_QUEUELEN must fit in an u16_t and must be greater than 1&lt;br&gt; - TCP_WND and must fit in an u16_t and must be greater than 1&lt;br&gt;- TCP_MAXRTX and TCP_SYNMAXRTX must be less or equal to 12.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more TCP options, see in:&lt;br&gt; - "Key Options" tab within "TCP", "IP", "Internal Memory Pool Sizes", "Thread" and "Sequential Layer" Options&lt;br&gt; - "Perf/Checks" tab&lt;br&gt; - "Statistics" tab&lt;br&gt; - "Checksum" tab&lt;br&gt; - "Debug" tab.</Description>
    </RefParameter>
    <RefParameter Name="TCP_TTL" Comment="TCP_TTL (Number of Time-To-Live Used by TCP Packets)" Type="Integer" Unit="Node(s)" Group="TCP Options" DefaultValue="=IP_DEFAULT_TTL" TabName="Key Options" Mode="Basic" Min="0" Max="255" >
        <Description>Default TCP Time-To-Live value.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_WND" Comment="TCP_WND (TCP Receive Window Maximum Size)" Type="Integer" Unit="Byte(s)" Group="TCP Options" DefaultValue="=4*TCP_MSS" TabName="Key Options" Mode="Basic" Min="=IF(!LWIP_DISABLE_TCP_SANITY_CHECKS &amp; LWIP_TCP, TCP_MSS, 0)" Max="=IF(!LWIP_TCP, 1000000, IF(!MEMP_MEM_MALLOC, IF( (PBUF_POOL_SIZE*(PBUF_POOL_BUFSIZE-(PBUF_LINK_HLEN+20+20))) &lt; 65535, (PBUF_POOL_SIZE*(PBUF_POOL_BUFSIZE-(PBUF_LINK_HLEN+20+20))),65535), 65535))" >
        <Description>Size of a TCP window.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: If you use TCP_WND with LWIP_TCP enabled, the minimum value advised by the stack is 2*TCP_MSS and the maximun must be limited to PBUF_POOL_SIZE*(PBUF_POOL_BUFSIZE-(PBUF_LINK_HLEN+20+20)) or 65535. In case of Max value lower than Min value, please update other dependent parameters like TCP_MSS.</Description>
    </RefParameter>
    <RefParameter Name="TCP_MAXRTX" Comment="TCP_MAXRTX (Maximum Number of Retransmissions of Data Segments)" Type="Integer" Group="TCP Options" DefaultValue="12" TabName="Key Options" Mode="Advanced" Min="0" Max="=IF(!LWIP_TCP, 1000000, 12)" >
        <Description>Maximum number of retransmissions of data segments.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: If LWIP_TCP=1, TCP_MAXRTX must less or equal to 12.</Description>
    </RefParameter>
    <RefParameter Name="TCP_SYNMAXRTX" Comment="TCP_SYNMAXRTX (Maximum Number of Retransmissions of SYN Segments)" Type="Integer" Group="TCP Options" DefaultValue="6" TabName="Key Options" Mode="Advanced" Min="0" Max="=IF(!LWIP_TCP, 1000000, 12)" >
        <Description>Maximum number of retransmissions of SYN segments.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: If LWIP_TCP=1, TCP_SYNMAXRTX must less or equal to 12.</Description>
    </RefParameter>
    <RefParameter Name="TCP_QUEUE_OOSEQ" Comment="TCP_QUEUE_OOSEQ (Allow Out-Of-Order Incoming Packets)" Type="list" Group="TCP Options" DefaultValue="=LWIP_TCP" TabName="Key Options" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>If this parameter is enabled, TCP will queue segments that arrive out of order. Define to 0 if your device is low on memory.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_MSS" Comment="TCP_MSS (Maximum Segment Size)" Type="Integer" Unit="Byte(s)" Group="TCP Options" DefaultValue="536" TabName="Key Options" Mode="Basic" Min="1" Max="=IF( (PBUF_POOL_SIZE * 0.5 * (PBUF_POOL_BUFSIZE - (PBUF_LINK_HLEN + 20 + 20)))>1460,1460,(PBUF_POOL_SIZE * 0.5 * (PBUF_POOL_BUFSIZE - (PBUF_LINK_HLEN + 20 + 20))))" >
        <Description>TCP Maximum segment size. Default value is 536, this is a conservative value, you might want to increase this. For the receive side, this MSS is advertised to the remote side when opening a connection. For the transmit size, this MSS sets an upper limit on the MSS advertised by the remote host.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: With Ethernet, the maximum size of a TCP segment allowed is 1460. To handle corner cases, the maximum value is also limited to: PBUF_POOL_SIZE / 2 * (PBUF_POOL_BUFSIZE - (PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN)).</Description>
    </RefParameter>
    <RefParameter Name="TCP_CALCULATE_EFF_SEND_MSS" Comment="TCP_CALCULATE_EFF_SEND_MSS (Checks TCP_MSS against NETIF MTU Used)" Type="list" Group="TCP Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Maximum size of a segment that TCP really sends, the 'effective send MSS,' MUST be the smaller of the send MSS (which reflects the available reassembly buffer size at the remote host) and the largest size permitted by the IP layer (RFC 1122) Setting this to 1 enables code that checks TCP_MSS against the MTU of the netif used for a connection and limits the MSS if it would be too big otherwise.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_SND_BUF" Comment="TCP_SND_BUF (TCP Sender Buffer Space)" Type="Integer" Unit="Byte(s)" Group="TCP Options" DefaultValue="=2*TCP_MSS" TabName="Key Options" Mode="Basic" Min="=IF(!LWIP_DISABLE_TCP_SANITY_CHECKS &amp; LWIP_TCP, TCP_MSS*2, 0)" Max="2147483647" >
        <Description>TCP sender buffer space (bytes). To achieve good performance.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use TCP_SND_BUF requires TCP enabled. When LWIP_TCP is enabled, TCP_SND_BUF must be at least as much as (2 * TCP_MSS) for things to work smoothly.&lt;br&gt;If you know what you are doing, define LWIP_DISABLE_TCP_SANITY_CHECKS to 1 to avoid Min value limitation.&lt;br&gt;TCP_SND_BUF value is also used to set value of TCP_SND_QUEUELEN and TCP_SNDLOWAT.</Description>
    </RefParameter>
    <RefParameter Name="TCP_SND_QUEUELEN" Comment="TCP_SND_QUEUELEN (Number of Packet Buffers Allowed for TCP Sender)" Type="Integer" Unit="Byte(s)" Group="TCP Options" DefaultValue="=((4*TCP_SND_BUF) + (TCP_MSS - 1))/TCP_MSS" TabName="Key Options" Mode="Basic" Min="=MAX(IF(LWIP_TCP, 2, 0), IF(!LWIP_DISABLE_TCP_SANITY_CHECKS &amp; LWIP_TCP,2*TCP_SND_BUF/TCP_MSS,0))" Max="=IF(LWIP_TCP, 65535, 2147483647)" >
        <Description>TCP sender buffer space (pbufs).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: TCP_SND_QUEUELEN must be at least as much as (2*TCP_SND_BUF/TCP_MSS) if LWIP_TCP is enabled and LWIP_DISABLE_TCP_SANITY_CHECKS disabled.&lt;br&gt;TCP_SND_QUEUELEN must be at least 2 for no-copy TCP writes to work, if LWIP_TCP is enabled.&lt;br&gt;TCP_SND_QUEUELEN must fit in an u16_t, if LWIP_TCP is enabled.</Description>
    </RefParameter>
    <RefParameter Name="TCP_SNDLOWAT" Comment="TCP_SNDLOWAT (TCP Writable Space)" Type="Integer" Unit="Byte(s)" Group="TCP Options" DefaultValue="=MIN(MAX(TCP_SND_BUF/2, (2*TCP_MSS)+1), TCP_SND_BUF-1)" TabName="Key Options" Mode="Advanced" Min="0" Max="=IF(!LWIP_DISABLE_TCP_SANITY_CHECKS &amp; LWIP_TCP, TCP_SND_BUF-1, 2147483647)" >
        <Description>TCP writable space (bytes). This must be less than TCP_SND_BUF. It is the amount of space which must be available in the TCP snd_buf for select to return writable (combined with TCP_SNDQUEUELOWAT).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: TCP_SNDLOWAT is forced to be less than TCP_SND_BUF when LWIP_TCP is enabled and LWIP_DISABLE_TCP_SANITY_CHECKS is disabled.&lt;br&gt;If you know what you are doing, define LWIP_DISABLE_TCP_SANITY_CHECKS to 1 to disable the Max value limitation.</Description>
    </RefParameter>
    <RefParameter Name="TCP_SNDQUEUELOWAT" Comment="TCP_SNDQUEUELOWAT (TCP Writable Buffers)" Type="Integer" Unit="Byte(s)" Group="TCP Options" DefaultValue="=MAX(TCP_SND_QUEUELEN/2, 5)" TabName="Key Options" Mode="Advanced" Min="0" Max="=IF(!LWIP_DISABLE_TCP_SANITY_CHECKS &amp; LWIP_TCP, TCP_SND_QUEUELEN-1, 1000000)" >
        <Description>TCP writable bufs (pbuf count). This must be less than TCP_SND_QUEUELEN. If the number of pbufs queued on a pcb drops below this number, select returns writable (combined with TCP_SNDLOWAT).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: TCP_SNDQUEUELOWAT must be less than TCP_SND_QUEUELEN when LWIP_TCP is enabled and LWIP_DISABLE_TCP_SANITY_CHECKS is disabled.&lt;br&gt; If you know what you are doing, define LWIP_DISABLE_TCP_SANITY_CHECKS to 1 to disable the Max value limitation.</Description>
    </RefParameter>
    <RefParameter Name="TCP_OOSEQ_MAX_BYTES" Comment="TCP_OOSEQ_MAX_BYTES (Maximum Number of Bytes Queued on ooseq per Pcb)" Type="Integer" Unit="Byte(s)" Group="TCP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Maximum number of bytes queued on ooseq per pcb. Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ=0.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_OOSEQ_MAX_PBUFS" Comment="TCP_OOSEQ_MAX_PBUFS (Maximum Number of Pbufs Queued on ooseq per Pcb)" Type="Integer" Group="TCP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Maximum number of pbufs queued on ooseq per pcb. Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ=0.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_LISTEN_BACKLOG" Comment="TCP_LISTEN_BACKLOG (Backlog for TCP Listen Pcb)" Type="list" Group="TCP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use TCP_LISTEN_BACKLOG requires LWIP_TCP, and TCP_DEFAULT_LISTEN_BACKLOG must be less than 256 and greater or equal than 0." Expression="IF(LWIP_TCP, (TCP_DEFAULT_LISTEN_BACKLOG &gt;= 0) &amp; (TCP_DEFAULT_LISTEN_BACKLOG &lt;= 255), 1)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, the backlog option for tcp listen pcb is set.</Description>
    </RefParameter>
    <RefParameter Name="TCP_LISTEN_BACKLOG" Comment="TCP_LISTEN_BACKLOG (Backlog for TCP Listen Pcb)" Type="list" Group="TCP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, the backlog option for tcp listen pcb is set.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use TCP_LISTEN_BACKLOG requires LWIP_TCP, and TCP_DEFAULT_LISTEN_BACKLOG must be less than 256 and greater or equal than 0.</Description>
    </RefParameter>
    <RefParameter Name="TCP_DEFAULT_LISTEN_BACKLOG" Comment="TCP_DEFAULT_LISTEN_BACKLOG (Maximum Allowed Backlog for TCP Listen Netconns)" Type="integer" Unit="Byte(s)" Group="TCP Options" DefaultValue="255" TabName="Key Options" Mode="Advanced" Min="0" Max="=IF(LWIP_TCP &amp; TCP_LISTEN_BACKLOG, 255, 1000000)" >
        <Description>Maximum allowed backlog for TCP listen netconns. This backlog is used unless another is explicitly specified. 0xff is the maximum (u8_t).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Link with LWIP_TCP and TCP_LISTEN_BACKLOG parameters: when LWIP_TCP and TCP_LISTEN_BACKLOG are enabled, TCP_DEFAULT_LISTEN_BACKLOG must less than 256.</Description>
    </RefParameter>
    <RefParameter Name="TCP_OVERSIZE" Comment="TCP_OVERSIZE (Maximum Number of Bytes that tcp_write)" Type="list" Group="TCP Options" DefaultValue="TCP_MSS" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="128 Bytes" Value="128"/>
        <PossibleValue Comment="TCP_MSS Bytes" Value="TCP_MSS"/>
        <PossibleValue Comment="(TCP_MSS/4) Bytes" Value="(TCP_MSS/4)"/>
        <Description>Maximum number of bytes that tcp_write may allocate ahead of time in an attempt to create shorter pbuf chains for transmission. The meaningful range is 0 to TCP_MSS.&lt;br&gt;Some suggested values are:&lt;br&gt;- 0: Disable oversized allocation. Each tcp_write() allocates a new pbuf (old behaviour)&lt;br&gt;- 1: Allocate size-aligned pbufs with minimal excess. Use this if your scatter-gather DMA requires aligned fragments&lt;br&gt;- 128: Limit the pbuf/memory overhead to 20%&lt;br&gt;- TCP_MSS: Try to create unfragmented TCP packets&lt;br&gt;- TCP_MSS/4: Try to create 4 fragments or less per TCP packet.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: If TCP_OVERSIZE&gt;0 LWIP_NETIF_TX_SINGLE_PBUF can be used.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_TCP_TIMESTAMPS" Comment="LWIP_TCP_TIMESTAMPS (TCP Iimestamp)" Type="list" Group="TCP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Support the TCP timestamp option.&lt;br&gt;The timestamp option is currently only used to help remote hosts, it is not really used locally. Therefore, it is only enabled when a TS option is received in the initial SYN packet from a remote host.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_WND_UPDATE_THRESHOLD" Comment="TCP_WND_UPDATE_THRESHOLD (TCP Window Update Threshold)" Type="Integer" Unit="Byte(s)" Group="TCP Options" DefaultValue="=MIN(TCP_WND/4,TCP_MSS*4)" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Difference in window to trigger an explicit window update.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: TCP_WND_UPDATE_THRESHOLD is the min between (TCP_WND / 4) and (TCP_MSS * 4).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_EVENT_API" Comment="LWIP_EVENT_API (LwIP Event API)" Type="list" Group="TCP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: One and exactly one of LWIP_EVENT_API and LWIP_CALLBACK_API has to be enabled when LWIP_TCP is enabled." Expression="LWIP_TCP"/>
        <PossibleValue Comment="Disabled" Value="0" Semaphore="S_LWIP_CALLBACK_API_OFF"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>LWIP_EVENT_API=1: The user defines lwip_tcp_event() to receive all events (accept, sent, etc) that happen in the system.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_EVENT_API" Comment="LWIP_EVENT_API (LwIP Event API)" Type="list" Group="TCP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>LWIP_EVENT_API=1: The user defines lwip_tcp_event() to receive all events (accept, sent, etc) that happen in the system.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: One and exactly one of LWIP_EVENT_API and LWIP_CALLBACK_API has to be enabled when LWIP_TCP is enabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_CALLBACK_API" Comment="LWIP_CALLBACK_API (LwIP CallBack API)" Type="list" Group="TCP Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: One and exactly one of LWIP_EVENT_API and LWIP_CALLBACK_API has to be enabled when LWIP_TCP is enabled." Expression="IF(LWIP_TCP, S_LWIP_CALLBACK_API_OFF, 0)"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>LWIP_CALLBACK_API=1: The PCB callback function is called directly for the event. This is the default.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_CALLBACK_API" Comment="LWIP_CALLBACK_API (LwIP CallBack API)" Type="list" Group="TCP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>LWIP_CALLBACK_API=1: The PCB callback function is called directly for the event. This is the default.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: One and exactly one of LWIP_EVENT_API and LWIP_CALLBACK_API has to be enabled when LWIP_TCP is enabled.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_NUM_TCP_PCB" Comment="MEMP_NUM_TCP_PCB (Number of TCP Connections)" Type="integer" Group="Protocols Options" DefaultValue="5" TabName="General Settings" Mode="Basic" Min="=IF(!MEMP_MEM_MALLOC &amp; LWIP_TCP, 1, 0)" Max="2147483647" >
        <Description>Number of simultatenously active TCP connections (requires the LWIP_TCP option enabled).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use MEMP_NUM_TCP_PCB requires MEMP_MEM_MALLOC disabled and LWIP_TCP enabled, it is mandatory to have MEMP_NUM_TCP_PCB&gt;0.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: For more memory options, see in "Key Options" tab within "Internal Memory Pool Sizes" Options.</Description>
    </RefParameter>
    <RefParameter Name="PBUF_LINK_HLEN" Comment="PBUF_LINK_HLEN (Number of Bytes for Link Level Header)" Type="Integer" Unit="Byte(s)" Group="Pbuf Options" DefaultValue="=14+ETH_PAD_SIZE" TabName="Key Options" Mode="Advanced" Min="14" Max="=PBUF_POOL_BUFSIZE-PBUF_IP_HLEN-PBUF_TRANSPORT_HLEN-1" >
        <Description>Number of bytes that should be allocated for a link level header. The default is 14, the standard value for Ethernet.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: To handle corner cases, PBUF_LINK_HLEN must be less than PBUF_POOL_BUFSIZE - 40 (IP_HLEN + PBUF_TRANSPORT_HLEN) and greater or equal than 14.</Description>
    </RefParameter>
    <RefParameter Name="PBUF_POOL_BUFSIZE" Comment="PBUF_POOL_BUFSIZE (Size of each pbuf in the pbuf pool)" Type="Integer" Unit="Byte(s)" Group="Pbuf Options" DefaultValue="=536+40+14+2" TabName="Key Options" Mode="Basic" Min="=55" Max="2147483647" >
        <Description>Size of each pbuf in the pbuf pool. The default is designed to accomodate single full size TCP frame in one pbuf, including TCP_MSS, IP header, and link header.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: To handle corner cases, PBUF_POOL_BUFSIZE should be greater or equal than 55 (15 + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN).</Description>
    </RefParameter>
    <RefParameter Name="PBUF_IP_HLEN" Comment="PBUF_IP_HLEN (PBUF_IP_HLEN)" Type="Integer" Group="Pbuf Options" DefaultValue="20" Min="0" Max="65535" Visible="false"/>
    <RefParameter Name="PBUF_TRANSPORT_HLEN" Comment="PBUF_TRANSPORT_HLEN (PBUF_TRANSPORT_HLEN)" Type="Integer" Group="Pbuf Options" DefaultValue="20" Min="0" Max="65535" Visible="false"/>
    <RefParameter Name="LWIP_NETIF_HOSTNAME" Comment="LWIP_NETIF_HOSTNAME (NETIF Hostname)" Type="list" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>This option uses DHCP_OPTION_HOSTNAME with netif's hostname field.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_API" Comment="LWIP_NETIF_API (Network Interfaces API)" Type="list" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_NETIF_API requires NO_SYS=0" Expression="!NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is set, netif api is supported (in netifapi.c).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_API" Comment="LWIP_NETIF_API (NETIF API)" Type="list" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is not set, netif api is not supported (in netifapi.c).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Since NO_SYS=1, you cannot use NETIF API.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_STATUS_CALLBACK" Comment="LWIP_NETIF_STATUS_CALLBACK (Callback Function on Interface Status Changes)" Type="list" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Set parameter allow to support a callback function whenever an interface changes its up/down status (i.e., due to DHCP IP acquisition).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_LINK_CALLBACK" Comment="LWIP_NETIF_LINK_CALLBACK (Callback Function on Interface Link Changes)" Type="list" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Set parameter allow to support a callback function from an interface whenever the link changes (i.e., link down).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_REMOVE_CALLBACK" Comment="LWIP_NETIF_REMOVE_CALLBACK (Callback Function on Interface Removal)" Type="list" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Set parameter allow to support a callback function that is called when a netif has been removed.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_HWADDRHINT" Comment="LWIP_NETIF_HWADDRHINT (Cache Link-layer-address Hints)" Type="list" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Set parameter allow to support cache link-layer-address hints (e.g. table indices) in struct netif. TCP and UDP can make use of this to prevent scanning the ARP table for every sent packet. While this is faster for big ARP tables or many concurrent connections, it might be counterproductive if you have a tiny ARP table or if there never are concurrent connections.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_LOOPBACK" Comment="LWIP_NETIF_LOOPBACK (NETIF Loopback)" Type="list" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Support sending packets with a destination IP address equal to the netif IP address, looping them back up the stack.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_LOOPBACK_MAX_PBUFS" Comment="LWIP_LOOPBACK_MAX_PBUFS (Maximum Number of Pbufs for Loopback Sending)" Type="Integer" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Maximum number of pbufs on queue for loopback sending for each netif (0 = disabled).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_LOOPBACK_MULTITHREADING" Comment="LWIP_NETIF_LOOPBACK_MULTITHREADING (Multi-threading)" Type="list" Group="Network Interfaces Options" DefaultValue="=!NO_SYS" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: LWIP_NETIF_LOOPBACK_MULTITHREADING is enabled when NO_SYS=0." Expression="!NO_SYS"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>This option indicates whether threading is enabled in the system, as netifs must change how they behave depending on this setting for the LWIP_NETIF_LOOPBACK option to work.&lt;br&gt;Setting this is needed to avoid reentering non-reentrant functions like tcp_input().&lt;br&gt;LWIP_NETIF_LOOPBACK_MULTITHREADING=1: Indicates that the user is using a multithreaded environment like tcpip.c. In this case, netif-&gt;input() is called directly.&lt;br&gt;LWIP_NETIF_LOOPBACK_MULTITHREADING=0: Indicates a polling (or NO_SYS=1) setup. The packets are put on a list and netif_poll() must be called in the main application loop.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_LOOPBACK_MULTITHREADING" Comment="LWIP_NETIF_LOOPBACK_MULTITHREADING (Multi-threading)" Type="list" Group="Network Interfaces Options" DefaultValue="=!NO_SYS" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>This option indicates whether threading is enabled in the system, as netifs must change how they behave depending on this setting for the LWIP_NETIF_LOOPBACK option to work.&lt;br&gt;Setting this is needed to avoid reentering non-reentrant functions like tcp_input().&lt;br&gt;LWIP_NETIF_LOOPBACK_MULTITHREADING=1: Indicates that the user is using a multithreaded environment like tcpip.c. In this case, netif-&gt;input() is called directly.&lt;br&gt;LWIP_NETIF_LOOPBACK_MULTITHREADING=0: Indicates a polling (or NO_SYS=1) setup. The packets are put on a list and netif_poll() must be called in the main application loop.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: LWIP_NETIF_LOOPBACK_MULTITHREADING is disabled when NO_SYS=1.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_TX_SINGLE_PBUF" Comment="LWIP_NETIF_TX_SINGLE_PBUF (Put Data into One Single Pbuf)" Type="list" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_NETIF_TX_SINGLE_PBUF requires TCP_OVERSIZE&gt;0 and IP_FRAG_USES_STATIC_BUF disabled." Expression="IF(LWIP_TCP, TCP_OVERSIZE &gt; 0, 1) &amp; IF(IP_FRAG, !IP_FRAG_USES_STATIC_BUF, 1)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, lwIP tries to put all data to be sent into one single pbuf. This is for compatibility with DMA-enabled MACs that do not support scatter-gather. Beware that this might involve CPU-memcpy before transmitting that would not be needed without this flag! Use this only if you need to!&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: TCP and IP-frag do not work with this yet.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETIF_TX_SINGLE_PBUF" Comment="LWIP_NETIF_TX_SINGLE_PBUF (Put Data into One Single Pbuf)" Type="list" Group="Network Interfaces Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, lwIP tries to put all data to be sent into one single pbuf. This is for compatibility with DMA-enabled MACs that do not support scatter-gather. Beware that this might involve CPU-memcpy before transmitting that would not be needed without this flag! Use this only if you need to!&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: TCP and IP-frag do not work with this yet.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_NETIF_TX_SINGLE_PBUF requires TCP_OVERSIZE&gt;0 and IP_FRAG_USES_STATIC_BUF disabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_HAVE_LOOPIF" Comment="LWIP_HAVE_LOOPIF (Loop Interface)" Type="list" Group="LOOPIF Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Support loop interface (127.0.0.1) and loopif.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_HAVE_SLIPIF" Comment="LWIP_HAVE_SLIPIF (Slip Interface)" Type="list" Group="SLIPIF options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Support Serial Line Internet Protocol (SLIP) interface and slipif.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCPIP_THREAD_NAME" Comment="TCPIP_THREAD_NAME (TCPIP Thread Name)" Type="StringRW" Group="Thread Options" DefaultValue="&quot;tcpip_thread&quot;" TabName="Key Options" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: TCPIP_THREAD_NAME is used only if NO_SYS=0." Expression="!NO_SYS"/>
        <Description>Name assigned to the main tcpip thread.</Description>
    </RefParameter>
    <RefParameter Name="TCPIP_THREAD_NAME" Comment="TCPIP_THREAD_NAME (TCPIP Thread Name)" Type="StringRW" Group="Thread Options" DefaultValue="&quot;tcpip_thread&quot;" TabName="Key Options" Mode="Basic" Visible="false">
        <Description>Name assigned to the main tcpip thread.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: TCPIP_THREAD_NAME is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="TCPIP_THREAD_STACKSIZE" Comment="TCPIP_THREAD_STACKSIZE (TCPIP Thread Stack Size)" Type="Integer" Unit="Word(s)" Group="Thread Options" DefaultValue="1024" TabName="Key Options" Mode="Basic" Min="=FREERTOS:configMINIMAL_STACK_SIZE" Max="=FREERTOS:MAX_SIZE_IN_USE" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: TCPIP_THREAD_STACKSIZE is used only if NO_SYS=0.&lt;br&gt;&lt;b&gt;Default Preset:&lt;/b&gt; This parameter has been set with a non zero value to avoid functional issue with FREERTOS.&lt;br&gt;Up to user to fine tune this parameter value considering all dependencies.&lt;br&gt;&lt;b&gt;Min value:&lt;/b&gt; The Min TCPIP Thread Stack Size value is the Min Stack Size of FREERTOS.&lt;br&gt;&lt;b&gt;Max value:&lt;/b&gt; The Max TCPIP Thread Stack Size value is the Total Heap Size of FREERTOS divided by 4." Expression="!NO_SYS"/>
        <Description>Stack size used by the main tcpip thread (Word 32 bits). The stack size value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.</Description>
    </RefParameter>
    <RefParameter Name="TCPIP_THREAD_STACKSIZE" Comment="TCPIP_THREAD_STACKSIZE (TCPIP Thread Stack Size)" Type="Integer" Unit="Byte(s)" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" Visible="false">
        <Description>Stack size used by the main tcpip thread. The stack size value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: TCPIP_THREAD_STACKSIZE is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="TCPIP_THREAD_PRIO" Comment="TCPIP_THREAD_PRIO (TCPIP Thread Priority Level)" Type="Integer" Group="Thread Options" DefaultValue="3" TabName="Key Options" Mode="Basic" Min="0" Max="=FREERTOS:configMAX_PRIORITIES-1" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: TCPIP_THREAD_PRIO is used only if NO_SYS=0.&lt;br&gt;&lt;b&gt;Default Preset:&lt;/b&gt; The default value is aligned on FreeRTOS default Task Priority.&lt;br&gt;&lt;b&gt;Max value:&lt;/b&gt; The Max of TCPIP Thread Priority strictly less than the current FREERTOS MAX_PRIORITIES parameter." Expression="!NO_SYS"/>
        <Description>Priority assigned to the main tcpip thread. The priority value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.</Description>
    </RefParameter>
    <RefParameter Name="TCPIP_THREAD_PRIO" Comment="TCPIP_THREAD_PRIO (TCPIP Thread Priority Level)" Type="Integer" Group="Thread Options" DefaultValue="1" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" Visible="false">
        <Description>Priority assigned to the main tcpip thread. The priority value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: TCPIP_THREAD_PRIO is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="TCPIP_MBOX_SIZE" Comment="TCPIP_MBOX_SIZE (TCPIP Mailbox Size)" Type="Integer" Unit="Byte(s)" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: TCPIP_MBOX_SIZE is used only if NO_SYS=0." Expression="!NO_SYS"/>
        <Description>Mailbox size for the tcpip thread messages. The queue size value itself is platform-dependent, but is passed to sys_mbox_new() when tcpip_init is called.</Description>
    </RefParameter>
    <RefParameter Name="TCPIP_MBOX_SIZE" Comment="TCPIP_MBOX_SIZE (TCPIP Mailbox Size)" Type="Integer" Unit="Byte(s)" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" Visible="false">
        <Description>Mailbox size for the tcpip thread messages. The queue size value itself is platform-dependent, but is passed to sys_mbox_new() when tcpip_init is called.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: TCPIP_MBOX_SIZE is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="SLIPIF_THREAD_NAME" Comment="SLIPIF_THREAD_NAME (TCPIP SLIPIF Loop Thread Name)" Type="StringRW" Group="Thread Options" DefaultValue="&quot;slipif_loop&quot;" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: SLIPIF_THREAD_NAME is used only if NO_SYS=0." Expression="!NO_SYS"/>
        <Description>Name assigned to the slipif_loop thread.</Description>
    </RefParameter>
    <RefParameter Name="SLIPIF_THREAD_NAME" Comment="SLIPIF_THREAD_NAME (TCPIP SLIPIF Loop Thread Name)" Type="StringRW" Group="Thread Options" DefaultValue="&quot;slipif_loop&quot;" TabName="Key Options" Mode="Advanced" Visible="false">
        <Description>Name assigned to the slipif_loop thread.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: SLIPIF_THREAD_NAME is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="SLIPIF_THREAD_STACKSIZE" Comment="SLIPIF_THREAD_STACKSIZE (SLIPIF Thread Stack Size)" Type="Integer" Unit="Word(s)" Group="Thread Options" DefaultValue="1024" TabName="Key Options" Mode="Advanced" Min="=IF(LWIP_HAVE_SLIPIF,FREERTOS:configMINIMAL_STACK_SIZE,0)" Max="=IF(LWIP_HAVE_SLIPIF,FREERTOS:MAX_SIZE_IN_USE,$RamSize*1024)" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: SLIPIF_THREAD_STACKSIZE is used only if NO_SYS=0.&lt;br&gt;&lt;b&gt;Default Preset:&lt;/b&gt; This parameter has been set with a non zero value to avoid functional issue with FREERTOS.&lt;br&gt;Up to user to fine tune this parameter value considering all dependencies.&lt;br&gt;&lt;b&gt;Min value:&lt;/b&gt; If LWIP_HAVE_SLIPIF is enabled, the Min SLIPIF Thread Stack Size value is the Min Stack Size of FREERTOS, otherwise it is zero.&lt;br&gt;&lt;b&gt;Max value:&lt;/b&gt; If LWIP_HAVE_SLIPIF is enabled, the Max SLIPIF Thread Stack Size value is the Total Heap Size of FREERTOS divided by 4, otherwise it is the RAM size multiplied by 1024." Expression="!NO_SYS"/>
        <Description>Stack size used by the slipif_loop thread. The stack size value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.</Description>
    </RefParameter>
    <RefParameter Name="SLIPIF_THREAD_STACKSIZE" Comment="SLIPIF_THREAD_STACKSIZE (SLIPIF Thread Stack Size)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" Visible="false">
        <Description>Stack size used by the slipif_loop thread. The stack size value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: SLIPIF_THREAD_STACKSIZE is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="SLIPIF_THREAD_PRIO" Comment="SLIPIF_THREAD_PRIO (SLIPIF Thread Priority Level)" Type="Integer" Group="Thread Options" DefaultValue="3" TabName="Key Options" Mode="Advanced" Min="0" Max="=IF(LWIP_HAVE_SLIPIF,FREERTOS:configMAX_PRIORITIES-1,254)" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: SLIPIF_THREAD_PRIO is used only if NO_SYS=0.&lt;br&gt;&lt;b&gt;Default Preset:&lt;/b&gt; The default value is aligned on FreeRTOS default Task Priority.&lt;br&gt;&lt;b&gt;Max value:&lt;/b&gt; If LWIP_HAVE_SLIPIF is enabled, the Max of SLIPIF Thread Priority strictly less than the current FREERTOS MAX_PRIORITIES parameter, otherwise it is 254." Expression="!NO_SYS"/>
        <Description>Priority assigned to the slipif_loop thread. The priority value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.</Description>
    </RefParameter>
    <RefParameter Name="SLIPIF_THREAD_PRIO" Comment="SLIPIF_THREAD_PRIO (SLIPIF Thread Priority Level)" Type="Integer" Group="Thread Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" Visible="false">
        <Description>Priority assigned to the slipif_loop thread. The priority value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: SLIPIF_THREAD_PRIO is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="PPP_THREAD_NAME" Comment="PPP_THREAD_NAME (PPP Thread Name)" Type="StringRW" Group="Thread Options" DefaultValue="&quot;pppInputThread&quot;" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: PPP_THREAD_NAME is used only if NO_SYS=0." Expression="!NO_SYS"/>
        <Description>Name assigned to the pppInputThread.</Description>
    </RefParameter>
    <RefParameter Name="PPP_THREAD_NAME" Comment="PPP_THREAD_NAME (PPP Thread Name)" Type="StringRW" Group="Thread Options" DefaultValue="&quot;pppInputThread&quot;" TabName="Key Options" Mode="Advanced" Visible="false">
        <Description>Name assigned to the pppInputThread.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: PPP_THREAD_NAME is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="PPP_THREAD_STACKSIZE" Comment="PPP_THREAD_STACKSIZE (PPP Thread Stack Size)" Type="Integer" Unit="Word(s)" Group="Thread Options" DefaultValue="1024" TabName="Key Options" Mode="Advanced" Min="=IF(PPP_SUPPORT,FREERTOS:configMINIMAL_STACK_SIZE,0)" Max="=IF(PPP_SUPPORT,FREERTOS:MAX_SIZE_IN_USE,$RamSize*1024)" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: PPP_THREAD_STACKSIZE is used only if NO_SYS=0.&lt;br&gt;&lt;b&gt;Default Preset:&lt;/b&gt; This parameter has been set with a non zero value to avoid functional issue with FREERTOS.&lt;br&gt;Up to user to fine tune this parameter value considering all dependencies.&lt;br&gt;&lt;b&gt;Min value:&lt;/b&gt; If PPP_SUPPORT is enabled, the Min PPP Thread Stack Size value is the Min Stack Size of FREERTOS, otherwise it is zero.&lt;br&gt;&lt;b&gt;Max value:&lt;/b&gt; If PPP_SUPPORT is enabled, the Max PPP Thread Stack Size value is the Total Heap Size of FREERTOS divided by 4, otherwise it is the RAM size multiplied by 1024." Expression="!NO_SYS"/>
        <Description>Stack size used by the pppInputThread. The stack size value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.</Description>
    </RefParameter>
    <RefParameter Name="PPP_THREAD_STACKSIZE" Comment="PPP_THREAD_STACKSIZE (PPP Thread Stack Size)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" Visible="false">
        <Description>Stack size used by the pppInputThread. The stack size value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: PPP_THREAD_STACKSIZE is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="PPP_THREAD_PRIO" Comment="PPP_THREAD_PRIO (PPP Thread Priority Level)" Type="Integer" Group="Thread Options" DefaultValue="3" TabName="Key Options" Mode="Advanced" Min="0" Max="=IF(PPP_SUPPORT,FREERTOS:configMAX_PRIORITIES-1,254)" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: PPP_THREAD_PRIO is used only if NO_SYS=0.&lt;br&gt;&lt;b&gt;Default Preset:&lt;/b&gt; The default value is aligned on FreeRTOS default Task Priority.&lt;br&gt;&lt;b&gt;Max value:&lt;/b&gt; If PPP_SUPPORT is enabled, the Max of PPP Thread Priority strictly less than the current FREERTOS MAX_PRIORITIES parameter, otherwise it is 254." Expression="!NO_SYS"/>
        <Description>Priority assigned to the pppInputThread. The priority value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.</Description>
    </RefParameter>
    <RefParameter Name="PPP_THREAD_PRIO" Comment="PPP_THREAD_PRIO (PPP Thread Priority Level)" Type="Integer" Group="Thread Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" Visible="false">
        <Description>Priority assigned to the pppInputThread. The priority value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: PPP_THREAD_PRIO is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_THREAD_NAME" Comment="DEFAULT_THREAD_NAME (Default LwIP Thread Name)" Type="StringRW" Group="Thread Options" DefaultValue="&quot;lwIP&quot;" TabName="Key Options" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_THREAD_NAME is used only if NO_SYS=0." Expression="!NO_SYS"/>
        <Description>Name assigned to any other lwIP thread.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_THREAD_NAME" Comment="DEFAULT_THREAD_NAME (Default LwIP Thread Name)" Type="StringRW" Group="Thread Options" DefaultValue="&quot;lwIP&quot;" TabName="Key Options" Mode="Basic" Visible="false">
        <Description>Name assigned to any other lwIP thread.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_THREAD_NAME is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_THREAD_STACKSIZE" Comment="DEFAULT_THREAD_STACKSIZE (Default LwIP Thread Stack Size)" Type="Integer" Unit="Word(s)" Group="Thread Options" DefaultValue="1024" TabName="Key Options" Mode="Basic" Min="=FREERTOS:configMINIMAL_STACK_SIZE" Max="=FREERTOS:MAX_SIZE_IN_USE" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_THREAD_STACKSIZE is used only if NO_SYS=0.&lt;br&gt;&lt;b&gt;Default Preset:&lt;/b&gt; This parameter has been set with a non zero value to avoid functional issue with FREERTOS.&lt;br&gt;Up to user to fine tune this parameter value considering all dependencies.&lt;br&gt;&lt;b&gt;Min value:&lt;/b&gt; The Min Default Thread Stack Size value is the Min Stack Size of FREERTOS.&lt;br&gt;&lt;b&gt;Max value:&lt;/b&gt; The Max Default Thread Stack Size value is the Total Heap Size of FREERTOS divided by 4." Expression="!NO_SYS"/>
        <Description>Stack size used by any other lwIP thread.&lt;br&gt;The stack size value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_THREAD_STACKSIZE" Comment="DEFAULT_THREAD_STACKSIZE (Default LwIP Thread Stack Size)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" Visible="false">
        <Description>Stack size used by any other lwIP thread.&lt;br&gt;The stack size value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_THREAD_STACKSIZE is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_THREAD_PRIO" Comment="DEFAULT_THREAD_PRIO (Default LwIP Thread Priority Level)" Type="Integer" Group="Thread Options" DefaultValue="3" TabName="Key Options" Mode="Basic" Min="0" Max="=FREERTOS:configMAX_PRIORITIES-1" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_THREAD_PRIO is used only if NO_SYS=0.&lt;br&gt;&lt;b&gt;Default Preset:&lt;/b&gt; The default value is aligned on FreeRTOS default Task Priority.&lt;br&gt;&lt;b&gt;Max value:&lt;/b&gt; The Max of Default Thread Priority strictly less than the current FREERTOS MAX_PRIORITIES parameter." Expression="!NO_SYS"/>
        <Description>Priority assigned to any other lwIP thread.&lt;br&gt;The priority value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_THREAD_PRIO" Comment="DEFAULT_THREAD_PRIO (Default LwIP Thread Priority Level)" Type="Integer" Group="Thread Options" DefaultValue="1" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" Visible="false">
        <Description>Priority assigned to any other lwIP thread.&lt;br&gt;The priority value itself is platform-dependent, but is passed to sys_thread_new() when the thread is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_THREAD_PRIO is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_RAW_RECVMBOX_SIZE" Comment="DEFAULT_RAW_RECVMBOX_SIZE (Default Mailbox Size on a NETCONN Raw)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_RAW_RECVMBOX_SIZE is used only if NO_SYS=0." Expression="!NO_SYS"/>
        <Description>Mailbox size for the incoming packets on a NETCONN_RAW.&lt;br&gt;The queue size value itself is platform-dependent, but is passed to sys_mbox_new() when the recvmbox is created.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_RAW_RECVMBOX_SIZE" Comment="DEFAULT_RAW_RECVMBOX_SIZE (Default Mailbox Size on a NETCONN Raw)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" Visible="false">
        <Description>Mailbox size for the incoming packets on a NETCONN_RAW.&lt;br&gt;The queue size value itself is platform-dependent, but is passed to sys_mbox_new() when the recvmbox is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_RAW_RECVMBOX_SIZE is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_UDP_RECVMBOX_SIZE" Comment="DEFAULT_UDP_RECVMBOX_SIZE (Default Mailbox Size on a NETCONN UDP)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_UDP_RECVMBOX_SIZE is used only if NO_SYS=0." Expression="!NO_SYS"/>
        <Description>Mailbox size for the incoming packets on a NETCONN_UDP.&lt;br&gt;The queue size value itself is platform-dependent, but is passed to sys_mbox_new() when the recvmbox is created.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_UDP_RECVMBOX_SIZE" Comment="DEFAULT_UDP_RECVMBOX_SIZE (Default Mailbox Size on a NETCONN UDP)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" Visible="false">
        <Description>Mailbox size for the incoming packets on a NETCONN_UDP.&lt;br&gt;The queue size value itself is platform-dependent, but is passed to sys_mbox_new() when the recvmbox is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_UDP_RECVMBOX_SIZE is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_TCP_RECVMBOX_SIZE" Comment="DEFAULT_TCP_RECVMBOX_SIZE (Default Mailbox Size on a NETCONN TCP)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_TCP_RECVMBOX_SIZE is used only if NO_SYS=0." Expression="!NO_SYS"/>
        <Description>Mailbox size for the incoming packets on a NETCONN_TCP.&lt;br&gt;The queue size value itself is platform-dependent, but is passed to sys_mbox_new() when the recvmbox is created.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_TCP_RECVMBOX_SIZE" Comment="DEFAULT_TCP_RECVMBOX_SIZE (Default Mailbox Size on a NETCONN TCP)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" Visible="false">
        <Description>Mailbox size for the incoming packets on a NETCONN_TCP.&lt;br&gt;The queue size value itself is platform-dependent, but is passed to sys_mbox_new() when the recvmbox is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_TCP_RECVMBOX_SIZE is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_ACCEPTMBOX_SIZE" Comment="DEFAULT_ACCEPTMBOX_SIZE (Default Mailbox Size for Incoming Connections)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_ACCEPTMBOX_SIZE is used only if NO_SYS=0." Expression="!NO_SYS"/>
        <Description>Mailbox size for the incoming connections.&lt;br&gt;The queue size value itself is platform-dependent, but is passed to sys_mbox_new() when the acceptmbox is created.</Description>
    </RefParameter>
    <RefParameter Name="DEFAULT_ACCEPTMBOX_SIZE" Comment="DEFAULT_ACCEPTMBOX_SIZE (Default Mailbox Size for Incoming Connections)" Type="Integer" Group="Thread Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Min="0" Max="2147483647" Visible="false">
        <Description>Mailbox size for the incoming connections.&lt;br&gt;The queue size value itself is platform-dependent, but is passed to sys_mbox_new() when the acceptmbox is created.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: DEFAULT_ACCEPTMBOX_SIZE is used only if NO_SYS=0.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_TCPIP_CORE_LOCKING" Comment="LWIP_TCPIP_CORE_LOCKING (TCPIP Core Locking)" Type="list" Group="Sequential Layer options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>EXPERIMENTAL! Don't use it if you're not an active lwIP project member.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: When using LWIP_TCPIP_CORE_LOCKING_INPUT, LWIP_TCPIP_CORE_LOCKING must be enabled, too.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_TCPIP_CORE_LOCKING_INPUT" Comment="LWIP_TCPIP_CORE_LOCKING_INPUT (TCPIP Core Locking Input)" Type="list" Group="Sequential Layer options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_TCPIP_CORE_LOCKING_INPUT requires LWIP_TCPIP_CORE_LOCKING." Expression="LWIP_TCPIP_CORE_LOCKING"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Don't use it if you're not an active lwIP project member</Description>
    </RefParameter>
    <RefParameter Name="LWIP_TCPIP_CORE_LOCKING_INPUT" Comment="LWIP_TCPIP_CORE_LOCKING_INPUT (TCPIP Core Locking Input)" Type="list" Group="Sequential Layer options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>EXPERIMENTAL! Don't use it if you're not an active lwIP project member.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_TCPIP_CORE_LOCKING_INPUT requires LWIP_TCPIP_CORE_LOCKING.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETCONN" Comment="LWIP_NETCONN (NETCONN API)" Type="list" Group="Sequential Layer options" DefaultValue="1" TabName="Key Options" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use NETCONN API requires NO_SYS=0 and MEMP_NUM_TCPIP_MSG_API&gt;0 if MEMP_MEM_MALLOC is disabled." Expression="!NO_SYS &amp; IF(!MEMP_MEM_MALLOC, MEMP_NUM_TCPIP_MSG_API &gt; 0, 1)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, Netconn API is enabled (require to use api_lib.c).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_NETCONN" Comment="LWIP_NETCONN (NETCONN API)" Type="list" Group="Sequential Layer options" DefaultValue="0" TabName="Key Options" Mode="Basic" Visible="false">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, Netconn API is enabled (require to use api_lib.c).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use NETCONN API requires NO_SYS=0 and MEMP_NUM_TCPIP_MSG_API&gt;0 if MEMP_MEM_MALLOC is disabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_TCPIP_TIMEOUT" Comment="LWIP_TCPIP_TIMEOUT (Use TCPIP Timeout)" Type="list" Group="Sequential Layer options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable tcpip_timeout/tcpip_untimeout to create timers running in tcpip_thread from another thread.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_SOCKET" Comment="LWIP_SOCKET (Socket API)" Type="list" Group="Socket Options" DefaultValue="1" TabName="Key Options" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use Socket API requires LWIP_NETCONN enabled, NO_SYS=0, MEMP_NUM_NETCONN&gt;0, MEMP_NUM_TCPIP_MSG_API&gt;0 when MEMP_MEM_MALLOC is disabled." Expression="!NO_SYS &amp; LWIP_NETCONN &amp; (MEMP_NUM_NETCONN &gt; 0) &amp; IF(!MEMP_MEM_MALLOC, MEMP_NUM_TCPIP_MSG_API &gt; 0, 1)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, Socket API is enabled (require to use sockets.c)</Description>
    </RefParameter>
    <RefParameter Name="LWIP_SOCKET" Comment="LWIP_SOCKET (Socket API)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, Socket API is enabled (require to use sockets.c).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use Socket API requires LWIP_NETCONN enabled, NO_SYS=0, MEMP_NUM_NETCONN&gt;0, MEMP_NUM_TCPIP_MSG_API&gt;0 when MEMP_MEM_MALLOC is disabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_COMPAT_SOCKETS" Comment="LWIP_COMPAT_SOCKETS (BSD-style Socket Functions Names)" Type="Integer" Group="Socket Options" DefaultValue="1" TabName="Key Options" Mode="Basic" Min="0" Max="2" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_COMPAT_SOCKETS option requires RTOS enabled (NO_SYS=0)." Expression="!NO_SYS"/>
        <Description>LWIP_COMPAT_SOCKETS==1: Enable BSD-style sockets functions names through defines.&lt;br&gt;LWIP_COMPAT_SOCKETS==2: Same as ==1 but correctly named functions are created.&lt;br&gt;While this helps code completion, it might conflict with existing libraries (only used if you use sockets.c).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_COMPAT_SOCKETS" Comment="LWIP_COMPAT_SOCKETS (BSD-style Socket Functions Names)" Type="Integer" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Basic" Visible="false">
        <Description>When this parameter is enabled, Socket API is enabled (require to use sockets.c).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_COMPAT_SOCKETS option requires RTOS enabled (NO_SYS=0).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_POSIX_SOCKETS_IO_NAMES" Comment="LWIP_POSIX_SOCKETS_IO_NAMES (POSIX-style Sockets Functions Names)" Type="list" Group="Socket Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_POSIX_SOCKETS_IO_NAMES option requires RTOS enabled (NO_SYS=0)." Expression="!NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable POSIX-style sockets functions names. Disable this option if you use a POSIX operating system that uses the same names (read, write and close). (only used if you use sockets.c).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_POSIX_SOCKETS_IO_NAMES" Comment="LWIP_POSIX_SOCKETS_IO_NAMES (POSIX-style Sockets Functions Names)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable POSIX-style sockets functions names. Disable thisoption if you use a POSIX operating system that uses the same names (read, write and close). (only used if you use sockets.c).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use LWIP_POSIX_SOCKETS_IO_NAMES option requires RTOS enabled (NO_SYS=0).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_TCP_KEEPALIVE" Comment="LWIP_TCP_KEEPALIVE (TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT Options)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Enable LWIP_TCP_KEEPALIVE option requires RTOS enabled (NO_SYS=0)." Expression="!NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT options processing. Note that TCP_KEEPIDLE and TCP_KEEPINTVL have to be set in seconds (does not require sockets.c, and will affect tcp.c).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_TCP_KEEPALIVE" Comment="LWIP_TCP_KEEPALIVE (TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT Options)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT options processing. Note that TCP_KEEPIDLE and TCP_KEEPINTVL have to be set in seconds (does not require sockets.c, and will affect tcp.c).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Enable LWIP_TCP_KEEPALIVE option requires RTOS enabled (NO_SYS=0).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_SO_SNDTIMEO" Comment="LWIP_SO_SNDTIMEO (Send Timeout for Socket/Netconns)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Enable LWIP_SO_SNDTIMEO option requires RTOS enabled (NO_SYS=0)." Expression="!NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable send timeout for sockets/netconns and SO_SNDTIMEO processing.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_SO_SNDTIMEO" Comment="LWIP_SO_SNDTIMEO (Send Timeout for Socket/Netconns)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable send timeout for sockets/netconns and SO_SNDTIMEO processing.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Enable LWIP_SO_SNDTIMEO option requires RTOS enabled (NO_SYS=0).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_SO_RCVTIMEO" Comment="LWIP_SO_RCVTIMEO (Receive Timeout for Socket/Netconns)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Enable LWIP_SO_RCVTIMEO option requires RTOS enabled (NO_SYS=0)." Expression="!NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable receive timeout for sockets/netconns and SO_RCVTIMEO processing.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_SO_RCVTIMEO" Comment="LWIP_SO_RCVTIMEO (Receive Timeout for Socket/Netconns)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable receive timeout for sockets/netconns and SO_RCVTIMEO processing.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Enable LWIP_SO_RCVTIMEO option requires RTOS enabled (NO_SYS=0).</Description>
    </RefParameter>
    <RefParameter Name="LWIP_SO_RCVBUF" Comment="LWIP_SO_RCVBUF (SO_RCVBUF Processing)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Enable LWIP_SO_RCVBUF option requires RTOS enabled (NO_SYS=0)." Expression="!NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable SO_RCVBUF processing.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_SO_RCVBUF" Comment="LWIP_SO_RCVBUF (SO_RCVBUF Processing)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable SO_RCVBUF processing.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Enable LWIP_SO_RCVBUF option requires RTOS enabled (NO_SYS=0).</Description>
    </RefParameter>
    <RefParameter Name="RECV_BUFSIZE_DEFAULT" Comment="RECV_BUFSIZE_DEFAULT (SO_RCVBUF Size Value)" Type="Integer" Group="Socket Options" DefaultValue="0xFFFFFFF" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Enable RECV_BUFSIZE_DEFAULT option requires RTOS enabled (NO_SYS=0)." Expression="!NO_SYS"/>
        <Description>If LWIP_SO_RCVBUF is used, this is the default value for recv_bufsize.</Description>
    </RefParameter>
    <RefParameter Name="RECV_BUFSIZE_DEFAULT" Comment="RECV_BUFSIZE_DEFAULT (SO_RCVBUF Size Value)" Type="Integer" Group="Socket Options" DefaultValue="2000000000" TabName="Key Options" Mode="Advanced" Visible="false">
        <Description>If LWIP_SO_RCVBUF is used, this is the default value for recv_bufsize.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Enable RECV_BUFSIZE_DEFAULT option requires RTOS enabled (NO_SYS=0).</Description>
    </RefParameter>
    <RefParameter Name="SO_REUSE" Comment="SO_REUSE (SO_REUSEADDR Option)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Enable SO_REUSE option requires RTOS enabled (NO_SYS=0)." Expression="!NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable SO_REUSEADDR option.</Description>
    </RefParameter>
    <RefParameter Name="SO_REUSE" Comment="SO_REUSE (SO_REUSEADDR Option)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable SO_REUSEADDR option.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Enable SO_REUSE option requires RTOS enabled (NO_SYS=0).</Description>
    </RefParameter>
    <RefParameter Name="SO_REUSE_RXTOALL" Comment="SO_REUSE_RXTOALL (Pass Copy of Incoming Broadcast/Multicast Packets)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Enable SO_REUSE_RXTOALL option requires RTOS enabled (NO_SYS=0)." Expression="!NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Pass a copy of incoming broadcast/multicast packets to all local matches if SO_REUSEADDR is turned on.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: Adds a memcpy for every packet if passing to more than one pcb!</Description>
    </RefParameter>
    <RefParameter Name="SO_REUSE_RXTOALL" Comment="SO_REUSE_RXTOALL (Pass Copy of Incoming Broadcast/Multicast Packets)" Type="list" Group="Socket Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Pass a copy of incoming broadcast/multicast packets to all local matches if SO_REUSEADDR is turned on.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: Adds a memcpy for every packet if passing to more than one pcb!&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Enable SO_REUSE_RXTOALL option requires RTOS enabled (NO_SYS=0).</Description>
    </RefParameter>
    <RefParameter Name="PPP_SUPPORT" Comment="PPP_SUPPORT (PPP Module)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Warning: up to user to take care!&lt;/b&gt;: Enable PPP requires user specific code not generated by STM32Cube MX. This is reserved for advanced users.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use PPP_SUPPORT requires PPPOS_SUPPORT or PPPOE_SUPPORT turned on." Expression="PPPOS_SUPPORT|PPPOE_SUPPORT"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>When this parameter is enabled, Point-to-Point Protocol (PPP) is enabled.</Description>
    </RefParameter>
    <RefParameter Name="PPP_SUPPORT" Comment="PPP_SUPPORT (PPP Module)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>When this parameter is enabled, Point-to-Point Protocol (PPP) is enabled.&lt;br&gt;&lt;b&gt;Warning: up to user to take care!&lt;/b&gt;: Enable PPP requires user specific code not generated by STM32Cube MX. This is reserved for advanced users.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use PPP_SUPPORT requires PPPOS_SUPPORT or PPPOE_SUPPORT turned on.</Description>
    </RefParameter>
    <RefParameter Name="PPPOE_SUPPORT" Comment="PPPOE_SUPPORT (PPP Over Ethernet)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Use PPPOE_SUPPORT requires LWIP_ETHERNET." Expression="LWIP_ETHERNET"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable PPP Over Ethernet.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: Enable PPP requires user specific code not generated by STM32Cube MX. This is reserved for advanced users.</Description>
    </RefParameter>
    <RefParameter Name="PPPOE_SUPPORT" Comment="PPPOE_SUPPORT (PPP Over Ethernet)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable PPP Over Ethernet.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Use PPPOE_SUPPORT requires LWIP_ETHERNET.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: Enable PPP requires user specific code not generated by STM32Cube MX. This is reserved for advanced users.</Description>
    </RefParameter>
    <RefParameter Name="PPPOS_SUPPORT" Comment="PPPOS_SUPPORT (PPP Over Serial)" Type="list" Group="PPP Options" DefaultValue="=PPP_SUPPORT" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable PPP Over Serial.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: PPP_SUPPORT needs either PPPOS_SUPPORT or PPPOE_SUPPORT turned on.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: Enable PPP requires user specific code not generated by STM32Cube MX. This is reserved for advanced users.</Description>
    </RefParameter>
    <RefParameter Name="NUM_PPP" Comment="NUM_PPP (PPP Sessions)" Type="list" Group="PPP Options" DefaultValue="1" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable PPP sessions.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PAP_SUPPORT" Comment="PAP_SUPPORT (PAP Module)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Support Password Authentication Protocol (PAP).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="CHAP_SUPPORT" Comment="CHAP_SUPPORT (CHAP Module)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Support Challenge Handshake Authentication Protocol (CHAP).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MSCHAP_SUPPORT" Comment="MSCHAP_SUPPORT (MSCHAP Module)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Enable MSCHAP_SUPPORT requires CHAP_SUPPORT enabled." Expression="CHAP_SUPPORT"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Support Microsoft version of Challenge Handshake Authentication Protocol (MSCHAP).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Set MSCHAP_SUPPORT requires CHAP_SUPPORT enabled.</Description>
    </RefParameter>
    <RefParameter Name="MSCHAP_SUPPORT" Comment="MSCHAP_SUPPORT (MSCHAP Module)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Support Microsoft version of Challenge Handshake Authentication Protocol (MSCHAP).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Enable MSCHAP_SUPPORT requires CHAP_SUPPORT enabled.</Description>
    </RefParameter>
    <RefParameter Name="CCP_SUPPORT" Comment="CCP_SUPPORT (PPP CCP Module)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>This parameter enables PPP CCP.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="CBCP_SUPPORT" Comment="CBCP_SUPPORT (CBCP Module)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Support Callback Control Protocol (CBCP).&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: CURRENTLY NOT SUPPORTED! DO NOT SET!&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="VJ_SUPPORT" Comment="VJ_SUPPORT (VJ Header Compression)" Type="list" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Support Van Jacobson (VJ) header compression.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="FSM_DEFTIMEOUT" Comment="FSM_DEFTIMEOUT (FSM Timeout)" Type="Integer" Unit="Second(s)" Group="PPP Options" DefaultValue="6" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Timeout time in seconds.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="FSM_DEFMAXTERMREQS" Comment="FSM_DEFMAXTERMREQS (Maximum Number of Terminate-Request Transmissions)" Type="Integer" Group="PPP Options" DefaultValue="2" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Set the maximum Terminate-Request transmissions.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="FSM_DEFMAXCONFREQS" Comment="FSM_DEFMAXCONFREQS (Maximum Number of Configure-Request Transmissions)" Type="Integer" Group="PPP Options" DefaultValue="10" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Set the Maximum Configure-Request transmissions.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="FSM_DEFMAXNAKLOOPS" Comment="FSM_DEFMAXNAKLOOPS (Maximum Number of Nak Loops)" Type="Integer" Group="PPP Options" DefaultValue="5" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Set the Maximum number of nak loops.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="UPAP_DEFTIMEOUT" Comment="UPAP_DEFTIMEOUT (Timeout for Retransmitting Request)" Type="Integer" Unit="Second(s)" Group="PPP Options" DefaultValue="6" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Set the Timeout (seconds) for retransmitting request with User/Password Authentication Protocol.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="UPAP_DEFREQTIME" Comment="UPAP_DEFREQTIME (Time to wait for Authentification Request from Peer)" Type="Integer" Unit="Second(s)" Group="PPP Options" DefaultValue="30" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Time to wait for auth-req from peer with User/Password Authentication Protocol.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="CHAP_DEFTIMEOUT" Comment="CHAP_DEFTIMEOUT (CHAP Timeout)" Type="Integer" Unit="Second(s)" Group="PPP Options" DefaultValue="6" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>CHAP (Challenge Handshake Authentication Protocol) Timeout time in seconds.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="CHAP_DEFTRANSMITS" Comment="CHAP_DEFTRANSMITS (CHAP Maximum Times to send Challenge)" Type="Integer" Group="PPP Options" DefaultValue="10" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Max times to send challenge with Challenge Handshake Authentication Protocol.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LCP_ECHOINTERVAL" Comment="LCP_ECHOINTERVAL (Interval between Keepalive Echo Requests)" Type="Integer" Unit="Second(s)" Group="PPP Options" DefaultValue="0" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Interval in seconds between keepalive echo requests, 0 to disable in Link Control Protocol.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LCP_MAXECHOFAILS" Comment="LCP_MAXECHOFAILS (Number of Unanswered Echo Requests before Failure)" Type="Integer" Group="PPP Options" DefaultValue="3" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Number of unanswered echo requests before failure in Link Control Protocol.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PPP_MAXIDLEFLAG" Comment="PPP_MAXIDLEFLAG (Maximum Xmit Idle Time before Resend Flag Char)" Type="Integer" Unit="Millisecond(ms)" Group="PPP Options" DefaultValue="100" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Max Xmit idle time (in ms) before resend flag char.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PPP_MTU" Comment="PPP_MTU (Number of Default MTU Size of Info Field)" Type="Integer" Group="PPP Options" DefaultValue="1500" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Default Maximum Transmission Unit (size of Info field).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PPP_MAXMTU" Comment="PPP_MAXMTU (Maximum Number of MTU Allowed)" Type="Integer" Group="PPP Options" DefaultValue="1500" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Largest MTU allowed.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PPP_MINMTU" Comment="PPP_MINMTU (Minimum Number of MTU Allowed)" Type="Integer" Group="PPP Options" DefaultValue="64" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Smallest MTU allowed.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PPP_MRU" Comment="PPP_MRU (Maximum Length of MRU Info Field)" Type="Integer" Group="PPP Options" DefaultValue="1500" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Default MRU = max length of info field.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PPP_MAXMRU" Comment="PPP_MAXMRU (Maximum Number of MRU Allowed)" Type="Integer" Group="PPP Options" DefaultValue="1500" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Largest MRU allowed.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PPP_DEFMRU" Comment="PPP_DEFMRU (Number of Negotiated MRU)" Type="Integer" Group="PPP Options" DefaultValue="296" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Maximum negotiated Maximum Receive Unit (MRU) mandated by PPP protocol.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: Try for this!&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PPP_MINMRU" Comment="PPP_MINMRU (Minimum Number of MRU Allowed)" Type="Integer" Group="PPP Options" DefaultValue="128" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Minimum negotiated Maximum Receive Unit (MRU) mandated by PPP protocol.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: No MRUs below this.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MAXNAMELEN" Comment="MAXNAMELEN (Maximum Length of Hostname or Name for Authentification)" Type="Integer" Unit="Byte(s)" Group="PPP Options" DefaultValue="256" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Maximum length of hostname or name for auth.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MAXSECRETLEN" Comment="MAXSECRETLEN (Maximum Length of Password)" Type="Integer" Unit="Byte(s)" Group="PPP Options" DefaultValue="256" TabName="Key Options" Mode="Advanced" Min="0" Max="2147483647" >
        <Description>Maximum length of password or secret.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DISABLE_TCP_SANITY_CHECKS" Comment="LWIP_DISABLE_TCP_SANITY_CHECKS (TCP Sanity Checks)" Type="list" Group="Sanity Checks" DefaultValue="0" TabName="Perf/Checks" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Activate some checks on TCP parameters.&lt;br&gt;&lt;b&gt;TCP Checks&lt;/b&gt;: If LWIP_DISABLE_TCP_SANITY_CHECKS is disabled (=0), check is performed on MEMP_NUM_TCP_SEG, TCP_SND_BUF, TCP_SND_QUEUELEN, TCP_SNDLOWAT, TCP_SNDQUEUELOWAT, PBUF_POOL_BUFSIZE and TCP_WND parameters.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DISABLE_MEMP_SANITY_CHECKS" Comment="LWIP_DISABLE_MEMP_SANITY_CHECKS (MEMP Sanity Checks)" Type="list" Group="Sanity Checks" DefaultValue="0" TabName="Perf/Checks" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Activate some checks on MEMP_NUM_NETCONN parameter.&lt;br&gt;&lt;b&gt;MEMP Checks&lt;/b&gt;: If LWIP_DISABLE_MEMP_SANITY_CHECKS is disabled (=0), check is performed on MEMP_NUM_NETCONN.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_PERF" Comment="LWIP_PERF (Performace Testing for LwIP)" Type="list" Group="Performance Options" DefaultValue="0" TabName="Perf/Checks" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>This parameter enables performance testing for lwIP (if enabled, arch/perf.h is included).&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_STATS" Comment="LWIP_STATS (Statictics Collection)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable statistics collection in lwip_stats.&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;All other statistics options are visible as "Advanced Parameters".&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: This global option is linked to all other Statistics options.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_STATS_DISPLAY" Comment="LWIP_STATS_DISPLAY (Compile in Statictics Ouput Functions)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: LWIP_STATS_DISPLAY requires LWIP_STATS enabled." Expression="LWIP_STATS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Compile in the statistics output functions.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_STATS_DISPLAY" Comment="LWIP_STATS_DISPLAY (Compile in Statictics Ouput Functions)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Compilation in the statistics output functions disabled.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: LWIP_STATS_DISPLAY requires LWIP_STATS enabled.</Description>
    </RefParameter>
    <RefParameter Name="LINK_STATS" Comment="LINK_STATS (Link Statistics)" Type="list" Group="Statistics Options" DefaultValue="1" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: LINK_STATS requires LWIP_STATS enabled." Expression="LWIP_STATS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable link stats.</Description>
    </RefParameter>
    <RefParameter Name="LINK_STATS" Comment="LINK_STATS (Link Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable link stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: LINK_STATS requires LWIP_STATS enabled.</Description>
    </RefParameter>
    <RefParameter Name="ETHARP_STATS" Comment="ETHARP_STATS (Ethernet ARP Statistics)" Type="list" Group="Statistics Options" DefaultValue="=LWIP_ARP" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: ETHARP_STATS requires LWIP_STATS enabled and is set by default with LWIP_ARP." Expression="LWIP_STATS &amp; LWIP_ARP"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable etharp stats.</Description>
    </RefParameter>
    <RefParameter Name="ETHARP_STATS" Comment="ETHARP_STATS (Ethernet ARP Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable etharp stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: ETHARP_STATS requires LWIP_STATS enabled and is set by default with LWIP_ARP.</Description>
    </RefParameter>
    <RefParameter Name="IP_STATS" Comment="IP_STATS (IP Statistics)" Type="list" Group="Statistics Options" DefaultValue="1" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: IP_STATS requires LWIP_STATS enaabled." Expression="LWIP_STATS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable IP stats.</Description>
    </RefParameter>
    <RefParameter Name="IP_STATS" Comment="IP_STATS (IP Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable IP stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: IP_STATS requires LWIP_STATS enabled.</Description>
    </RefParameter>
    <RefParameter Name="IPFRAG_STATS" Comment="IPFRAG_STATS (IP Fragmentation Statistics)" Type="list" Group="Statistics Options" DefaultValue="=IP_REASSEMBLY|IP_FRAG" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: IPFRAG_STATS requires LWIP_STATS enabled and is set by default with (IP_REASSEMBLY || IP_FRAG)." Expression="LWIP_STATS &amp; (IP_REASSEMBLY|IP_FRAG)"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable IP fragmentation stats. Default is on if using either fragmentation or reassembly.</Description>
    </RefParameter>
    <RefParameter Name="IPFRAG_STATS" Comment="IPFRAG_STATS (IP Fragmentation Statistic)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable IP fragmentation stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: IPFRAG_STATS requires LWIP_STATS enabled and is set by default with (IP_REASSEMBLY || IP_FRAG).</Description>
    </RefParameter>
    <RefParameter Name="ICMP_STATS" Comment="ICMP_STATS (ICMP Statistics)" Type="list" Group="Statistics Options" DefaultValue="=LWIP_ICMP" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: ICMP_STATS requires LWIP_STATS and is set by default with LWIP_ICMP." Expression="LWIP_STATS &amp; LWIP_ICMP"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable ICMP stats.</Description>
    </RefParameter>
    <RefParameter Name="ICMP_STATS" Comment="ICMP_STATS (ICMP Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable ICMP stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: ICMP_STATS requires LWIP_STATS and is set by default with LWIP_ICMP.</Description>
    </RefParameter>
    <RefParameter Name="IGMP_STATS" Comment="IGMP_STATS (IGMP Statistics)" Type="list" Group="Statistics Options" DefaultValue="=LWIP_IGMP" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: IGMP_STATS requires LWIP_STATS enabled and is set by default with LWIP_IGMP." Expression="LWIP_STATS &amp; LWIP_IGMP"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable IGMP stats.</Description>
    </RefParameter>
    <RefParameter Name="IGMP_STATS" Comment="IGMP_STATS (IGMP Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable IGMP stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: IGMP_STATS requires LWIP_STATS enabled and is set by default with LWIP_IGMP.</Description>
    </RefParameter>
    <RefParameter Name="UDP_STATS" Comment="UDP_STATS (UDP Statistics)" Type="list" Group="Statistics Options" DefaultValue="=LWIP_UDP" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: UDP_STATS requires LWIP_STATS enabled and is set by default with LWIP_UDP." Expression="LWIP_STATS &amp; LWIP_UDP"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable UDP stats.</Description>
    </RefParameter>
    <RefParameter Name="UDP_STATS" Comment="UDP_STATS (UDP Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable UDP stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: UDP_STATS requires LWIP_STATS enabled and is set by default with LWIP_UDP.</Description>
    </RefParameter>
    <RefParameter Name="TCP_STATS" Comment="TCP_STATS (TCP Statistics)" Type="list" Group="Statistics Options" DefaultValue="=LWIP_TCP" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: TCP_STATS requires LWIP_STATS enabled and is set by default with LWIP_TCP." Expression="LWIP_STATS &amp; LWIP_TCP"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable TCP stats. Default is on if TCP enabled, otherwise off.</Description>
    </RefParameter>
    <RefParameter Name="TCP_STATS" Comment="TCP_STATS (TCP Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable TCP stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: TCP_STATS requires LWIP_STATS enabled and is set by default with LWIP_TCP.</Description>
    </RefParameter>
    <RefParameter Name="MEM_STATS" Comment="MEM_STATS (Memory Statistics)" Type="list" Group="Statistics Options" DefaultValue="=!MEM_LIBC_MALLOC &amp; !MEM_USE_POOLS" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: MEM_STATS requires LWIP_STATS enabled and is set by default with (!MEM_LIBC_MALLOC &amp; !MEM_USE_POOLS)." Expression="LWIP_STATS &amp; !MEM_LIBC_MALLOC &amp; !MEM_USE_POOLS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable mem.c stats.</Description>
    </RefParameter>
    <RefParameter Name="MEM_STATS" Comment="MEM_STATS (Memory Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable Memory stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: MEM_STATS requires LWIP_STATS enabled and is set by default with (!MEM_LIBC_MALLOC &amp; !MEM_USE_POOLS).</Description>
    </RefParameter>
    <RefParameter Name="MEMP_STATS" Comment="MEMP_STATS (Memory Pool Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable Memory Pool stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: MEMP_STATS requires LWIP_STATS enabled and is set by default with !MEMP_MEM_MALLOC.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_STATS" Comment="MEMP_STATS (Memory Pool Statistics)" Type="list" Group="Statistics Options" DefaultValue="=!MEMP_MEM_MALLOC" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: MEMP_STATS requires LWIP_STATS enabled and is set by default with !MEMP_MEM_MALLOC." Expression="LWIP_STATS &amp; !MEMP_MEM_MALLOC"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable memp.c pool stats.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_STATS" Comment="MEMP_STATS (Memory Pool Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable Memory Pool stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: MEMP_STATS requires LWIP_STATS enabled and is set by default with !MEMP_MEM_MALLOC.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_STATS" Comment="MEMP_STATS (Memory Pool Statistics)" Type="list" Group="Statistics Options" DefaultValue="=!MEMP_MEM_MALLOC" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: MEMP_STATS requires LWIP_STATS enabled and is set by default with !MEMP_MEM_MALLOC." Expression="LWIP_STATS &amp; !MEMP_MEM_MALLOC"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable memp.c pool stats.</Description>
    </RefParameter>
    <RefParameter Name="SYS_STATS" Comment="SYS_STATS (System Statistics)" Type="list" Group="Statistics Options" DefaultValue="=!NO_SYS" TabName="Statistics" Mode="Advanced" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: SYS_STATS requires LWIP_STATS enabled and is set by default with !NO_SYS." Expression="LWIP_STATS &amp; !NO_SYS"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enable system stats (sem and mbox counts, etc).</Description>
    </RefParameter>
    <RefParameter Name="SYS_STATS" Comment="SYS_STATS (System Statistics)" Type="list" Group="Statistics Options" DefaultValue="0" TabName="Statistics" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Disable System stats.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: SYS_STATS requires LWIP_STATS enabled and is set by default with !NO_SYS.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_BY_HARDWARE" Comment="CHECKSUM_BY_HARDWARE (Hardware Checksum ** CubeMX specific **)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Enabling Hardware Checksum will disable software checksum parameters and&lt;br&gt;allow to compute and verify the IP, UDP, TCP and ICMP checksums by Hardware.&lt;br&gt;&lt;b&gt;Warning&lt;/b&gt;: This parameter introduced by CubeMX is not part of LwIP stack.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_GEN_IP" Comment="CHECKSUM_GEN_IP (Generate Software Checksum for Outgoing IP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_GEN_IP requires CHECKSUM_BY_HARDWARE disabled." Expression="!CHECKSUM_BY_HARDWARE"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Generate checksums in software for outgoing IP packets.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_GEN_IP" Comment="CHECKSUM_GEN_IP (Generate Software Checksum for Outgoing IP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Generate checksums in software for outgoing IP packets.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_GEN_IP requires CHECKSUM_BY_HARDWARE disabled.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_GEN_UDP" Comment="CHECKSUM_GEN_UDP (Generate Software Checksum for Outgoing UDP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_GEN_UDP requires CHECKSUM_BY_HARDWARE disabled." Expression="!CHECKSUM_BY_HARDWARE"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Generate checksums in software for outgoing UDP packets.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_GEN_UDP" Comment="CHECKSUM_GEN_UDP (Generate Software Checksum for Outgoing UDP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Generate checksums in software for outgoing UDP packets.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_GEN_UDP requires CHECKSUM_BY_HARDWARE disabled.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_GEN_TCP" Comment="CHECKSUM_GEN_TCP (Generate Software Checksum for Outgoing TCP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_GEN_TCP requires CHECKSUM_BY_HARDWARE disabled." Expression="!CHECKSUM_BY_HARDWARE"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Generate checksums in software for outgoing TCP packets.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_GEN_TCP" Comment="CHECKSUM_GEN_TCP (Generate Software Checksum for Outgoing TCP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Generate checksums in software for outgoing TCP packets.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_GEN_TCP requires CHECKSUM_BY_HARDWARE disabled.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_GEN_ICMP" Comment="CHECKSUM_GEN_ICMP (Generate Software Checksum for Outgoing ICMP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_GEN_ICMP requires CHECKSUM_BY_HARDWARE disabled." Expression="!CHECKSUM_BY_HARDWARE"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Generate checksums in software for outgoing ICMP packets.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_GEN_ICMP" Comment="CHECKSUM_GEN_ICMP (Generate Software Checksum for Outgoing ICMP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Generate checksums in software for outgoing ICMP packets.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_GEN_ICMP requires CHECKSUM_BY_HARDWARE disabled.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_CHECK_IP" Comment="CHECKSUM_CHECK_IP (Generate Software Checksum for Incoming IP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_CHECK_IP requires CHECKSUM_BY_HARDWARE disabled." Expression="!CHECKSUM_BY_HARDWARE"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Check checksums in software for Incoming IP packets.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_CHECK_IP" Comment="CHECKSUM_CHECK_IP (Generate Software Checksum for Incoming IP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Check checksums in software for Incoming IP packets.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_CHECK_IP requires CHECKSUM_BY_HARDWARE disabled.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_CHECK_UDP" Comment="CHECKSUM_CHECK_UDP (Generate Software Checksum for Incoming UDP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_CHECK_UDP requires CHECKSUM_BY_HARDWARE disabled." Expression="!CHECKSUM_BY_HARDWARE"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Check checksums in software for Incoming UDP packets.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_CHECK_UDP" Comment="CHECKSUM_CHECK_UDP (Generate Software Checksum for Incoming UDP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Check checksums in software for Incoming UDP packets.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_CHECK_UDP requires CHECKSUM_BY_HARDWARE disabled.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_CHECK_TCP" Comment="CHECKSUM_CHECK_TCP (Generate Software Checksum for Incoming TCP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <Condition Diagnostic="&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_CHECK_TCP requires CHECKSUM_BY_HARDWARE disabled." Expression="!CHECKSUM_BY_HARDWARE"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Check checksums in software for Incoming TCP packets.</Description>
    </RefParameter>
    <RefParameter Name="CHECKSUM_CHECK_TCP" Comment="CHECKSUM_CHECK_TCP (Generate Software Checksum for Incoming TCP Packets)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Basic" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Check checksums in software for Incoming TCP packets.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: Set CHECKSUM_CHECK_TCP requires CHECKSUM_BY_HARDWARE disabled.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_CHECKSUM_ON_COPY" Comment="LWIP_CHECKSUM_ON_COPY (Calculate Checksum on Copy to Pbufs)" Type="list" Group="Checksum Options" DefaultValue="0" TabName="Checksum" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="0"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <Description>Calculate checksum when copying data from application buffers to pbufs.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DBG_ON" Comment="LWIP_DBG_ON (Enable Debug Message)" Type="list" Group="Debugging Options" DefaultValue="0x80U" TabName="Debug" Mode="Advanced" Visible="false">
        <PossibleValue Comment="On" Value="0x80U"/>
    </RefParameter>
    <RefParameter Name="LWIP_DBG_OFF" Comment="LWIP_DBG_OFF (Disable Debug Message)" Type="list" Group="Debugging Options" DefaultValue="0x00U" TabName="Debug" Mode="Advanced" Visible="false">
        <PossibleValue Comment="On" Value="0x00U"/>
    </RefParameter>
    <RefParameter Name="LWIP_DBG_MIN_LEVEL" Comment="LWIP_DBG_MIN_LEVEL (Minimum Level)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_LEVEL_ALL" TabName="Debug" Mode="Basic" >
        <PossibleValue Comment="All" Value="LWIP_DBG_LEVEL_ALL"/>
        <PossibleValue Comment="Warning" Value="LWIP_DBG_LEVEL_WARNING"/>
        <PossibleValue Comment="Serious" Value="LWIP_DBG_LEVEL_SERIOUS"/>
        <PossibleValue Comment="Severe" Value="LWIP_DBG_LEVEL_SEVERE"/>
        <PossibleValue Comment="Mask" Value="LWIP_DBG_MASK_LEVEL"/>
        <Description>Lower two bits indicate debug level:&lt;br&gt;- 0: all&lt;br&gt;- 1: warning&lt;br&gt;- 2: serious&lt;br&gt;- 3: severe&lt;br&gt;- 4: Mask.&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;All other debugging options are visible as "Advanced Parameters".&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_DBG_TYPES_ON" Comment="LWIP_DBG_TYPES_ON (Only certain Debug Message Types)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_ON" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Mask that can be used to globally enable/disable debug messages of certain types.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="ETHARP_DEBUG" Comment="ETHARP_DEBUG (Debug in Ethernet ARP)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in etharp.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="NETIF_DEBUG" Comment="NETIF_DEBUG (Debug in NETIF)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in netif.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PBUF_DEBUG" Comment="PBUF_DEBUG (Debug in Pbuf)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in pbuf.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="API_LIB_DEBUG" Comment="API_LIB_DEBUG (Debug in API Library)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in api_lib.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="API_MSG_DEBUG" Comment="API_MSG_DEBUG (Debug in API Message)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in api_msg.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="SOCKETS_DEBUG" Comment="SOCKETS_DEBUG (Debug in Sockets)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in sockets.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="ICMP_DEBUG" Comment="ICMP_DEBUG (Debug in ICMP)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in icmp.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="IGMP_DEBUG" Comment="IGMP_DEBUG (Debug in IGMP)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in igmp.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="INET_DEBUG" Comment="INET_DEBUG (Debug in INET)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in inet.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="IP_DEBUG" Comment="IP_DEBUG (Debug in IP)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging for IP.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="IP_REASS_DEBUG" Comment="IP_REASS_DEBUG (Debug in IP Reassembly)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in ip_frag.c for both frag and reass.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="RAW_DEBUG" Comment="RAW_DEBUG (Debug in RAW API)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in raw.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEM_DEBUG" Comment="MEM_DEBUG (Debug in Memory)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in mem.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="MEMP_DEBUG" Comment="MEMP_DEBUG (Debug in Memory Pool)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in memp.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="SYS_DEBUG" Comment="SYS_DEBUG (Debug in System)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in sys.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TIMERS_DEBUG" Comment="TIMERS_DEBUG (Debug in Timers)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in timers.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_DEBUG" Comment="TCP_DEBUG (Debug in TCP)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging for TCP.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_INPUT_DEBUG" Comment="TCP_INPUT_DEBUG (Debug in TCP Incoming)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in tcp_in.c for incoming debug.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_FR_DEBUG" Comment="TCP_FR_DEBUG (Debug in TCP Incoming for Fast Retransmit)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in tcp_in.c for fast retransmit.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_RTO_DEBUG" Comment="TCP_RTO_DEBUG (Debug in TCP for Retransmit)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in TCP for retransmit.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_CWND_DEBUG" Comment="TCP_CWND_DEBUG (Debug in TCP Congestion Window)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging for TCP congestion window.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_WND_DEBUG" Comment="TCP_WND_DEBUG (Debug in TCP for Window Updating)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in tcp_in.c for window updating.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_OUTPUT_DEBUG" Comment="TCP_OUTPUT_DEBUG (Debug in TCP Output Functions)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in tcp_out.c output functions.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_RST_DEBUG" Comment="TCP_RST_DEBUG (Debug in TCP with RST Message)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging for TCP with the RST message.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCP_QLEN_DEBUG" Comment="TCP_QLEN_DEBUG (Debug in TCP Queue Lengths)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging for TCP queue lengths.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="UDP_DEBUG" Comment="UDP_DEBUG (Debug in UDP)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in UDP.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="TCPIP_DEBUG" Comment="TCPIP_DEBUG (Debug in TCPIP)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in tcpip.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="PPP_DEBUG" Comment="PPP_DEBUG (Debug in PPP)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging for PPP.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="SLIP_DEBUG" Comment="SLIP_DEBUG (Debug in SLIPIF)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in slipif.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="DHCP_DEBUG" Comment="DHCP_DEBUG (Debug in DHCP)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in dhcp.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="AUTOIP_DEBUG" Comment="AUTOIP_DEBUG (Debug in AUTOIP)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging in autoip.c.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="SNMP_MSG_DEBUG" Comment="SNMP_MSG_DEBUG (Debug in SNMP Messages)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging for SNMP messages.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="SNMP_MIB_DEBUG" Comment="SNMP_MIB_DEBUG (Debug in SNMP MIBs)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging for SNMP MIBs.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="DNS_DEBUG" Comment="DNS_DEBUG (Debug for DNS)" Type="list" Group="Debugging Options" DefaultValue="LWIP_DBG_OFF" TabName="Debug" Mode="Advanced" >
        <PossibleValue Comment="Disabled" Value="LWIP_DBG_OFF"/>
        <PossibleValue Comment="Enabled" Value="LWIP_DBG_ON"/>
        <Description>Enable debugging for DNS.&lt;br&gt;&lt;b&gt;Dependency&lt;/b&gt;: None.</Description>
    </RefParameter>
    <RefParameter Name="LWIP_PROVIDE_ERRNO" Comment="LWIP_PROVIDE_ERRNO (Handle LwIP Errors Numbers)" Type="list" Group="Not Visible Options" DefaultValue="1" TabName="Debug" Mode="Advanced" Visible="false">
        <Description>Enable LwIP errors numbers handling</Description>
    </RefParameter>

    <RefMode Name="Enabled">
        <ConfigForMode>LWIP_Init</ConfigForMode>
        <Parameter Name="LwIP Version"/>
        <Parameter Name="LWIP_DHCP"/>
        <Parameter Name="IP_ADDRESS"/>
        <Parameter Name="NETMASK_ADDRESS"/>
        <Parameter Name="GATEWAY_ADDRESS"/>
        <Parameter Name="WITH_RTOS"/>
        <Parameter Name="PHY"/>
        <Parameter Name="SYS_LIGHTWEIGHT_PROT"/>
        <Parameter Name="NO_SYS"/>
        <Parameter Name="NO_SYS_NO_TIMERS"/>
        <Parameter Name="MEMCPY(dst,src,len)"/>
        <Parameter Name="SMEMCPY(dst,src,len)"/>
        <Parameter Name="heth"/>
        <Parameter Name="gnetif"/>
        <Parameter Name="ipaddr"/>
        <Parameter Name="netmask"/>
        <Parameter Name="gw"/>
        <Parameter Name="MEM_LIBC_MALLOC"/>
        <Parameter Name="MEMP_MEM_MALLOC"/>
        <Parameter Name="MEM_ALIGNMENT"/>
        <Parameter Name="MEM_SIZE"/>
        <Parameter Name="MEMP_SEPARATE_POOLS"/>
        <Parameter Name="MEMP_OVERFLOW_CHECK"/>
        <Parameter Name="MEMP_SANITY_CHECK"/>
        <Parameter Name="MEM_USE_POOLS"/>
        <Parameter Name="MEM_USE_POOLS_TRY_BIGGER_POOL"/>
        <Parameter Name="MEMP_USE_CUSTOM_POOLS"/>
        <Parameter Name="LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT"/>
        <Parameter Name="MEMP_NUM_PBUF"/>
        <Parameter Name="MEMP_NUM_RAW_PCB"/>
        <Parameter Name="MEMP_NUM_TCP_PCB_LISTEN"/>
        <Parameter Name="MEMP_NUM_TCP_SEG"/>
        <Parameter Name="MEMP_NUM_REASSDATA"/>
        <Parameter Name="MEMP_NUM_FRAG_PBUF"/>
        <Parameter Name="MEMP_NUM_ARP_QUEUE"/>
        <Parameter Name="MEMP_NUM_IGMP_GROUP"/>
        <Parameter Name="MEMP_NUM_SYS_TIMEOUT"/>
        <Parameter Name="MEMP_NUM_NETBUF"/>
        <Parameter Name="MEMP_NUM_NETCONN"/>
        <Parameter Name="MEMP_NUM_TCPIP_MSG_API"/>
        <Parameter Name="MEMP_NUM_TCPIP_MSG_INPKT"/>
        <Parameter Name="MEMP_NUM_SNMP_NODE"/>
        <Parameter Name="MEMP_NUM_SNMP_ROOTNODE"/>
        <Parameter Name="MEMP_NUM_SNMP_VARBIND"/>
        <Parameter Name="MEMP_NUM_SNMP_VALUE"/>
        <Parameter Name="MEMP_NUM_NETDB"/>
        <Parameter Name="MEMP_NUM_LOCALHOSTLIST"/>
        <Parameter Name="MEMP_NUM_PPPOE_INTERFACES"/>
        <Parameter Name="PBUF_POOL_SIZE"/>
        <Parameter Name="LWIP_ARP"/>
        <Parameter Name="ARP_TABLE_SIZE"/>
        <Parameter Name="ARP_QUEUEING"/>
        <Parameter Name="ETHARP_TRUST_IP_MAC"/>
        <Parameter Name="ETHARP_SUPPORT_VLAN"/>
        <Parameter Name="LWIP_ETHERNET"/>
        <Parameter Name="ETH_PAD_SIZE"/>
        <Parameter Name="ETHARP_SUPPORT_STATIC_ENTRIES"/>
        <Parameter Name="IP_FORWARD"/>
        <Parameter Name="IP_OPTIONS_ALLOWED"/>
        <Parameter Name="IP_REASSEMBLY"/>
        <Parameter Name="IP_FRAG"/>
        <Parameter Name="IP_REASS_MAXAGE"/>
        <Parameter Name="IP_REASS_MAX_PBUFS"/>
        <Parameter Name="IP_FRAG_USES_STATIC_BUF"/>
        <Parameter Name="IP_FRAG_MAX_MTU"/>
        <Parameter Name="IP_DEFAULT_TTL"/>
        <Parameter Name="IP_SOF_BROADCAST"/>
        <Parameter Name="IP_SOF_BROADCAST_RECV"/>
        <Parameter Name="IP_FORWARD_ALLOW_TX_ON_RX_NETIF"/>
        <Parameter Name="LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS"/>
        <Parameter Name="LWIP_ICMP"/>
        <Parameter Name="ICMP_TTL"/>
        <Parameter Name="LWIP_BROADCAST_PING"/>
        <Parameter Name="LWIP_MULTICAST_PING"/>
        <Parameter Name="LWIP_RAW"/>
        <Parameter Name="RAW_TTL"/>
        <Parameter Name="DHCP_DOES_ARP_CHECK"/>
        <Parameter Name="LWIP_AUTOIP"/>
        <Parameter Name="LWIP_DHCP_AUTOIP_COOP"/>
        <Parameter Name="LWIP_DHCP_AUTOIP_COOP_TRIES"/>
        <Parameter Name="LWIP_SNMP"/>
        <Parameter Name="SNMP_CONCURRENT_REQUESTS"/>
        <Parameter Name="SNMP_TRAP_DESTINATIONS"/>
        <Parameter Name="SNMP_PRIVATE_MIB"/>
        <Parameter Name="SNMP_SAFE_REQUESTS"/>
        <Parameter Name="SNMP_MAX_OCTET_STRING_LEN"/>
        <Parameter Name="SNMP_MAX_TREE_DEPTH"/>
        <Parameter Name="SNMP_MAX_VALUE_SIZE"/>
        <Parameter Name="MD5_SUPPORT"/>
        <Parameter Name="LWIP_IGMP"/>
        <Parameter Name="LWIP_DNS"/>
        <Parameter Name="DNS_TABLE_SIZE"/>
        <Parameter Name="DNS_MAX_NAME_LENGTH"/>
        <Parameter Name="DNS_MAX_SERVERS"/>
        <Parameter Name="DNS_DOES_NAME_CHECK"/>
        <Parameter Name="DNS_MSG_SIZE"/>
        <Parameter Name="DNS_LOCAL_HOSTLIST"/>
        <Parameter Name="DNS_LOCAL_HOSTLIST_IS_DYNAMIC"/>
        <Parameter Name="LWIP_UDP"/>
        <Parameter Name="LWIP_UDPLITE"/>
        <Parameter Name="UDP_TTL"/>
        <Parameter Name="LWIP_NETBUF_RECVINFO"/>
        <Parameter Name="MEMP_NUM_UDP_PCB"/>
        <Parameter Name="LWIP_TCP"/>
        <Parameter Name="TCP_TTL"/>
        <Parameter Name="TCP_WND"/>
        <Parameter Name="TCP_MAXRTX"/>
        <Parameter Name="TCP_SYNMAXRTX"/>
        <Parameter Name="TCP_QUEUE_OOSEQ"/>
        <Parameter Name="TCP_MSS"/>
        <Parameter Name="TCP_CALCULATE_EFF_SEND_MSS"/>
        <Parameter Name="TCP_SND_BUF"/>
        <Parameter Name="TCP_SND_QUEUELEN"/>
        <Parameter Name="TCP_SNDLOWAT"/>
        <Parameter Name="TCP_SNDQUEUELOWAT"/>
        <Parameter Name="TCP_OOSEQ_MAX_BYTES"/>
        <Parameter Name="TCP_OOSEQ_MAX_PBUFS"/>
        <Parameter Name="TCP_LISTEN_BACKLOG"/>
        <Parameter Name="TCP_DEFAULT_LISTEN_BACKLOG"/>
        <Parameter Name="TCP_OVERSIZE"/>
        <Parameter Name="LWIP_TCP_TIMESTAMPS"/>
        <Parameter Name="TCP_WND_UPDATE_THRESHOLD"/>
        <Parameter Name="LWIP_EVENT_API"/>
        <Parameter Name="LWIP_CALLBACK_API"/>
        <Parameter Name="MEMP_NUM_TCP_PCB"/>
        <Parameter Name="PBUF_LINK_HLEN"/>
        <Parameter Name="PBUF_POOL_BUFSIZE"/>
        <Parameter Name="PBUF_IP_HLEN"/>
        <Parameter Name="PBUF_TRANSPORT_HLEN"/>
        <Parameter Name="LWIP_NETIF_HOSTNAME"/>
        <Parameter Name="LWIP_NETIF_API"/>
        <Parameter Name="LWIP_NETIF_STATUS_CALLBACK"/>
        <Parameter Name="LWIP_NETIF_LINK_CALLBACK"/>
        <Parameter Name="LWIP_NETIF_REMOVE_CALLBACK"/>
        <Parameter Name="LWIP_NETIF_HWADDRHINT"/>
        <Parameter Name="LWIP_NETIF_LOOPBACK"/>
        <Parameter Name="LWIP_LOOPBACK_MAX_PBUFS"/>
        <Parameter Name="LWIP_NETIF_LOOPBACK_MULTITHREADING"/>
        <Parameter Name="LWIP_NETIF_TX_SINGLE_PBUF"/>
        <Parameter Name="LWIP_HAVE_LOOPIF"/>
        <Parameter Name="LWIP_HAVE_SLIPIF"/>
        <Parameter Name="TCPIP_THREAD_NAME"/>
        <Parameter Name="TCPIP_THREAD_STACKSIZE"/>
        <Parameter Name="TCPIP_THREAD_PRIO"/>
        <Parameter Name="TCPIP_MBOX_SIZE"/>
        <Parameter Name="SLIPIF_THREAD_NAME"/>
        <Parameter Name="SLIPIF_THREAD_STACKSIZE"/>
        <Parameter Name="SLIPIF_THREAD_PRIO"/>
        <Parameter Name="PPP_THREAD_NAME"/>
        <Parameter Name="PPP_THREAD_STACKSIZE"/>
        <Parameter Name="PPP_THREAD_PRIO"/>
        <Parameter Name="DEFAULT_THREAD_NAME"/>
        <Parameter Name="DEFAULT_THREAD_STACKSIZE"/>
        <Parameter Name="DEFAULT_THREAD_PRIO"/>
        <Parameter Name="DEFAULT_RAW_RECVMBOX_SIZE"/>
        <Parameter Name="DEFAULT_UDP_RECVMBOX_SIZE"/>
        <Parameter Name="DEFAULT_TCP_RECVMBOX_SIZE"/>
        <Parameter Name="DEFAULT_ACCEPTMBOX_SIZE"/>
        <Parameter Name="LWIP_TCPIP_CORE_LOCKING"/>
        <Parameter Name="LWIP_TCPIP_CORE_LOCKING_INPUT"/>
        <Parameter Name="LWIP_NETCONN"/>
        <Parameter Name="LWIP_TCPIP_TIMEOUT"/>
        <Parameter Name="LWIP_SOCKET"/>
        <Parameter Name="LWIP_COMPAT_SOCKETS"/>
        <Parameter Name="LWIP_POSIX_SOCKETS_IO_NAMES"/>
        <Parameter Name="LWIP_TCP_KEEPALIVE"/>
        <Parameter Name="LWIP_SO_SNDTIMEO"/>
        <Parameter Name="LWIP_SO_RCVTIMEO"/>
        <Parameter Name="LWIP_SO_RCVBUF"/>
        <Parameter Name="RECV_BUFSIZE_DEFAULT"/>
        <Parameter Name="SO_REUSE"/>
        <Parameter Name="SO_REUSE_RXTOALL"/>
        <Parameter Name="PPP_SUPPORT"/>
        <Parameter Name="PPPOE_SUPPORT"/>
        <Parameter Name="PPPOS_SUPPORT"/>
        <Parameter Name="NUM_PPP"/>
        <Parameter Name="PAP_SUPPORT"/>
        <Parameter Name="CHAP_SUPPORT"/>
        <Parameter Name="MSCHAP_SUPPORT"/>
        <Parameter Name="CCP_SUPPORT"/>
        <Parameter Name="CBCP_SUPPORT"/>
        <Parameter Name="VJ_SUPPORT"/>
        <Parameter Name="FSM_DEFTIMEOUT"/>
        <Parameter Name="FSM_DEFMAXTERMREQS"/>
        <Parameter Name="FSM_DEFMAXCONFREQS"/>
        <Parameter Name="FSM_DEFMAXNAKLOOPS"/>
        <Parameter Name="UPAP_DEFTIMEOUT"/>
        <Parameter Name="UPAP_DEFREQTIME"/>
        <Parameter Name="CHAP_DEFTIMEOUT"/>
        <Parameter Name="CHAP_DEFTRANSMITS"/>
        <Parameter Name="LCP_ECHOINTERVAL"/>
        <Parameter Name="LCP_MAXECHOFAILS"/>
        <Parameter Name="PPP_MAXIDLEFLAG"/>
        <Parameter Name="PPP_MTU"/>
        <Parameter Name="PPP_MAXMTU"/>
        <Parameter Name="PPP_MINMTU"/>
        <Parameter Name="PPP_MRU"/>
        <Parameter Name="PPP_MAXMRU"/>
        <Parameter Name="PPP_DEFMRU"/>
        <Parameter Name="PPP_MINMRU"/>
        <Parameter Name="MAXNAMELEN"/>
        <Parameter Name="MAXSECRETLEN"/>
        <Parameter Name="LWIP_DISABLE_TCP_SANITY_CHECKS"/>
        <Parameter Name="LWIP_DISABLE_MEMP_SANITY_CHECKS"/>
        <Parameter Name="LWIP_PERF"/>
        <Parameter Name="LWIP_STATS"/>
        <Parameter Name="LWIP_STATS_DISPLAY"/>
        <Parameter Name="LINK_STATS"/>
        <Parameter Name="ETHARP_STATS"/>
        <Parameter Name="IP_STATS"/>
        <Parameter Name="IPFRAG_STATS"/>
        <Parameter Name="ICMP_STATS"/>
        <Parameter Name="IGMP_STATS"/>
        <Parameter Name="UDP_STATS"/>
        <Parameter Name="TCP_STATS"/>
        <Parameter Name="MEM_STATS"/>
        <Parameter Name="MEMP_STATS"/>
        <Parameter Name="MEMP_STATS"/>
        <Parameter Name="SYS_STATS"/>
        <Parameter Name="CHECKSUM_BY_HARDWARE"/>
        <Parameter Name="CHECKSUM_GEN_IP"/>
        <Parameter Name="CHECKSUM_GEN_UDP"/>
        <Parameter Name="CHECKSUM_GEN_TCP"/>
        <Parameter Name="CHECKSUM_GEN_ICMP"/>
        <Parameter Name="CHECKSUM_CHECK_IP"/>
        <Parameter Name="CHECKSUM_CHECK_UDP"/>
        <Parameter Name="CHECKSUM_CHECK_TCP"/>
        <Parameter Name="LWIP_CHECKSUM_ON_COPY"/>
        <Parameter Name="LWIP_DBG_ON"/>
        <Parameter Name="LWIP_DBG_OFF"/>
        <Parameter Name="LWIP_DBG_MIN_LEVEL"/>
        <Parameter Name="LWIP_DBG_TYPES_ON"/>
        <Parameter Name="ETHARP_DEBUG"/>
        <Parameter Name="NETIF_DEBUG"/>
        <Parameter Name="PBUF_DEBUG"/>
        <Parameter Name="API_LIB_DEBUG"/>
        <Parameter Name="API_MSG_DEBUG"/>
        <Parameter Name="SOCKETS_DEBUG"/>
        <Parameter Name="ICMP_DEBUG"/>
        <Parameter Name="IGMP_DEBUG"/>
        <Parameter Name="INET_DEBUG"/>
        <Parameter Name="IP_DEBUG"/>
        <Parameter Name="IP_REASS_DEBUG"/>
        <Parameter Name="RAW_DEBUG"/>
        <Parameter Name="MEM_DEBUG"/>
        <Parameter Name="MEMP_DEBUG"/>
        <Parameter Name="SYS_DEBUG"/>
        <Parameter Name="TIMERS_DEBUG"/>
        <Parameter Name="TCP_DEBUG"/>
        <Parameter Name="TCP_INPUT_DEBUG"/>
        <Parameter Name="TCP_FR_DEBUG"/>
        <Parameter Name="TCP_RTO_DEBUG"/>
        <Parameter Name="TCP_CWND_DEBUG"/>
        <Parameter Name="TCP_WND_DEBUG"/>
        <Parameter Name="TCP_OUTPUT_DEBUG"/>
        <Parameter Name="TCP_RST_DEBUG"/>
        <Parameter Name="TCP_QLEN_DEBUG"/>
        <Parameter Name="UDP_DEBUG"/>
        <Parameter Name="TCPIP_DEBUG"/>
        <Parameter Name="PPP_DEBUG"/>
        <Parameter Name="SLIP_DEBUG"/>
        <Parameter Name="DHCP_DEBUG"/>
        <Parameter Name="AUTOIP_DEBUG"/>
        <Parameter Name="SNMP_MSG_DEBUG"/>
        <Parameter Name="SNMP_MIB_DEBUG"/>
        <Parameter Name="DNS_DEBUG"/>
        <Parameter Name="LWIP_PROVIDE_ERRNO"/>
    </RefMode>
    <ModeLogicOperator Name="OR">
        <Mode Name="Enabled">
            <ModeLogicOperator Name="XOR">
                <Mode Name="Enabled">
                    <SignalLogicalOp Name="AND">
                        <Signal IOMode="" Name="VS_Enabled"/>
                    </SignalLogicalOp>
                    <Semaphore>S_LWIP</Semaphore>
                </Mode>
            </ModeLogicOperator>
            <Condition Expression="MW_ETH_MW" Diagnostic="Active only with ETH IP configured"/>
        </Mode>
    </ModeLogicOperator>
<RefSignal Name="VS_Enabled" Virtual="true"/>
</IP>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<IP xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance"
	ns0:schemaLocation="http://mcd.rou.st.com/modules.php?name=mcu ../../../../../../../doc/V4/Development/Specifications/db/IP_Modes.xsd"
	xmlns="http://mcd.rou.st.com/modules.php?name=mcu"
	DBVersion="V4.0"
	IPType="middleware"
	IpGroup="Middleware"
	Name="MBEDTLS"
	Version="v2_11_0_Cube">
	<About>MBEDTLS: a light-weight open source cryptographic and SSL/TLS library written in C.</About>
	
	<!-- RefParameters for MBEDTLS -->
	<!-- RefParameters for MBEDTLS - Version-->
	<RefParameter Name="MBEDTLS_version" Comment="MBEDTLS version" DefaultValue="2.11.0" Type="string" Group="Version" TabName="Version and modes" Mode="Basic">
	    <PossibleValue Comment="Current version of MBEDTLS" Value="2.11.0"/>
	</RefParameter>

    <!-- RefParameters for MBEDTLS - RNG IP-->
	<RefParameter Name="MBEDTLS_RNG_IP" Comment="RNG IP" DefaultValue="HW_RNG" Type="List" Group="RNG dependency" TabName="Version and modes" Mode="Basic">
	    <Condition Diagnostic="" Expression="RNGUsed_ForRCC"/>
        <PossibleValue Comment="HW RNG" Value="HW_RNG" Semaphore="MBEDTLS_RNG_IP_HW_RNG"/>
        <PossibleValue Comment="SW RNG" Value="SW_RNG" Semaphore="MBEDTLS_RNG_IP_SW_RNG"/>
        <PossibleValue Comment="Custom RNG" Value="CUSTOM_RNG" Semaphore="MBEDTLS_RNG_IP_CUSTOM_RNG"/>
        <Description>Using available RNG SW or your own implementation will impact perfomances &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; HW RNG when RNG IP is available activated</Description>
	</RefParameter>
	<RefParameter Name="MBEDTLS_RNG_IP" Comment="RNG IP" DefaultValue="SW_RNG" Type="List" Group="RNG dependency" TabName="Version and modes" Mode="Basic">
	    <Condition Diagnostic="" Expression="!RNGUsed_ForRCC"/>
        <PossibleValue Comment="SW RNG" Value="SW_RNG" Semaphore="MBEDTLS_RNG_IP_SW_RNG"/>
        <PossibleValue Comment="Custom RNG" Value="CUSTOM_RNG" Semaphore="MBEDTLS_RNG_IP_CUSTOM_RNG"/>
        <Description>You can choose between available SW RNG or your own implementation. If available RNG IP should be activated to improve performances &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; SW RNG</Description>
	</RefParameter>
	<RefParameter Name="MBEDTLS_RNG_IP" Comment="RNG IP" DefaultValue="SW_RNG" Type="List" Group="RNG dependency" TabName="Version and modes" Mode="Basic">
        <PossibleValue Comment="SW RNG" Value="SW_RNG" Semaphore="MBEDTLS_RNG_IP_SW_RNG"/>
        <PossibleValue Comment="Custom RNG" Value="CUSTOM_RNG" Semaphore="MBEDTLS_RNG_IP_CUSTOM_RNG"/>
        <Description>You can choose between available SW RNG or your own implementation</Description>
	</RefParameter>

	<RefParameter Name="MBEDTLS_TCP_IP" Comment="TCP/IP stack" DefaultValue="1" Type="list" Group="TCP/IP stack" TabName="Version and modes" Mode="Basic">
	    <Condition Diagnostic="" Expression="S_LWIP &amp; S_FREERTOS"/>
	    <PossibleValue Comment="LWIP" Value="1" Semaphore="MBEDTLS_LWIP_TCP_IP_stack"/>
        <Description>TCP/IP stack activation&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; LWIP stack when LWIP and FreeRTOS activated&lt;br&gt;When set to “LWIP”, the LwIP init function is generated in net_socket.c within mbedtls_net_init() function. Up to user to call it.</Description>
	</RefParameter>
	<RefParameter Name="MBEDTLS_TCP_IP" Comment="TCP/IP stack" DefaultValue="0" Type="list" Group="TCP/IP stack" TabName="Version and modes" Mode="Basic">
	    <PossibleValue Comment="None" Value="0"/>
	    <PossibleValue Comment="User defined" Value="1" Semaphore="MBEDTLS_Other_TCP_IP_stack"/>
        <Description>TCP/IP stack activation &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; None</Description>
	</RefParameter>

	<!-- RefParameters for MBEDTLS - General settings-->
	<!-- MBEDTLS is hard-linked with LWIP then the information is displayed in grey without no possibility to change value-->
    <!-- <RefParameter Name="MBEDTLS_with_LWIP" Comment="LWIP" DefaultValue="1" Type="string" Group="MW configuration" TabName="Version and modes" Mode="Basic">
	    <PossibleValue Comment="LWIP" Value="1"/>
	</RefParameter> -->

    <!-- RefParameters for MBEDTLS - Feature support -->
    <RefParameter Name="MBEDTLS_HAVE_ASM" Comment="MBEDTLS_HAVE_ASM" DefaultValue="1" Type="list" Group="System support" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>The compiler has support for asm()&lt;br&gt;Used in:&lt;br&gt;- library/timing.c&lt;br&gt;- library/padlock.c&lt;br&gt;- include/mbedtls/bn_mul.h&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_NO_UDBL_DIVISION" Comment="MBEDTLS_NO_UDBL_DIVISION" DefaultValue="1" Type="list" Group="System support" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>The platform lacks support for double-width integer division (64-bit division on a 32-bit platform, 128-bit division on a 64-bit platform).&lt;br&gt;Used in:&lt;br&gt;- include/mbedtls/bignum.h&lt;br&gt;- library/bignum.c&lt;br&gt; The bignum code uses double-width division to speed up some operations. Double-width division is often implemented in software that needs to be linked with the program. The presence of a double-width integer type is usually detected automatically through preprocessor macros, but the automatic detection cannot know whether the code needs to and can be linked with an implementation of division for that type. By default division is assumed to be usable if the type is present. Uncomment this option to prevent the use of double-width division.&lt;br&gt;Note that division for the native integer type is always required. Furthermore, a 64-bit type is always required even on a 32-bit platform, but it need not support multiplication or division. In some cases it is also desirable to disable some double-width operations. For example, if double-width division is implemented in software, disabling it can reduce code size in some embedded targets.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HAVE_SSE2" Comment="MBEDTLS_HAVE_SSE2" DefaultValue="0" Type="list" Group="System support" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>CPU supports SSE2 instruction set &lt;br&gt;&lt;b&gt;&lt;b&gt;Default value: &lt;/b&gt;&lt;/b&gt;Not defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HAVE_TIME" Comment="MBEDTLS_HAVE_TIME" DefaultValue="1" Type="list" Group="System support" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>System has time.h and time(). The time does not need to be correct, only time differences are used,  by contrast with MBEDTLS_HAVE_TIME_DATE &lt;br&gt;Defining MBEDTLS_HAVE_TIME allows you to specify MBEDTLS_PLATFORM_TIME_ALT, MBEDTLS_PLATFORM_TIME_MACRO, MBEDTLS_PLATFORM_TIME_TYPE_MACRO and MBEDTLS_PLATFORM_STD_TIME.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HAVE_TIME_DATE" Comment="MBEDTLS_HAVE_TIME_DATE" DefaultValue="1" Type="list" Group="System support" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32H7 | STM32F7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>System has time.h and time(), gmtime() and the clock is correct. The time needs to be correct (not necesarily very accurate, but at least  the date should be correct). This is used to verify the validity period of  X.509 certificates. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HAVE_TIME_DATE" Comment="MBEDTLS_HAVE_TIME_DATE" DefaultValue="0" Type="list" Group="System support" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>System has time.h and time(), gmtime() and the clock is correct. The time needs to be correct (not necesarily very accurate, but at least  the date should be correct). This is used to verify the validity period of  X.509 certificates. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_MEMORY" Comment="MBEDTLS_PLATFORM_MEMORY" DefaultValue="0" Type="list" Group="System support" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the memory allocation layer. By default mbed TLS uses the system-provided calloc() and free(). This allows different allocators (self-implemented or provided) to be provided to the platform abstraction layer. &lt;br&gt; Enabling MBEDTLS_PLATFORM_MEMORY without the MBEDTLS_PLATFORM_{FREE,CALLOC}_MACROs will provide ""mbedtls_platform_set_calloc_free()"" allowing you to set an alternative calloc() and free() function pointer at runtime. &lt;br&gt; Enabling MBEDTLS_PLATFORM_MEMORY and specifying MBEDTLS_PLATFORM_{CALLOC,FREE}_MACROs will allow you to specify the alternate function at compile time.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_MEMORY" Comment="MBEDTLS_PLATFORM_MEMORY" DefaultValue="0" Type="list" Group="System support" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the memory allocation layer. By default mbed TLS uses the system-provided calloc() and free(). This allows different allocators (self-implemented or provided) to be provided to the platform abstraction layer. &lt;br&gt; Enabling MBEDTLS_PLATFORM_MEMORY without the MBEDTLS_PLATFORM_{FREE,CALLOC}_MACROs will provide ""mbedtls_platform_set_calloc_free()"" allowing you to set an alternative calloc() and free() function pointer at runtime. &lt;br&gt; Enabling MBEDTLS_PLATFORM_MEMORY and specifying MBEDTLS_PLATFORM_{CALLOC,FREE}_MACROs will allow you to specify the alternate function at compile time.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_NO_STD_FUNCTIONS" Comment="MBEDTLS_PLATFORM_NO_STD_FUNCTIONS" DefaultValue="0" Type="list" Group="System support" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Do not assign standard functions in the platform layer (e.g. calloc() to MBEDTLS_PLATFORM_STD_CALLOC and printf() to MBEDTLS_PLATFORM_STD_PRINTF) &lt;br&gt; This makes sure there are no linking errors on platforms that do not support  these functions. You will HAVE to provide alternatives, either at runtime via the platform_set_xxx() functions or at compile time by setting the MBEDTLS_PLATFORM_STD_XXX defines, or enabling a MBEDTLS_PLATFORM_XXX_MACRO.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_NO_STD_FUNCTIONS" Comment="MBEDTLS_PLATFORM_NO_STD_FUNCTIONS" DefaultValue="0" Type="list" Group="System support" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Do not assign standard functions in the platform layer (e.g. calloc() to MBEDTLS_PLATFORM_STD_CALLOC and printf() to MBEDTLS_PLATFORM_STD_PRINTF) &lt;br&gt; This makes sure there are no linking errors on platforms that do not support  these functions. You will HAVE to provide alternatives, either at runtime via the platform_set_xxx() functions or at compile time by setting the MBEDTLS_PLATFORM_STD_XXX defines, or enabling a MBEDTLS_PLATFORM_XXX_MACRO.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_EXIT_ALT" Comment="MBEDTLS_PLATFORM_EXIT_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_EXIT_ALT" Comment="MBEDTLS_PLATFORM_EXIT_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_TIME_ALT" Comment="MBEDTLS_PLATFORM_TIME_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_TIME_ALT" Comment="MBEDTLS_PLATFORM_TIME_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_FPRINTF_ALT" Comment="MBEDTLS_PLATFORM_FPRINTF_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_FPRINTF_ALT" Comment="MBEDTLS_PLATFORM_FPRINTF_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_PRINTF_ALT" Comment="MBEDTLS_PLATFORM_PRINTF_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_PRINTF_ALT" Comment="MBEDTLS_PLATFORM_PRINTF_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_SNPRINTF_ALT" Comment="MBEDTLS_PLATFORM_SNPRINTF_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_SNPRINTF_ALT" Comment="MBEDTLS_PLATFORM_SNPRINTF_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_NV_SEED_ALT" Comment="MBEDTLS_PLATFORM_NV_SEED_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_NV_SEED_ALT" Comment="MBEDTLS_PLATFORM_NV_SEED_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT" Comment="MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT" Comment="MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>mbed TLS supports the function in the platform abstraction layer.&lt;br&gt;WARNING! MBEDTLS_PLATFORM_XXX_ALT cannot be defined at the same time as MBEDTLS_PLATFORM_XXX_MACRO!&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DEPRECATED_WARNING" Comment="MBEDTLS_DEPRECATED_WARNING" DefaultValue="0" Type="list" Group="System support" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Mark deprecated functions so that they generate a warning if used. Functions deprecated in one version will usually be removed in the next version. You can enable this to help you prepare the transition to a new major version by making sure your code is not using these functions. &lt;br&gt; This only works with GCC and Clang. With other compilers, you may want to use MBEDTLS_DEPRECATED_REMOVED &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DEPRECATED_REMOVED" Comment="MBEDTLS_DEPRECATED_REMOVED" DefaultValue="0" Type="list" Group="System support" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Remove deprecated functions so that they generate an error if used. Functions deprecated in one version will usually be removed in the next version. You can enable this to help you prepare the transition to a new major version by making sure your code is not using these functions. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Alternate implementations -->

    <RefParameter Name="MBEDTLS_TIMING_ALT" Comment="MBEDTLS_TIMING_ALT" DefaultValue="1" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_TIMING_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Uncomment to provide your own alternate implementation for mbedtls_timing_hardclock(),  mbedtls_timing_get_timer(), mbedtls_set_alarm(), mbedtls_set/get_delay()&lt;br&gt;Only works if you have MBEDTLS_TIMING_C enabled.&lt;br&gt;You will need to provide a header ""timing_alt.h"" and an implementation at compile time. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_TIMING_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_TIMING_ALT" Comment="MBEDTLS_TIMING_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Uncomment to provide your own alternate implementation for mbedtls_timing_hardclock(),  mbedtls_timing_get_timer(), mbedtls_set_alarm(), mbedtls_set/get_delay()&lt;br&gt;Only works if you have MBEDTLS_TIMING_C enabled.&lt;br&gt;You will need to provide a header ""timing_alt.h"" and an implementation at compile time. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_AES_ALT" Comment="MBEDTLS_AES_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;/b&gt;
                    &lt;/b&gt; \warning   MD2, MD4, MD5, ARC4, DES and SHA-1 are considered weak and their
                                 use constitutes a security risk. If possible, we recommend
                                 avoiding dependencies on them, and considering stronger message
                                 digests and ciphers instead.
                     &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ARC4_ALT" Comment="MBEDTLS_ARC4_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ARIA_ALT" Comment="MBEDTLS_ARIA_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_BLOWFISH_ALT" Comment="MBEDTLS_BLOWFISH_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
     </RefParameter>

    <RefParameter Name="MBEDTLS_CAMELLIA_ALT" Comment="MBEDTLS_CAMELLIA_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CCM_ALT" Comment="MBEDTLS_CCM_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CMAC_ALT" Comment="MBEDTLS_CMAC_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DES_ALT" Comment="MBEDTLS_DES_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DHM_ALT" Comment="MBEDTLS_DHM_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECJPAKE_ALT" Comment="MBEDTLS_ECJPAKE_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_GCM_ALT" Comment="MBEDTLS_GCM_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MD2_ALT" Comment="MBEDTLS_MD2_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MD4_ALT" Comment="MBEDTLS_MD4_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MD5_ALT" Comment="MBEDTLS_MD5_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_RIPEMD160_ALT" Comment="MBEDTLS_RIPEMD160_ALT" DefaultValue="0" Group="Modules" Type="list" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_RSA_ALT" Comment="MBEDTLS_RSA_ALT" DefaultValue="0" Group="Modules" Type="list" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA1_ALT" Comment="MBEDTLS_SHA1_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA256_ALT" Comment="MBEDTLS_SHA256_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA512_ALT" Comment="MBEDTLS_SHA512_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_XTEA_ALT" Comment="MBEDTLS_XTEA_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_ALT" Comment="MBEDTLS_ECP_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of this module (e.g. platform specific assembly optimized implementations). Keep in mind that the function prototypes should remain the same. This replaces the whole module. If you only want to replace one of the functions, use one of the MBEDTLS__FUNCTION_NAME__ALT flags. &lt;br&gt; When replacing the elliptic curve module, pleace consider, that it is implemented with two .c files: &lt;br&gt; -ecp.c &lt;br&gt; - ecp_curves.c&lt;br&gt; You can replace them very much like all the other MBEDTLS__MODULE_NAME__ALT macros as described above. The only difference is that you have to make sure that you provide functionality for both .c files.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MD2_PROCESS_ALT" Comment="MBEDTLS_MD2_PROCESS_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.
                    &lt;br&gt;
                    &lt;br&gt; \warning   MD2, MD4, MD5, DES and SHA-1 are considered weak and their use constitutes a security risk. If possible, we recommend avoiding dependencies on them, and considering stronger message digests and ciphers instead.
                    &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MD4_PROCESS_ALT" Comment="MBEDTLS_MD4_PROCESS_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MD5_PROCESS_ALT" Comment="MBEDTLS_MD5_PROCESS_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_MD5_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
        </RefParameter>

    <RefParameter Name="MBEDTLS_MD5_PROCESS_ALT" Comment="MBEDTLS_MD5_PROCESS_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MD5_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_RIPEMD160_PROCESS_ALT" Comment="MBEDTLS_RIPEMD160_PROCESS_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA1_PROCESS_ALT" Comment="MBEDTLS_SHA1_PROCESS_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_SHA1_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA1_PROCESS_ALT" Comment="MBEDTLS_SHA1_PROCESS_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SHA1_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA256_PROCESS_ALT" Comment="MBEDTLS_SHA256_PROCESS_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_SHA256_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA256_PROCESS_ALT" Comment="MBEDTLS_SHA256_PROCESS_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SHA256_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA512_PROCESS_ALT" Comment="MBEDTLS_SHA512_PROCESS_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DES_SETKEY_ALT" Comment="MBEDTLS_DES_SETKEY_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DES_CRYPT_ECB_ALT" Comment="MBEDTLS_DES_CRYPT_ECB_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_DES_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DES_CRYPT_ECB_ALT" Comment="MBEDTLS_DES_CRYPT_ECB_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_DES_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DES3_CRYPT_ECB_ALT" Comment="MBEDTLS_DES3_CRYPT_ECB_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_DES_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DES3_CRYPT_ECB_ALT" Comment="MBEDTLS_DES3_CRYPT_ECB_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_DES_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_AES_SETKEY_ENC_ALT" Comment="MBEDTLS_AES_SETKEY_ENC_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_AES_SETKEY_DEC_ALT" Comment="MBEDTLS_AES_SETKEY_DEC_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_AES_ENCRYPT_ALT" Comment="MBEDTLS_AES_ENCRYPT_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_AES_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_AES_ENCRYPT_ALT" Comment="MBEDTLS_AES_ENCRYPT_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
    <Condition Diagnostic="" Expression="MBEDTLS_AES_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_AES_DECRYPT_ALT" Comment="MBEDTLS_AES_DECRYPT_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_AES_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_AES_DECRYPT_ALT" Comment="MBEDTLS_AES_DECRYPT_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_AES_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECDH_GEN_PUBLIC_ALT" Comment="MBEDTLS_ECDH_GEN_PUBLIC_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECDH_COMPUTE_SHARED_ALT" Comment="MBEDTLS_ECDH_COMPUTE_SHARED_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECDSA_VERIFY_ALT" Comment="MBEDTLS_ECDSA_VERIFY_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECDSA_SIGN_ALT" Comment="MBEDTLS_ECDSA_SIGN_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECDSA_GENKEY_ALT" Comment="MBEDTLS_ECDSA_GENKEY_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use your alternate core implementation of symmetric crypto or hash function. Keep in mind that function prototypes should remain the same. This replaces only one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS__MODULE_NAME__ALT flags.&lt;br&gt;Note: if you use the AES_xxx_ALT macros, then is is recommended to also set MBEDTLS_AES_ROM_TABLES in order to help the linker garbage-collect the AES tables.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_INTERNAL_ALT" Comment="MBEDTLS_ECP_INTERNAL_ALT" DefaultValue="0" Type="list" Group="Modules" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_RANDOMIZE_JAC_ALT" Comment="MBEDTLS_ECP_RANDOMIZE_JAC_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_RANDOMIZE_JAC_ALT" Comment="MBEDTLS_ECP_RANDOMIZE_JAC_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>
    
    <RefParameter Name="MBEDTLS_ECP_ADD_MIXED_ALT" Comment="MBEDTLS_ECP_ADD_MIXED_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_ADD_MIXED_ALT" Comment="MBEDTLS_ECP_ADD_MIXED_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DOUBLE_JAC_ALT" Comment="MBEDTLS_ECP_DOUBLE_JAC_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DOUBLE_JAC_ALT" Comment="MBEDTLS_ECP_DOUBLE_JAC_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT" Comment="MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT" Comment="MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_NORMALIZE_JAC_ALT" Comment="MBEDTLS_ECP_NORMALIZE_JAC_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_NORMALIZE_JAC_ALT" Comment="MBEDTLS_ECP_NORMALIZE_JAC_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT" Comment="MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT" Comment="MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_RANDOMIZE_MXZ_ALT" Comment="MBEDTLS_ECP_RANDOMIZE_MXZ_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_RANDOMIZE_MXZ_ALT" Comment="MBEDTLS_ECP_RANDOMIZE_MXZ_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_NORMALIZE_MXZ_ALT" Comment="MBEDTLS_ECP_NORMALIZE_MXZ_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_NORMALIZE_MXZ_ALT" Comment="MBEDTLS_ECP_NORMALIZE_MXZ_ALT" DefaultValue="0" Type="list" Group="Functions" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="!MBEDTLS_ECP_INTERNAL_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Expose a part of the internal interface of the Elliptic Curve Point module.&lt;br&gt;Support for Weierstrass curves with Jacobi representation&lt;br&gt;MBEDTLS_ECP__FUNCTION_NAME__ALT: Uncomment a macro to let mbed TLS use your  * alternative core implementation of elliptic curve arithmetic. Keep in mind that function prototypes should remain the same.&lt;br&gt; This partially replaces one function. The header file from mbed TLS is still used, in contrast to the MBEDTLS_ECP_ALT flag. The original implementation is still present and it is used for group structures not supported by the alternative.&lt;br&gt; Any of these options become available by defining MBEDTLS_ECP_INTERNAL_ALT and implementing the following functions:&lt;br&gt;unsigned char mbedtls_internal_ecp_grp_capable( const mbedtls_ecp_group *grp )&lt;br&gt; int  mbedtls_internal_ecp_init( const mbedtls_ecp_group *grp )&lt;br&gt; void mbedtls_internal_ecp_deinit( const mbedtls_ecp_group *grp )&lt;br&gt; The mbedtls_internal_ecp_grp_capable function should return 1 if the replacement functions implement arithmetic for the given group and 0 otherwise.&lt;br&gt; The functions mbedtls_internal_ecp_init and mbedtls_internal_ecp_deinit are called before and after each point operation and provide an opportunity to implement optimized set up and tear down instructions.&lt;br&gt;Example: In case you uncomment MBEDTLS_ECP_INTERNAL_ALT and MBEDTLS_ECP_DOUBLE_JAC_ALT, mbed TLS will still provide the ecp_double_jac function, but will use your mbedtls_internal_ecp_double_jac if the group is supported (your mbedtls_internal_ecp_grp_capable function returns 1 when receives it as an argument). If the group is not supported then the original implementation is used. The other functions and the definition of mbedtls_ecp_group and mbedtls_ecp_point will not change, so your implementation of mbedtls_internal_ecp_double_jac and mbedtls_internal_ecp_grp_capable must be compatible with this definition. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require: &lt;/b&gt;MBEDTLS_ECP_INTERNAL_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_TEST_NULL_ENTROPY" Comment="MBEDTLS_TEST_NULL_ENTROPY" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ENTROPY_C &amp; MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables testing and use of mbed TLS without any configured entropy sources. This permits use of the library on platforms before an entropy source has  been integrated (see for example the MBEDTLS_ENTROPY_HARDWARE_ALT or the MBEDTLS_ENTROPY_NV_SEED switches). &lt;br&gt; WARNING! This switch MUST be disabled in production builds, and is suitable only for development. Enabling the switch negates any security provided by the library.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C &amp; MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_TEST_NULL_ENTROPY" Comment="MBEDTLS_TEST_NULL_ENTROPY" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables testing and use of mbed TLS without any configured entropy sources. This permits use of the library on platforms before an entropy source has  been integrated (see for example the MBEDTLS_ENTROPY_HARDWARE_ALT or the MBEDTLS_ENTROPY_NV_SEED switches). &lt;br&gt; WARNING! This switch MUST be disabled in production builds, and is suitable only for development. Enabling the switch negates any security provided by the library.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C &amp; MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ENTROPY_HARDWARE_ALT" Comment="MBEDTLS_ENTROPY_HARDWARE_ALT" DefaultValue="1" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_RNG_IP_HW_RNG | MBEDTLS_RNG_IP_CUSTOM_RNG"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Your own implementation of a hardware entropy collector. &lt;br&gt; Your function must be called \c mbedtls_hardware_poll(), have the same  prototype as declared in entropy_poll.h, and accept NULL as first argument. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_HARDWARE_ALT" Comment="MBEDTLS_ENTROPY_HARDWARE_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Your own implementation of a hardware entropy collector. &lt;br&gt; Your function must be called \c mbedtls_hardware_poll(), have the same  prototype as declared in entropy_poll.h, and accept NULL as first argument. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>
<!--
    <RefParameter Name="MBEDTLS_ENTROPY_HARDWARE_ALT" Comment="MBEDTLS_ENTROPY_HARDWARE_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Your own implementation of a hardware entropy collector. &lt;br&gt; Your function must be called \c mbedtls_hardware_poll(), have the same  prototype as declared in entropy_poll.h, and accept NULL as first argument. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_HARDWARE_ALT" Comment="MBEDTLS_ENTROPY_HARDWARE_ALT" DefaultValue="1" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F4"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Your own implementation of a hardware entropy collector. &lt;br&gt; Your function must be called \c mbedtls_hardware_poll(), have the same  prototype as declared in entropy_poll.h, and accept NULL as first argument. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ENTROPY_HARDWARE_ALT" Comment="MBEDTLS_ENTROPY_HARDWARE_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Your own implementation of a hardware entropy collector. &lt;br&gt; Your function must be called \c mbedtls_hardware_poll(), have the same  prototype as declared in entropy_poll.h, and accept NULL as first argument. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>
-->

    <RefParameter Name="MBEDTLS_AES_FEWER_TABLES" Comment="MBEDTLS_AES_FEWER_TABLES" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use less ROM/RAM for AES tables.
                     &lt;br&gt;Uncommenting this macro omits 75% of the AES tables from ROM / RAM (depending on the value of \c MBEDTLS_AES_ROM_TABLES) by computing their values on the fly during operations (the tables are entry-wise rotations of one another).
                     &lt;br&gt;Tradeoff: Uncommenting this reduces the RAM / ROM footprint by ~6kb but at the cost of more arithmetic operations during runtime. Specifically, one has to compare 4 accesses within different tables to 4 accesses with additional arithmetic operations within the same table. The performance gain/loss depends on the system and memory details.
                     &lt;br&gt;This option is independent of \c MBEDTLS_AES_ROM_TABLES.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_AES_ROM_TABLES" Comment="MBEDTLS_AES_ROM_TABLES" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Store the AES tables in ROM &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_AES_ROM_TABLES" Comment="MBEDTLS_AES_ROM_TABLES" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Store the AES tables in ROM &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CAMELLIA_SMALL_MEMORY" Comment="MBEDTLS_CAMELLIA_SMALL_MEMORY" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Use less ROM for the Camellia implementation (saves about 768 bytes). &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CIPHER_MODE_CBC" Comment="MBEDTLS_CIPHER_MODE_CBC" DefaultValue="1" Type="list" Group="Ciphering" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable Cipher Block Chaining mode (CBC) for symmetric ciphers. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CIPHER_MODE_CBC" Comment="MBEDTLS_CIPHER_MODE_CBC" DefaultValue="0" Type="list" Group="Ciphering" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable Cipher Block Chaining mode (CBC) for symmetric ciphers. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CIPHER_MODE_CFB" Comment="MBEDTLS_CIPHER_MODE_CFB" DefaultValue="1" Type="list" Group="Ciphering" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable Cipher Feedback mode (CFB) for symmetric ciphers &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CIPHER_MODE_CFB" Comment="MBEDTLS_CIPHER_MODE_CFB" DefaultValue="0" Type="list" Group="Ciphering" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable Cipher Feedback mode (CFB) for symmetric ciphers &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>
 
    <RefParameter Name="MBEDTLS_CIPHER_MODE_CTR" Comment="MBEDTLS_CIPHER_MODE_CTR" DefaultValue="1" Type="list" Group="Ciphering" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable Counter Block Cipher mode (CTR) for symmetric ciphers &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CIPHER_MODE_CTR" Comment="MBEDTLS_CIPHER_MODE_CTR" DefaultValue="0" Type="list" Group="Ciphering" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable Counter Block Cipher mode (CTR) for symmetric ciphers &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CIPHER_MODE_OFB" Comment="MBEDTLS_CIPHER_MODE_OFB" DefaultValue="1" Type="list" Group="Ciphering" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable Output Feedback mode (OFB) for symmetric ciphers.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CIPHER_MODE_XTS" Comment="MBEDTLS_CIPHER_MODE_XTS" DefaultValue="1" Type="list" Group="Ciphering" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable Xor-encrypt-xor with ciphertext stealing mode (XTS) for AES. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CIPHER_NULL_CIPHER" Comment="MBEDTLS_CIPHER_NULL_CIPHER" DefaultValue="0" Type="list" Group="Ciphering" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable NULL cipher. &lt;br&gt; WARNING!: Only do so when you know what you are doing. This allows for encryption or channels without any security!&lt;br&gt;Requires MBEDTLS_ENABLE_WEAK_CIPHERSUITES as well to enable the following ciphersuites:&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_NULL_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_NULL_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_NULL_MD5&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_NULL_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_NULL_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_NULL_SHA&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Feature support - Padding modes -->

    <RefParameter Name="MBEDTLS_CIPHER_PADDING_PKCS7" Comment="MBEDTLS_CIPHER_PADDING_PKCS7" DefaultValue="1" Type="list" Group="Ciphering" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>MBEDTLS_CIPHER_PADDING_XXX: support for specific padding modes in the cipher layer with cipher modes that support padding (e.g. CBC) &lt;br&gt; If you disable all padding modes, only full blocks can be used with CBC. Enable padding modes in the cipher layer. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CIPHER_PADDING_PKCS7" Comment="MBEDTLS_CIPHER_PADDING_PKCS7" DefaultValue="0" Type="list" Group="Ciphering" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>MBEDTLS_CIPHER_PADDING_XXX: support for specific padding modes in the cipher layer with cipher modes that support padding (e.g. CBC) &lt;br&gt; If you disable all padding modes, only full blocks can be used with CBC. Enable padding modes in the cipher layer. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS" Comment="MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS" DefaultValue="1" Type="list" Group="Ciphering" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>MBEDTLS_CIPHER_PADDING_XXX: support for specific padding modes in the cipher layer with cipher modes that support padding (e.g. CBC) &lt;br&gt; If you disable all padding modes, only full blocks can be used with CBC. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS" Comment="MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS" DefaultValue="0" Type="list" Group="Ciphering" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>MBEDTLS_CIPHER_PADDING_XXX: support for specific padding modes in the cipher layer with cipher modes that support padding (e.g. CBC) &lt;br&gt; If you disable all padding modes, only full blocks can be used with CBC. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN" Comment="MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN" DefaultValue="1" Type="list" Group="Ciphering" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Uncomment or comment macros to add support for specific padding modes in the cipher layer with cipher modes that support padding (e.g. CBC) &lt;br&gt; If you disable all padding modes, only full blocks can be used with CBC. Enable padding modes in the cipher layer. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN" Comment="MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN" DefaultValue="0" Type="list" Group="Ciphering" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>MBEDTLS_CIPHER_PADDING_XXX: support for specific padding modes in the cipher layer with cipher modes that support padding (e.g. CBC) &lt;br&gt; If you disable all padding modes, only full blocks can be used with CBC. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CIPHER_PADDING_ZEROS" Comment="MBEDTLS_CIPHER_PADDING_ZEROS" DefaultValue="1" Type="list" Group="Ciphering" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>MBEDTLS_CIPHER_PADDING_XXX: support for specific padding modes in the cipher layer with cipher modes that support padding (e.g. CBC) &lt;br&gt; If you disable all padding modes, only full blocks can be used with CBC. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CIPHER_PADDING_ZEROS" Comment="MBEDTLS_CIPHER_PADDING_ZEROS" DefaultValue="0" Type="list" Group="Ciphering" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>MBEDTLS_CIPHER_PADDING_XXX: support for specific padding modes in the cipher layer with cipher modes that support padding (e.g. CBC) &lt;br&gt; If you disable all padding modes, only full blocks can be used with CBC. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Feature support - Cipher suites -->

    <RefParameter Name="MBEDTLS_ENABLE_WEAK_CIPHERSUITES" Comment="MBEDTLS_ENABLE_WEAK_CIPHERSUITES" DefaultValue="0" Type="list" Group="Ciphering" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable weak ciphersuites in SSL / TLS &lt;br&gt; WARNING!: Only do so when you know what you are doing. This allows for channels with virtually no security at all! &lt;br&gt; This enables the following ciphersuites: &lt;br&gt;       MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA &lt;br&gt;      MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA&lt;br&gt;
                     &lt;br&gt;
                     \warning   DES is considered a weak cipher and its use constitutes a security risk. We recommend considering stronger ciphers instead.&lt;br&gt;
                     &lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_REMOVE_ARC4_CIPHERSUITES" Comment="MBEDTLS_REMOVE_ARC4_CIPHERSUITES" DefaultValue="1" Type="list" Group="Ciphering" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Remove RC4 ciphersuites by default in SSL / TLS. &lt;br&gt; This flag removes the ciphersuites based on RC4 from the default list as returned by mbedtls_ssl_list_ciphersuites(). However, it is still possible to enable (some of) them with mbedtls_ssl_conf_ciphersuites() by including them explicitly. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_REMOVE_ARC4_CIPHERSUITES" Comment="MBEDTLS_REMOVE_ARC4_CIPHERSUITES" DefaultValue="0" Type="list" Group="Ciphering" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Remove RC4 ciphersuites by default in SSL / TLS. &lt;br&gt; This flag removes the ciphersuites based on RC4 from the default list as returned by mbedtls_ssl_list_ciphersuites(). However, it is still possible to enable (some of) them with mbedtls_ssl_conf_ciphersuites() by including them explicitly. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Feature support - Elliptic curves -->

    <RefParameter Name="MBEDTLS_ECP_DP_SECP192R1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP192R1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DP_SECP192R1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP192R1_ENABLED" DefaultValue="0" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_SECP224R1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP224R1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DP_SECP224R1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP224R1_ENABLED" DefaultValue="0" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_SECP256R1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP256R1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_SECP384R1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP384R1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_SECP521R1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP521R1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DP_SECP521R1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP521R1_ENABLED" DefaultValue="0" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_SECP192K1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP192K1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DP_SECP192K1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP192K1_ENABLED" DefaultValue="0" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_SECP224K1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP224K1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DP_SECP224K1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP224K1_ENABLED" DefaultValue="0" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_SECP256K1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP256K1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DP_SECP256K1_ENABLED" Comment="MBEDTLS_ECP_DP_SECP256K1_ENABLED" DefaultValue="0" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_BP256R1_ENABLED" Comment="MBEDTLS_ECP_DP_BP256R1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DP_BP256R1_ENABLED" Comment="MBEDTLS_ECP_DP_BP256R1_ENABLED" DefaultValue="0" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_BP384R1_ENABLED" Comment="MBEDTLS_ECP_DP_BP384R1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DP_BP384R1_ENABLED" Comment="MBEDTLS_ECP_DP_BP384R1_ENABLED" DefaultValue="0" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_BP512R1_ENABLED" Comment="MBEDTLS_ECP_DP_BP512R1_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DP_BP512R1_ENABLED" Comment="MBEDTLS_ECP_DP_BP512R1_ENABLED" DefaultValue="0" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_CURVE25519_ENABLED" Comment="MBEDTLS_ECP_DP_CURVE25519_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_DP_CURVE25519_ENABLED" Comment="MBEDTLS_ECP_DP_CURVE25519_ENABLED" DefaultValue="0" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_DP_CURVE448_ENABLED" Comment="MBEDTLS_ECP_DP_CURVE448_ENABLED" DefaultValue="1" Type="list" Group="Elliptic curves" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enables this specific curve within the Elliptic Curve module. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Feature support - General -->
    
    <RefParameter Name="MBEDTLS_ECP_NIST_OPTIM" Comment="MBEDTLS_ECP_NIST_OPTIM" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable specific 'modulo p' routines for each NIST prime. &lt;br&gt; Depending on the prime and architecture, makes operations 4 to 8 times faster on the corresponding curve. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECDSA_DETERMINISTIC" Comment="MBEDTLS_ECDSA_DETERMINISTIC" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_HMAC_DRBG_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable deterministic ECDSA (RFC 6979). &lt;br&gt; Standard ECDSA is ""fragile"" in the sense that lack of entropy when signing may result in a compromise of the long-term signing key. This is avoided by the deterministic variant. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECDSA_DETERMINISTIC" Comment="MBEDTLS_ECDSA_DETERMINISTIC" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HMAC_DRBG_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable deterministic ECDSA (RFC 6979). &lt;br&gt; Standard ECDSA is ""fragile"" in the sense that lack of entropy when signing may result in a compromise of the long-term signing key. This is avoided by the deterministic variant. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECDSA_DETERMINISTIC" Comment="MBEDTLS_ECDSA_DETERMINISTIC" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable deterministic ECDSA (RFC 6979). &lt;br&gt; Standard ECDSA is ""fragile"" in the sense that lack of entropy when signing may result in a compromise of the long-term signing key. This is avoided by the deterministic variant. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECDSA_DETERMINISTIC" Comment="MBEDTLS_ECDSA_DETERMINISTIC" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable deterministic ECDSA (RFC 6979). &lt;br&gt; Standard ECDSA is ""fragile"" in the sense that lack of entropy when signing may result in a compromise of the long-term signing key. This is avoided by the deterministic variant. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_PSK_ENABLED" DefaultValue="1" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_PSK_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED" DefaultValue="1" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="(MBEDTLS_DHM_C &amp; (STM32F7 | STM32H7))"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the DHE-PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;br&gt;\warning    Using DHE constitutes a security risk as it is not possible to validate custom DH parameters.&lt;br&gt;If possible, it is recommended users should consider preferring other methods of key exchange.&lt;br&gt;See dhm.h for more details.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_DHM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_DHM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the DHE-PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;br&gt;\warning    Using DHE constitutes a security risk as it is not possible to validate custom DH parameters.&lt;br&gt;If possible, it is recommended users should consider preferring other methods of key exchange.&lt;br&gt;See dhm.h for more details.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_DHM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the DHE-PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;br&gt;\warning    Using DHE constitutes a security risk as it is not possible to validate custom DH parameters.&lt;br&gt;If possible, it is recommended users should consider preferring other methods of key exchange.&lt;br&gt;See dhm.h for more details.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_DHM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the DHE-PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;br&gt;\warning    Using DHE constitutes a security risk as it is not possible to validate custom DH parameters.&lt;br&gt;If possible, it is recommended users should consider preferring other methods of key exchange.&lt;br&gt;See dhm.h for more details.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_DHM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED" DefaultValue="1" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="(MBEDTLS_ECDH_C &amp; (STM32F7 | STM32H7))"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDHE-PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256vMBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECDH_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDHE-PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256vMBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDHE-PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256vMBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDHE-PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256vMBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED" DefaultValue="1" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_RSA_C  &amp; MBEDTLS_PKCS1_V15  &amp; MBEDTLS_X509_CRT_PARSE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA-PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C  &amp; MBEDTLS_PKCS1_V15  &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_RSA_C  &amp; MBEDTLS_PKCS1_V15  &amp; MBEDTLS_X509_CRT_PARSE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA-PSK based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C  &amp; MBEDTLS_PKCS1_V15  &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA-PSK based ciphersuite modes in SSL / TLS. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C  &amp; MBEDTLS_PKCS1_V15  &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA-PSK based ciphersuite modes in SSL / TLS. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C  &amp; MBEDTLS_PKCS1_V15  &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_RSA_ENABLED" DefaultValue="1" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA-only based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_MD5&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA-only based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_MD5&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA-only based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_MD5&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt;  Enabled(#define&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA-only based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_MD5&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED" DefaultValue="1" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_DHM_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the DHE-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;&lt;br&gt; \warning    Using DHE constitutes a security risk as it is not possible to validate custom DH parameters.&lt;br&gt; If possible, it is recommended users should consider preferring other methods of key exchange.&lt;br&gt;See dhm.h for more details.&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_DHM_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_DHM_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the DHE-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;&lt;br&gt; \warning    Using DHE constitutes a security risk as it is not possible to validate custom DH parameters.&lt;br&gt; If possible, it is recommended users should consider preferring other methods of key exchange.&lt;br&gt;See dhm.h for more details.&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_DHM_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the DHE-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;&lt;br&gt; \warning    Using DHE constitutes a security risk as it is not possible to validate custom DH parameters.&lt;br&gt; If possible, it is recommended users should consider preferring other methods of key exchange.&lt;br&gt;See dhm.h for more details.&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_DHM_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the DHE-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;&lt;br&gt; \warning    Using DHE constitutes a security risk as it is not possible to validate custom DH parameters.&lt;br&gt; If possible, it is recommended users should consider preferring other methods of key exchange.&lt;br&gt;See dhm.h for more details.&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_DHM_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED" DefaultValue="1" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECDH_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDHE-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECDH_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDHE-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDHE-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDHE-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_RSA_C &amp; MBEDTLS_PKCS1_V15 &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED" DefaultValue="1" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECDH_C &amp; MBEDTLS_ECDSA_C &amp; MBEDTLS_X509_CRT_PARSE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDHE-ECDSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_ECDSA_C &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDHE-ECDSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_ECDSA_C &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED" DefaultValue="1" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDH-ECDSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDH-ECDSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDH-ECDSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDH-ECDSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED" DefaultValue="1" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDH-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDH-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDH-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECDH-RSA based ciphersuite modes in SSL / TLS.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECDH_C &amp; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECJPAKE_C &amp; MBEDTLS_SHA256_C &amp; MBEDTLS_ECP_DP_SECP256R1_ENABLED"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECJPAKE based ciphersuite modes in SSL / TLS.&lt;br&gt; WARNING! This is currently experimental. EC J-PAKE support is based on the Thread v1.0.0 specification; incompatible changes to the specification might still happen. For this reason, this is disabled by default.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECJPAKE_C &amp; MBEDTLS_SHA256_C &amp; MBEDTLS_ECP_DP_SECP256R1_ENABLED</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED" Comment="MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED" DefaultValue="0" Type="list" Group="Key exchange" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ECJPAKE based ciphersuite modes in SSL / TLS.&lt;br&gt; WARNING! This is currently experimental. EC J-PAKE support is based on the Thread v1.0.0 specification; incompatible changes to the specification might still happen. For this reason, this is disabled by default.&lt;br&gt;This enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECJPAKE_C &amp; MBEDTLS_SHA256_C &amp; MBEDTLS_ECP_DP_SECP256R1_ENABLED</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PK_PARSE_EC_EXTENDED" Comment="MBEDTLS_PK_PARSE_EC_EXTENDED" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enhance support for reading EC keys using variants of SEC1 not allowed by RFC 5915 and RFC 5480. &lt;br&gt; Currently this means parsing the SpecifiedECDomain choice of EC parameters (only known groups are supported, not arbitrary domains, to avoid validation issues). &lt;br&gt;  Disable if you only need to support RFC 5915 + 5480 key formats. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PK_PARSE_EC_EXTENDED" Comment="MBEDTLS_PK_PARSE_EC_EXTENDED" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enhance support for reading EC keys using variants of SEC1 not allowed by RFC 5915 and RFC 5480. &lt;br&gt; Currently this means parsing the SpecifiedECDomain choice of EC parameters (only known groups are supported, not arbitrary domains, to avoid validation issues). &lt;br&gt;  Disable if you only need to support RFC 5915 + 5480 key formats. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ERROR_STRERROR_DUMMY" Comment="MBEDTLS_ERROR_STRERROR_DUMMY" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable a dummy error function to make use of mbedtls_strerror() in third party libraries easier when MBEDTLS_ERROR_C is disabled (no effect when MBEDTLS_ERROR_C is enabled). &lt;br&gt; You can safely disable this if  MBEDTLS_ERROR_C is enabled, or if you're not using mbedtls_strerror() or error_strerror() in your application. &lt;br&gt; Disable if you run into name conflicts and want to really remove the mbedtls_strerror() &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ERROR_STRERROR_DUMMY" Comment="MBEDTLS_ERROR_STRERROR_DUMMY" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable a dummy error function to make use of mbedtls_strerror() in third party libraries easier when MBEDTLS_ERROR_C is disabled (no effect when MBEDTLS_ERROR_C is enabled). &lt;br&gt; You can safely disable this if  MBEDTLS_ERROR_C is enabled, or if you're not using mbedtls_strerror() or error_strerror() in your application. &lt;br&gt; Disable if you run into name conflicts and want to really remove the mbedtls_strerror() &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_GENPRIME" Comment="MBEDTLS_GENPRIME" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_BIGNUM_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the prime-number generation code. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_GENPRIME" Comment="MBEDTLS_GENPRIME" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_BIGNUM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the prime-number generation code. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_GENPRIME" Comment="MBEDTLS_GENPRIME" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the prime-number generation code. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_GENPRIME" Comment="MBEDTLS_GENPRIME" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the prime-number generation code. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_FS_IO" Comment="MBEDTLS_FS_IO" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable functions that use the filesystem. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES" Comment="MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="!RNGUsed_ForRCC"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Do not add default entropy sources. These are the platform specific, mbedtls_timing_hardclock and HAVEGE based poll functions. &lt;br&gt; This is useful to have more control over the added entropy sources in an application. &lt;br&gt; &lt;b&gt;Default value:&lt;/b&gt; Defined(#define) when RNG is not activated &lt;br&gt;It can be set to disabled, but this means that the mbedtls library will be built either: &lt;br&gt;    -	without any random number generator, which will make the application vulnerable &lt;br&gt;     -	with a pure SW random number generator, if the flag “MBEDTLS_HAVEGE_C” is set, but this will be costly in term of CPU and SIZE.</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES" Comment="MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Do not add default entropy sources. These are the platform specific, mbedtls_timing_hardclock and HAVEGE based poll functions. &lt;br&gt; This is useful to have more control over the added entropy sources in an application. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_NO_PLATFORM_ENTROPY" Comment="MBEDTLS_NO_PLATFORM_ENTROPY" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Do not use built-in platform entropy functions. &lt;br&gt; This is useful if your platform does not support standards like the /dev/urandom or Windows CryptoAPI. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ENTROPY_FORCE_SHA256" Comment="MBEDTLS_ENTROPY_FORCE_SHA256" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SHA256_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Force the entropy accumulator to use a SHA-256 accumulator instead of the default SHA-512 based one (if both are available).&lt;br&gt;On 32-bit systems SHA-256 can be much faster than SHA-512. Use this option if you have performance concerns.&lt;br&gt;This option is only useful if both MBEDTLS_SHA256_C and MBEDTLS_SHA512_C are defined. Otherwise the available hash module is used.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SHA256_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_FORCE_SHA256" Comment="MBEDTLS_ENTROPY_FORCE_SHA256" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Force the entropy accumulator to use a SHA-256 accumulator instead of the default SHA-512 based one (if both are available).&lt;br&gt;On 32-bit systems SHA-256 can be much faster than SHA-512. Use this option if you have performance concerns.&lt;br&gt;This option is only useful if both MBEDTLS_SHA256_C and MBEDTLS_SHA512_C are defined. Otherwise the available hash module is used.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SHA256_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ENTROPY_NV_SEED" Comment="MBEDTLS_ENTROPY_NV_SEED" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ENTROPY_C &amp; MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the non-volatile (NV) seed file-based entropy source. (Also enables the NV seed read/write functions in the platform layer). &lt;br&gt; This is crucial (if not required) on systems that do not have a cryptographic entropy source (in hardware or kernel) available.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The read/write functions that are used by the entropy source are determined in the platform layer, and can be modified at runtime and/or compile-time depending on the flags (MBEDTLS_PLATFORM_NV_SEED_*) used.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If you use the default implementation functions that read a seedfile with regular fopen(), please make sure you make a seedfile with the proper name (defined in MBEDTLS_PLATFORM_STD_NV_SEED_FILE) and at least MBEDTLS_ENTROPY_BLOCK_SIZE bytes in size that can be read from and written to or you will get an entropy source error! The default implementation will only use the first MBEDTLS_ENTROPY_BLOCK_SIZE bytes from the file.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The entropy collector will write to the seed file before entropy is given to an external source, to update it.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C &amp; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_NV_SEED" Comment="MBEDTLS_ENTROPY_NV_SEED" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the non-volatile (NV) seed file-based entropy source. (Also enables the NV seed read/write functions in the platform layer). &lt;br&gt; This is crucial (if not required) on systems that do not have a cryptographic entropy source (in hardware or kernel) available.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The read/write functions that are used by the entropy source are determined in the platform layer, and can be modified at runtime and/or compile-time depending on the flags (MBEDTLS_PLATFORM_NV_SEED_*) used.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If you use the default implementation functions that read a seedfile with regular fopen(), please make sure you make a seedfile with the proper name (defined in MBEDTLS_PLATFORM_STD_NV_SEED_FILE) and at least MBEDTLS_ENTROPY_BLOCK_SIZE bytes in size that can be read from and written to or you will get an entropy source error! The default implementation will only use the first MBEDTLS_ENTROPY_BLOCK_SIZE bytes from the file.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The entropy collector will write to the seed file before entropy is given to an external source, to update it.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C &amp; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MEMORY_DEBUG" Comment="MBEDTLS_MEMORY_DEBUG" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MEMORY_BUFFER_ALLOC_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable debugging of buffer allocator memory issues. Automatically prints (to stderr) all (fatal) messages on memory allocation issues. Enables function for 'debug output' of allocated memory. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MEMORY_BUFFER_ALLOC_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MEMORY_DEBUG" Comment="MBEDTLS_MEMORY_DEBUG" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable debugging of buffer allocator memory issues. Automatically prints (to stderr) all (fatal) messages on memory allocation issues. Enables function for 'debug output' of allocated memory. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MEMORY_BUFFER_ALLOC_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MEMORY_BACKTRACE" Comment="MBEDTLS_MEMORY_BACKTRACE" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MEMORY_BUFFER_ALLOC_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Include backtrace information with each allocated block. &lt;br&gt;Require GLIBC-compatible backtrace and backtrace_symbols() support &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MEMORY_BUFFER_ALLOC_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MEMORY_BACKTRACE" Comment="MBEDTLS_MEMORY_BACKTRACE" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Include backtrace information with each allocated block. &lt;br&gt;Require GLIBC-compatible backtrace and backtrace_symbols() support &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MEMORY_BUFFER_ALLOC_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PK_RSA_ALT_SUPPORT" Comment="MBEDTLS_PK_RSA_ALT_SUPPORT" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Support external private RSA keys (eg from a HSM) in the PK layer. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PK_RSA_ALT_SUPPORT" Comment="MBEDTLS_PK_RSA_ALT_SUPPORT" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Support external private RSA keys (eg from a HSM) in the PK layer. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PKCS1_V15" Comment="MBEDTLS_PKCS1_V15" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="(MBEDTLS_RSA_C &amp; (STM32F7 | STM32H7))"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for PKCS#1 v1.5 encoding. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C (This enables support for PKCS#1 v1.5 operations.)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS1_V15" Comment="MBEDTLS_PKCS1_V15" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_RSA_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for PKCS#1 v1.5 encoding. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C (This enables support for PKCS#1 v1.5 operations.</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS1_V15" Comment="MBEDTLS_PKCS1_V15" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for PKCS#1 v1.5 encoding. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C This enables support for PKCS#1 v1.5 operations.</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS1_V15" Comment="MBEDTLS_PKCS1_V15" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for PKCS#1 v1.5 encoding. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C This enables support for PKCS#1 v1.5 operations.</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PKCS1_V21" Comment="MBEDTLS_PKCS1_V21" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="(MBEDTLS_MD_C &amp; MBEDTLS_RSA_C &amp; (STM32F7 | STM32H7))"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for PKCS#1 v2.1 encoding. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C &amp; MBEDTLS_RSA_C (This enables support for RSAES-OAEP and RSASSA-PSS operations.)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS1_V21" Comment="MBEDTLS_PKCS1_V21" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MD_C &amp; MBEDTLS_RSA_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for PKCS#1 v2.1 encoding. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C &amp; MBEDTLS_RSA_C (This enables support for RSAES-OAEP and RSASSA-PSS operations.)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS1_V21" Comment="MBEDTLS_PKCS1_V21" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for PKCS#1 v2.1 encoding. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C &amp; MBEDTLS_RSA_C (This enables support for RSAES-OAEP and RSASSA-PSS operations.)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS1_V21" Comment="MBEDTLS_PKCS1_V21" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for PKCS#1 v2.1 encoding. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C &amp; MBEDTLS_RSA_C (This enables support for RSAES-OAEP and RSASSA-PSS operations.)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_RSA_NO_CRT" Comment="MBEDTLS_RSA_NO_CRT" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Do not use the Chinese Remainder Theorem for the RSA private operation. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SELF_TEST" Comment="MBEDTLS_SELF_TEST" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the checkup functions (*_self_test). &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SELF_TEST" Comment="MBEDTLS_SELF_TEST" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the checkup functions (*_self_test). &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA256_SMALLER" Comment="MBEDTLS_SHA256_SMALLER" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable an implementation of SHA-256 that has lower ROM footprint but also lower performance. &lt;br&gt; The default implementation is meant to be a reasonnable compromise between performance and size. This version optimizes more aggressively for size at the expense of performance. Eg on Cortex-M4 it reduces the size of mbedtls_sha256_process() from ~2KB to ~0.5KB for a performance hit of about 30%. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_ALL_ALERT_MESSAGES" Comment="MBEDTLS_SSL_ALL_ALERT_MESSAGES" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable sending of alert messages in case of encountered errors as per RFC. If you choose not to send the alert messages, mbed TLS can still communicate with other servers, only debugging of failures is harder. &lt;br&gt; The advantage of not sending alert messages, is that no information is given about reasons for failures thus preventing adversaries of gaining intel. &lt;br&gt; Enable sending of all alert messages &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_ALL_ALERT_MESSAGES" Comment="MBEDTLS_SSL_ALL_ALERT_MESSAGES" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable sending of alert messages in case of encountered errors as per RFC. If you choose not to send the alert messages, mbed TLS can still communicate with other servers, only debugging of failures is harder. &lt;br&gt; The advantage of not sending alert messages, is that no information is given about reasons for failures thus preventing adversaries of gaining intel. &lt;br&gt; Enable sending of all alert messages &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_ASYNC_PRIVATE" Comment="MBEDTLS_SSL_ASYNC_PRIVATE" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description> Enable asynchronous external private key operations in SSL. This allows you to configure an SSL connection to call an external cryptographic module to perform private key operations instead of performing the operation inside the library. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_DEBUG_ALL" Comment="MBEDTLS_SSL_DEBUG_ALL" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the debug messages in SSL module for all issues. Debug messages have been disabled in some places to prevent timing attacks due to (unbalanced) debugging function calls. &lt;br&gt; If you need all error reporting(debug messages on errors introducing a timing side-channel) you should enable this during debugging, but remove this for production servers that should log as well. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_ENCRYPT_THEN_MAC" Comment="MBEDTLS_SSL_ENCRYPT_THEN_MAC" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="(MBEDTLS_SSL_PROTO_TLS1|MBEDTLS_SSL_PROTO_TLS1_1|MBEDTLS_SSL_PROTO_TLS1_2) &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for Encrypt-then-MAC, RFC 7366. This allows peers that both support it to use a more robust protection for ciphersuites using CBC, providing deep resistance against timing attacks on the padding or underlying cipher. &lt;br&gt; This only affects CBC ciphersuites, and is useless if none is defined. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_ENCRYPT_THEN_MAC" Comment="MBEDTLS_SSL_ENCRYPT_THEN_MAC" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_PROTO_TLS1|MBEDTLS_SSL_PROTO_TLS1_1|MBEDTLS_SSL_PROTO_TLS1_2"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for Encrypt-then-MAC, RFC 7366. This allows peers that both support it to use a more robust protection for ciphersuites using CBC, providing deep resistance against timing attacks on the padding or underlying cipher. &lt;br&gt; This only affects CBC ciphersuites, and is useless if none is defined. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_ENCRYPT_THEN_MAC" Comment="MBEDTLS_SSL_ENCRYPT_THEN_MAC" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for Encrypt-then-MAC, RFC 7366. This allows peers that both support it to use a more robust protection for ciphersuites using CBC, providing deep resistance against timing attacks on the padding or underlying cipher. &lt;br&gt; This only affects CBC ciphersuites, and is useless if none is defined. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_ENCRYPT_THEN_MAC" Comment="MBEDTLS_SSL_ENCRYPT_THEN_MAC" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for Encrypt-then-MAC, RFC 7366. This allows peers that both support it to use a more robust protection for ciphersuites using CBC, providing deep resistance against timing attacks on the padding or underlying cipher. &lt;br&gt; This only affects CBC ciphersuites, and is useless if none is defined. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_EXTENDED_MASTER_SECRET" Comment="MBEDTLS_SSL_EXTENDED_MASTER_SECRET" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="(MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2)&amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for Extended Master Secret, aka Session Hash (draft-ietf-tls-session-hash-02). &lt;br&gt; This was introduced as ""the proper fix"" to the Triple Handshake familiy of attacks, but it is recommended to always use it (even if you disable renegotiation), since it actually fixes a more fundamental issue in the original SSL/TLS design, and has implications beyond Triple Handshake. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_EXTENDED_MASTER_SECRET" Comment="MBEDTLS_SSL_EXTENDED_MASTER_SECRET" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for Extended Master Secret, aka Session Hash (draft-ietf-tls-session-hash-02). &lt;br&gt; This was introduced as ""the proper fix"" to the Triple Handshake familiy of attacks, but it is recommended to always use it (even if you disable renegotiation), since it actually fixes a more fundamental issue in the original SSL/TLS design, and has implications beyond Triple Handshake. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_EXTENDED_MASTER_SECRET" Comment="MBEDTLS_SSL_EXTENDED_MASTER_SECRET" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for Extended Master Secret, aka Session Hash (draft-ietf-tls-session-hash-02). &lt;br&gt; This was introduced as ""the proper fix"" to the Triple Handshake familiy of attacks, but it is recommended to always use it (even if you disable renegotiation), since it actually fixes a more fundamental issue in the original SSL/TLS design, and has implications beyond Triple Handshake. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_EXTENDED_MASTER_SECRET" Comment="MBEDTLS_SSL_EXTENDED_MASTER_SECRET" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for Extended Master Secret, aka Session Hash (draft-ietf-tls-session-hash-02). &lt;br&gt; This was introduced as ""the proper fix"" to the Triple Handshake familiy of attacks, but it is recommended to always use it (even if you disable renegotiation), since it actually fixes a more fundamental issue in the original SSL/TLS design, and has implications beyond Triple Handshake. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_FALLBACK_SCSV" Comment="MBEDTLS_SSL_FALLBACK_SCSV" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for FALLBACK_SCSV (draft-ietf-tls-downgrade-scsv-00). For servers, it is recommended to always enable this, unless you support only one version of TLS, or know for sure that none of your clients implements a fallback strategy. &lt;br&gt; For clients, you only need this if you're using a fallback strategy, which is not recommended in the first place, unless you absolutely need it to interoperate with buggy (version-intolerant) servers. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_FALLBACK_SCSV" Comment="MBEDTLS_SSL_FALLBACK_SCSV" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for FALLBACK_SCSV (draft-ietf-tls-downgrade-scsv-00). For servers, it is recommended to always enable this, unless you support only one version of TLS, or know for sure that none of your clients implements a fallback strategy. &lt;br&gt; For clients, you only need this if you're using a fallback strategy, which is not recommended in the first place, unless you absolutely need it to interoperate with buggy (version-intolerant) servers. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_HW_RECORD_ACCEL" Comment="MBEDTLS_SSL_HW_RECORD_ACCEL" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable hooking functions in SSL module for hardware acceleration of individual records.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_CBC_RECORD_SPLITTING" Comment="MBEDTLS_SSL_CBC_RECORD_SPLITTING" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable 1/n-1 record splitting for CBC mode in SSLv3 and TLS 1.0. &lt;br&gt; This is a countermeasure to the BEAST attack, which also minimizes the risk of interoperability issues compared to sending 0-length records. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_CBC_RECORD_SPLITTING" Comment="MBEDTLS_SSL_CBC_RECORD_SPLITTING" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable 1/n-1 record splitting for CBC mode in SSLv3 and TLS 1.0. &lt;br&gt; This is a countermeasure to the BEAST attack, which also minimizes the risk of interoperability issues compared to sending 0-length records. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_RENEGOTIATION" Comment="MBEDTLS_SSL_RENEGOTIATION" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Disable support for TLS renegotiation. &lt;br&gt; The two main uses of renegotiation are (1) refresh keys on long-lived connections and (2) client authentication after the initial handshake. If you don't need renegotiation, it's probably better to disable it, since it has been associated with security issues in the past and is easy to misuse/misunderstand.&lt;br&gt;&lt;br&gt;\note   Even if this option is disabled, both client and server are aware of the Renegotiation Indication Extension (RFC 5746) used to prevent the SSL renegotiation attack (see RFC 5746 Sect. 1).&lt;br&gt;(See \c mbedtls_ssl_conf_legacy_renegotiation for the configuration of this extension).&lt;br&gt; &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_RENEGOTIATION" Comment="MBEDTLS_SSL_RENEGOTIATION" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Disable support for TLS renegotiation. &lt;br&gt; The two main uses of renegotiation are (1) refresh keys on long-lived connections and (2) client authentication after the initial handshake. If you don't need renegotiation, it's probably better to disable it, since it has been associated with security issues in the past and is easy to misuse/misunderstand.&lt;br&gt;&lt;br&gt;\note   Even if this option is disabled, both client and server are aware of the Renegotiation Indication Extension (RFC 5746) used to prevent the SSL renegotiation attack (see RFC 5746 Sect. 1).&lt;br&gt;(See \c mbedtls_ssl_conf_legacy_renegotiation for the configuration of this extension).&lt;br&gt; &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO" Comment="MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for receiving and parsing SSLv2 Client Hello messages for the SSL Server module (MBEDTLS_SSL_SRV_C). &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE" Comment="MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Pick the ciphersuite according to the client's preferences rather than ours in the SSL Server module (MBEDTLS_SSL_SRV_C). &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE" Comment="MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Pick the ciphersuite according to the client's preferences rather than ours in the SSL Server module (MBEDTLS_SSL_SRV_C). &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_MAX_FRAGMENT_LENGTH" Comment="MBEDTLS_SSL_MAX_FRAGMENT_LENGTH" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 6066 max_fragment_length extension in SSL. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_PROTO_SSL3" Comment="MBEDTLS_SSL_PROTO_SSL3" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for SSL 3.0. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_PROTO_SSL3" Comment="MBEDTLS_SSL_PROTO_SSL3" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for SSL 3.0. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_PROTO_TLS1" Comment="MBEDTLS_SSL_PROTO_TLS1" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for TLS 1.0. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_PROTO_TLS1" Comment="MBEDTLS_SSL_PROTO_TLS1" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for TLS 1.0. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_PROTO_TLS1" Comment="MBEDTLS_SSL_PROTO_TLS1" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for TLS 1.0. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_PROTO_TLS1" Comment="MBEDTLS_SSL_PROTO_TLS1" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for TLS 1.0. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_PROTO_TLS1_1" Comment="MBEDTLS_SSL_PROTO_TLS1_1" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for TLS 1.1 (and DTLS 1.0 if DTLS is enabled). &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_PROTO_TLS1_1" Comment="MBEDTLS_SSL_PROTO_TLS1_1" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for TLS 1.1 (and DTLS 1.0 if DTLS is enabled). &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_PROTO_TLS1_1" Comment="MBEDTLS_SSL_PROTO_TLS1_1" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for TLS 1.1 (and DTLS 1.0 if DTLS is enabled). &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_PROTO_TLS1_1" Comment="MBEDTLS_SSL_PROTO_TLS1_1" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for TLS 1.1 (and DTLS 1.0 if DTLS is enabled). &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD5_C &amp; MBEDTLS_SHA1_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_PROTO_TLS1_2" Comment="MBEDTLS_SSL_PROTO_TLS1_2" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SHA1_C | MBEDTLS_SHA256_C | MBEDTLS_SHA512_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SHA1_C or MBEDTLS_SHA256_C or MBEDTLS_SHA512_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_PROTO_TLS1_2" Comment="MBEDTLS_SSL_PROTO_TLS1_2" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SHA1_C or MBEDTLS_SHA256_C or MBEDTLS_SHA512_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_PROTO_DTLS" Comment="MBEDTLS_SSL_PROTO_DTLS" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="(MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2) &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for DTLS (all available versions). Enable this and MBEDTLS_SSL_PROTO_TLS1_1 to enable DTLS 1.0, and/or this and MBEDTLS_SSL_PROTO_TLS1_2 to enable DTLS 1.2. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_PROTO_DTLS" Comment="MBEDTLS_SSL_PROTO_DTLS" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for DTLS (all available versions). Enable this and MBEDTLS_SSL_PROTO_TLS1_1 to enable DTLS 1.0, and/or this and MBEDTLS_SSL_PROTO_TLS1_2 to enable DTLS 1.2. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_PROTO_DTLS" Comment="MBEDTLS_SSL_PROTO_DTLS" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for DTLS (all available versions). Enable this and MBEDTLS_SSL_PROTO_TLS1_1 to enable DTLS 1.0, and/or this and MBEDTLS_SSL_PROTO_TLS1_2 to enable DTLS 1.2. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_PROTO_DTLS" Comment="MBEDTLS_SSL_PROTO_DTLS" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for DTLS (all available versions). Enable this and MBEDTLS_SSL_PROTO_TLS1_1 to enable DTLS 1.0, and/or this and MBEDTLS_SSL_PROTO_TLS1_2 to enable DTLS 1.2. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_ALPN" Comment="MBEDTLS_SSL_ALPN" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 7301 Application Layer Protocol Negotiation. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_ALPN" Comment="MBEDTLS_SSL_ALPN" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 7301 Application Layer Protocol Negotiation. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_DTLS_ANTI_REPLAY" Comment="MBEDTLS_SSL_DTLS_ANTI_REPLAY" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_TLS_C &amp; MBEDTLS_SSL_PROTO_DTLS &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for the anti-replay mechanism in DTLS.&lt;br&gt;Warning! Disabling this is often a security risk!&lt;br&gt;See mbedtls_ssl_conf_dtls_anti_replay() for details.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_TLS_C &amp; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_ANTI_REPLAY" Comment="MBEDTLS_SSL_DTLS_ANTI_REPLAY" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_TLS_C &amp; MBEDTLS_SSL_PROTO_DTLS"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for the anti-replay mechanism in DTLS.&lt;br&gt;Warning! Disabling this is often a security risk!&lt;br&gt;See mbedtls_ssl_conf_dtls_anti_replay() for details.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Disabled(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_TLS_C &amp; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_ANTI_REPLAY" Comment="MBEDTLS_SSL_DTLS_ANTI_REPLAY" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for the anti-replay mechanism in DTLS.&lt;br&gt;Warning! Disabling this is often a security risk!&lt;br&gt;See mbedtls_ssl_conf_dtls_anti_replay() for details.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_TLS_C &amp; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_ANTI_REPLAY" Comment="MBEDTLS_SSL_DTLS_ANTI_REPLAY" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for the anti-replay mechanism in DTLS.&lt;br&gt;Warning! Disabling this is often a security risk!&lt;br&gt;See mbedtls_ssl_conf_dtls_anti_replay() for details.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Disabled(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_TLS_C &amp; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_DTLS_HELLO_VERIFY" Comment="MBEDTLS_SSL_DTLS_HELLO_VERIFY" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_PROTO_DTLS &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for HelloVerifyRequest on DTLS servers. &lt;br&gt; This feature is highly recommended to prevent DTLS servers being used as amplifiers in DoS attacks against other hosts. It should always be enabled unless you know for sure amplification cannot be a problem in the environment in which your server operates. &lt;br&gt; WARNING! Disabling this is often a security risk! &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_HELLO_VERIFY" Comment="MBEDTLS_SSL_DTLS_HELLO_VERIFY" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_PROTO_DTLS"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for HelloVerifyRequest on DTLS servers. &lt;br&gt; This feature is highly recommended to prevent DTLS servers being used as amplifiers in DoS attacks against other hosts. It should always be enabled unless you know for sure amplification cannot be a problem in the environment in which your server operates. &lt;br&gt; WARNING! Disabling this is often a security risk! &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_HELLO_VERIFY" Comment="MBEDTLS_SSL_DTLS_HELLO_VERIFY" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for HelloVerifyRequest on DTLS servers. &lt;br&gt; This feature is highly recommended to prevent DTLS servers being used as amplifiers in DoS attacks against other hosts. It should always be enabled unless you know for sure amplification cannot be a problem in the environment in which your server operates. &lt;br&gt; WARNING! Disabling this is often a security risk! &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_HELLO_VERIFY" Comment="MBEDTLS_SSL_DTLS_HELLO_VERIFY" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for HelloVerifyRequest on DTLS servers. &lt;br&gt; This feature is highly recommended to prevent DTLS servers being used as amplifiers in DoS attacks against other hosts. It should always be enabled unless you know for sure amplification cannot be a problem in the environment in which your server operates. &lt;br&gt; WARNING! Disabling this is often a security risk! &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE" Comment="MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_DTLS_HELLO_VERIFY &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable server-side support for clients that reconnect from the same port. &lt;br&gt; Some clients unexpectedly close the connection and try to reconnect using the same source port. This needs special support from the server to handle the new connection securely, as described in section 4.2.8 of RFC 6347. This flag enables that support. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_DTLS_HELLO_VERIFY</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE" Comment="MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_DTLS_HELLO_VERIFY"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable server-side support for clients that reconnect from the same port. &lt;br&gt; Some clients unexpectedly close the connection and try to reconnect using the same source port. This needs special support from the server to handle the new connection securely, as described in section 4.2.8 of RFC 6347. This flag enables that support. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_DTLS_HELLO_VERIFY</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE" Comment="MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable server-side support for clients that reconnect from the same port. &lt;br&gt; Some clients unexpectedly close the connection and try to reconnect using the same source port. This needs special support from the server to handle the new connection securely, as described in section 4.2.8 of RFC 6347. This flag enables that support. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_DTLS_HELLO_VERIFY</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE" Comment="MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable server-side support for clients that reconnect from the same port. &lt;br&gt; Some clients unexpectedly close the connection and try to reconnect using the same source port. This needs special support from the server to handle the new connection securely, as described in section 4.2.8 of RFC 6347. This flag enables that support. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_DTLS_HELLO_VERIFY</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_DTLS_BADMAC_LIMIT" Comment="MBEDTLS_SSL_DTLS_BADMAC_LIMIT" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_PROTO_DTLS &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for a limit of records with bad MAC.&lt;br&gt;See mbedtls_ssl_conf_dtls_badmac_limit().&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_BADMAC_LIMIT" Comment="MBEDTLS_SSL_DTLS_BADMAC_LIMIT" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_PROTO_DTLS"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for a limit of records with bad MAC.&lt;br&gt;See mbedtls_ssl_conf_dtls_badmac_limit().&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_BADMAC_LIMIT" Comment="MBEDTLS_SSL_DTLS_BADMAC_LIMIT" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for a limit of records with bad MAC.&lt;br&gt;See mbedtls_ssl_conf_dtls_badmac_limit().&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DTLS_BADMAC_LIMIT" Comment="MBEDTLS_SSL_DTLS_BADMAC_LIMIT" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for a limit of records with bad MAC.&lt;br&gt;See mbedtls_ssl_conf_dtls_badmac_limit().&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_PROTO_DTLS</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_SESSION_TICKETS" Comment="MBEDTLS_SSL_SESSION_TICKETS" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 5077 session tickets in SSL. &lt;br&gt; Client-side, provides full support for session tickets (maintainance of a session store remains the responsibility of the application, though). Server-side, you also need to provide callbacks for writing and parsing tickets, including authenticated encryption and key management. Example callbacks are provided by MBEDTLS_SSL_TICKET_C. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_SESSION_TICKETS" Comment="MBEDTLS_SSL_SESSION_TICKETS" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 5077 session tickets in SSL. &lt;br&gt; Client-side, provides full support for session tickets (maintainance of a session store remains the responsibility of the application, though). Server-side, you also need to provide callbacks for writing and parsing tickets, including authenticated encryption and key management. Example callbacks are provided by MBEDTLS_SSL_TICKET_C. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_EXPORT_KEYS" Comment="MBEDTLS_SSL_EXPORT_KEYS" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for exporting key block and master secret. &lt;br&gt; This is required for certain users of TLS, e.g. EAP-TLS. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_EXPORT_KEYS" Comment="MBEDTLS_SSL_EXPORT_KEYS" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for exporting key block and master secret. &lt;br&gt; This is required for certain users of TLS, e.g. EAP-TLS. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_SERVER_NAME_INDICATION" Comment="MBEDTLS_SSL_SERVER_NAME_INDICATION" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_CRT_PARSE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 6066 server name indication (SNI) in SSL. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_SERVER_NAME_INDICATION" Comment="MBEDTLS_SSL_SERVER_NAME_INDICATION" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_CRT_PARSE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 6066 server name indication (SNI) in SSL. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_SERVER_NAME_INDICATION" Comment="MBEDTLS_SSL_SERVER_NAME_INDICATION" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 6066 server name indication (SNI) in SSL. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_SERVER_NAME_INDICATION" Comment="MBEDTLS_SSL_SERVER_NAME_INDICATION" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 6066 server name indication (SNI) in SSL. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CRT_PARSE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_TRUNCATED_HMAC" Comment="MBEDTLS_SSL_TRUNCATED_HMAC" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 6066 truncated HMAC in SSL. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_TRUNCATED_HMAC" Comment="MBEDTLS_SSL_TRUNCATED_HMAC" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable support for RFC 6066 truncated HMAC in SSL. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT" Comment="MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT" DefaultValue="1" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_TRUNCATED_HMAC"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Fallback to old (pre-2.7), non-conforming implementation of the truncated HMAC extension which also truncates the HMAC key. Note that this option is only meant for a transitory upgrade period and is likely to be removed in a future version of the library.
                    &lt;br&gt;
                    &lt;br&gt;\WARNING!: The old implementation is non-compliant and has a security weakness (2^80 brute force attack on the HMAC key used for a single, uninterrupted connection). This should only be enabled temporarily when (1) the use of truncated HMAC is essential in order to save bandwidth, and (2) the peer is an Mbed TLS stack that doesn't use the fixed implementation yet (pre-2.7).
                    &lt;br&gt;
                    &lt;br&gt;\DEPRECATED This option is deprecated and will likely be removed in a future version of Mbed TLS.
                    &lt;br&gt;
                    &lt;br&gt;Uncomment to fallback to old, non-compliant truncated HMAC implementation.
                    &lt;br&gt;
                    &lt;br&gt;&lt;b&gt;Requires:&lt;/b&gt; MBEDTLS_SSL_TRUNCATED_HMAC
                    &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Not defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT" Comment="MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT" DefaultValue="0" Type="list" Group="SSL" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Fallback to old (pre-2.7), non-conforming implementation of the truncated HMAC extension which also truncates the HMAC key. Note that this option is only meant for a transitory upgrade period and is likely to be removed in a future version of the library.
                    &lt;br&gt;
                    &lt;br&gt;\WARNING!: The old implementation is non-compliant and has a security weakness (2^80 brute force attack on the HMAC key used for a single, uninterrupted connection). This should only be enabled temporarily when (1) the use of truncated HMAC is essential in order to save bandwidth, and (2) the peer is an Mbed TLS stack that doesn't use the fixed implementation yet (pre-2.7).
                    &lt;br&gt;
                    &lt;br&gt;\DEPRECATED This option is deprecated and will likely be removed in a future version of Mbed TLS.
                    &lt;br&gt;
                    &lt;br&gt;Uncomment to fallback to old, non-compliant truncated HMAC implementation.
                    &lt;br&gt;
                    &lt;br&gt;&lt;b&gt;Requires:&lt;/b&gt; MBEDTLS_SSL_TRUNCATED_HMAC
                    &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Not defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_THREADING_ALT" Comment="MBEDTLS_THREADING_ALT" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_THREADING_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Provide your own alternate threading implementation. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_THREADING_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_THREADING_ALT" Comment="MBEDTLS_THREADING_ALT" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Provide your own alternate threading implementation. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_THREADING_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_THREADING_PTHREAD" Comment="MBEDTLS_THREADING_PTHREAD" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_THREADING_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the pthread wrapper layer for the threading layer. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_THREADING_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_THREADING_PTHREAD" Comment="MBEDTLS_THREADING_PTHREAD" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the pthread wrapper layer for the threading layer. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_THREADING_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_VERSION_FEATURES" Comment="MBEDTLS_VERSION_FEATURES" DefaultValue="1" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="(MBEDTLS_VERSION_C &amp; (STM32F7 | STM32H7))"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Allow run-time checking of compile-time enabled features. Thus allowing users to check at run-time if the library is for instance compiled with threading support via mbedtls_version_check_feature(). &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_VERSION_C (Disabling it will disable run-time checking and save ROM space)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_VERSION_FEATURES" Comment="MBEDTLS_VERSION_FEATURES" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_VERSION_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Allow run-time checking of compile-time enabled features. Thus allowing users to check at run-time if the library is for instance compiled with threading support via mbedtls_version_check_feature(). &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_VERSION_C (Disabling it will disable run-time checking and save ROM space)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_VERSION_FEATURES" Comment="MBEDTLS_VERSION_FEATURES" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Allow run-time checking of compile-time enabled features. Thus allowing users to check at run-time if the library is for instance compiled with threading support via mbedtls_version_check_feature(). &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_VERSION_C (Disabling it will disable run-time checking and save ROM space)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_VERSION_FEATURES" Comment="MBEDTLS_VERSION_FEATURES" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Allow run-time checking of compile-time enabled features. Thus allowing users to check at run-time if the library is for instance compiled with threading support via mbedtls_version_check_feature(). &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_VERSION_C (Disabling it will disable run-time checking and save ROM space)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3" Comment="MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3" DefaultValue="0" Type="list" Group="X509" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>If set, the X509 parser will not break-off when parsing an X509 certificate and encountering an extension in a v1 or v2 certificate. &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION" Comment="MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION" DefaultValue="0" Type="list" Group="X509" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>If set, the X509 parser will not break-off when parsing an X509 certificate and encountering an unknown critical extension. &lt;br&gt; WARNING! Depending on your PKI use, enabling this can be a security risk! &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_CHECK_KEY_USAGE" Comment="MBEDTLS_X509_CHECK_KEY_USAGE" DefaultValue="1" Type="list" Group="X509" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable verification of the keyUsage extension (CA and leaf certificates). &lt;br&gt; Disabling this avoids problems with mis-issued and/or misused (intermediate) CA and leaf certificates. &lt;br&gt; WARNING! Depending on your PKI use, disabling this can be a security risk! &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CHECK_KEY_USAGE" Comment="MBEDTLS_X509_CHECK_KEY_USAGE" DefaultValue="0" Type="list" Group="X509" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable verification of the keyUsage extension (CA and leaf certificates). &lt;br&gt; Disabling this avoids problems with mis-issued and/or misused (intermediate) CA and leaf certificates. &lt;br&gt; WARNING! Depending on your PKI use, disabling this can be a security risk! &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE" Comment="MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE" DefaultValue="1" Type="list" Group="X509" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable verification of the extendedKeyUsage extension (leaf certificates). &lt;br&gt; Disabling this avoids problems with mis-issued and/or isused certificates. &lt;br&gt; WARNING! Depending on your PKI use, disabling this can be a security risk! &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE" Comment="MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE" DefaultValue="0" Type="list" Group="X509" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable verification of the extendedKeyUsage extension (leaf certificates). &lt;br&gt; Disabling this avoids problems with mis-issued and/or isused certificates. &lt;br&gt; WARNING! Depending on your PKI use, disabling this can be a security risk! &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_RSASSA_PSS_SUPPORT" Comment="MBEDTLS_X509_RSASSA_PSS_SUPPORT" DefaultValue="1" Type="list" Group="X509" TabName="Feature support" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable parsing and verification of X.509 certificates, CRLs and CSRS signed with RSASSA-PSS (aka PKCS#1 v2.1). &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_RSASSA_PSS_SUPPORT" Comment="MBEDTLS_X509_RSASSA_PSS_SUPPORT" DefaultValue="0" Type="list" Group="X509" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable parsing and verification of X.509 certificates, CRLs and CSRS signed with RSASSA-PSS (aka PKCS#1 v2.1). &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ZLIB_SUPPORT" Comment="MBEDTLS_ZLIB_SUPPORT" DefaultValue="0" Type="list" Group="General" TabName="Feature support" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>If set, the SSL/TLS module uses ZLIB to support compression and decompression of packet data. &lt;br&gt; WARNING! TLS-level compression MAY REDUCE SECURITY! See for example the CRIME attack. Before enabling this option, you should examine with care if CRIME or similar exploits may be a applicable to your use case.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; Currently compression can't be used with DTLS.&lt;br&gt;\deprecated This feature is deprecated and will be removed in the next major revision of the library.&lt;br&gt; &lt;b&gt;Used in:&lt;/b&gt;&lt;br&gt;library/ssl_tls.c&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;This feature requires zlib library and headers to be present.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Modules -->

    <RefParameter Name="MBEDTLS_AESNI_C" Comment="MBEDTLS_AESNI_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_HAVE_ASM &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable AES-NI support on x86-64.&lt;br&gt;Module:&lt;br&gt;library/aesni.c&lt;br&gt;Caller:&lt;br&gt;library/aes.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HAVE_ASM</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_AESNI_C" Comment="MBEDTLS_AESNI_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HAVE_ASM"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable AES-NI support on x86-64.&lt;br&gt;Module:&lt;br&gt;library/aesni.c&lt;br&gt;Caller:&lt;br&gt;library/aes.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HAVE_ASM</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_AESNI_C" Comment="MBEDTLS_AESNI_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable AES-NI support on x86-64.&lt;br&gt;Module:&lt;br&gt;library/aesni.c&lt;br&gt;Caller:&lt;br&gt;library/aes.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HAVE_ASM</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_AESNI_C" Comment="MBEDTLS_AESNI_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable AES-NI support on x86-64.&lt;br&gt;Module:&lt;br&gt;library/aesni.c&lt;br&gt;Caller:&lt;br&gt;library/aes.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HAVE_ASM</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_AES_C" Comment="MBEDTLS_AES_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the AES block cipher.&lt;br&gt;Module:&lt;br&gt;library/aes.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_tls.c&lt;br&gt;library/pem.c&lt;br&gt;library/ctr_drbg.c&lt;br&gt; This module enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA&lt;br&gt;&lt;br&gt;PEM_PARSE uses AES for decrypting encrypted keys.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HAVE_ASM</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ARC4_C" Comment="MBEDTLS_ARC4_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ARCFOUR stream cipher&lt;br&gt;Module:&lt;br&gt;library/arc4.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_tls.c&lt;br&gt;&lt;br&gt;This module enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_MD5&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA&lt;br&gt; MBEDTLS_TLS_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;br&gt; \warning   ARC4 is considered a weak cipher and its use constitutes a security risk. If possible, we recommend avoidng dependencies on it, and considering stronger ciphers instead.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ARC4_C" Comment="MBEDTLS_ARC4_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ARCFOUR stream cipher&lt;br&gt;Module:&lt;br&gt;library/arc4.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_tls.c&lt;br&gt;&lt;br&gt;This module enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_RC4_128_MD5&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA&lt;br&gt; MBEDTLS_TLS_PSK_WITH_RC4_128_SHA&lt;br&gt;&lt;br&gt; \warning   ARC4 is considered a weak cipher and its use constitutes a security risk. If possible, we recommend avoidng dependencies on it, and considering stronger ciphers instead.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ASN1_PARSE_C" Comment="MBEDTLS_ASN1_PARSE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic ASN1 parser&lt;br&gt;Module:&lt;br&gt;library/asn1.c&lt;br&gt;Caller:&lt;br&gt;library/x509.c&lt;br&gt;library/dhm.c&lt;br&gt;library/pkcs12.c&lt;br&gt;library/pkcs5.c&lt;br&gt;library/pkparse.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ASN1_WRITE_C" Comment="MBEDTLS_ASN1_WRITE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic ASN1 writer&lt;br&gt;Module:&lt;br&gt;library/asn1write.c&lt;br&gt;Caller:&lt;br&gt;library/ecdsa.c&lt;br&gt;library/pkwrite.c&lt;br&gt;library/x509_create.c&lt;br&gt;library/x509write_crt.c&lt;br&gt;library/x509write_csr.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_BASE64_C" Comment="MBEDTLS_BASE64_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Base64 module&lt;br&gt;Module:&lt;br&gt;library/base64.c&lt;br&gt;Caller:&lt;br&gt;library/pem.c&lt;br&gt;This module is required for PEM support (required by X.509).&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_BIGNUM_C" Comment="MBEDTLS_BIGNUM_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the multi-precision integer library&lt;br&gt;Module:&lt;br&gt;library/bignum.c&lt;br&gt;Caller:&lt;br&gt;library/dhm.c&lt;br&gt;library/ecp.c&lt;br&gt;library/ecdsa.c&lt;br&gt;library/rsa.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;This module is required for RSA, DHM and ECC (ECDH, ECDSA) support.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_BLOWFISH_C" Comment="MBEDTLS_BLOWFISH_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Blowfish block cipher&lt;br&gt;Module: library/blowfish.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_BLOWFISH_C" Comment="MBEDTLS_BLOWFISH_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Blowfish block cipher&lt;br&gt;Module: library/blowfish.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CAMELLIA_C" Comment="MBEDTLS_CAMELLIA_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Camellia block cipher&lt;br&gt;&lt;br&gt;Module: library/camellia.c&lt;br&gt;Caller: library/ssl_tls.c&lt;br&gt;&lt;br&gt;This module enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256&lt;br&gt;MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ARIA_C" Comment="MBEDTLS_ARIA_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the ARIA block cipher.&lt;br&gt;&lt;br&gt;Module: library/aria.c&lt;br&gt;Caller: library/cipher.c&lt;br&gt;&lt;br&gt;This module enables the following ciphersuites (if other requisites are enabled as well):
                 &lt;br&gt;  MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384
                 &lt;br&gt;  MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256
                 &lt;br&gt;  MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384
                 &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Not defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CCM_C" Comment="MBEDTLS_CCM_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="(MBEDTLS_AES_C | MBEDTLS_CAMELLIA_C) &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher.&lt;br&gt;Module:  library/ccm.c&lt;br&gt;This module enables the AES-CCM ciphersuites, if other requisites areenabled as well.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_AES_C | MBEDTLS_CAMELLIA_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CCM_C" Comment="MBEDTLS_CCM_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_AES_C | MBEDTLS_CAMELLIA_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher.&lt;br&gt;Module:  library/ccm.c&lt;br&gt;This module enables the AES-CCM ciphersuites, if other requisites areenabled as well.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_AES_C | MBEDTLS_CAMELLIA_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CCM_C" Comment="MBEDTLS_CCM_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher.&lt;br&gt;Module:  library/ccm.c&lt;br&gt;This module enables the AES-CCM ciphersuites, if other requisites areenabled as well.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_AES_C | MBEDTLS_CAMELLIA_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CCM_C" Comment="MBEDTLS_CCM_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher.&lt;br&gt;Module:  library/ccm.c&lt;br&gt;This module enables the AES-CCM ciphersuites, if other requisites areenabled as well.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_AES_C | MBEDTLS_CAMELLIA_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CERTS_C" Comment="MBEDTLS_CERTS_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the test certificates. Used for testing (ssl_client/server)&lt;br&gt;Module:  library/certs.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CIPHER_C" Comment="MBEDTLS_CIPHER_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic cipher layer&lt;br&gt;Module:  library/cipher.c&lt;br&gt;Caller:  library/ssl_tls.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CMAC_C" Comment="MBEDTLS_CMAC_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_AES_C | MBEDTLS_DES_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the CMAC (Cipher-based Message Authentication Code) mode for block ciphers.&lt;br&gt;Module:  library/cmac.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_AES_C | MBEDTLS_DES_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CMAC_C" Comment="MBEDTLS_CMAC_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the CMAC (Cipher-based Message Authentication Code) mode for block ciphers.&lt;br&gt;Module:  library/cmac.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_AES_C | MBEDTLS_DES_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CTR_DRBG_C" Comment="MBEDTLS_CTR_DRBG_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_AES_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the CTR_DRBG AES-256-based random generator&lt;br&gt;Module:  library/ctr_drbg.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_AES_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_C" Comment="MBEDTLS_CTR_DRBG_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the CTR_DRBG AES-256-based random generator&lt;br&gt;Module:  library/ctr_drbg.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_AES_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DEBUG_C" Comment="MBEDTLS_DEBUG_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the debug functions&lt;br&gt;Module:&lt;br&gt;library/debug.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DES_C" Comment="MBEDTLS_DES_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the DES block cipher&lt;br&gt;Module:&lt;br&gt;library/des.c&lt;br&gt;Caller:&lt;br&gt;library/pem.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;&lt;br&gt;This module enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;&lt;br&gt;PEM_PARSE uses DES/3DES for decrypting encrypted keys.&lt;br&gt;&lt;br&gt; &lt;br&gt; \warning   DES is considered a weak cipher and its use constitutes a security risk. We recommend considering stronger ciphers instead.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_DES_C" Comment="MBEDTLS_DES_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the DES block cipher&lt;br&gt;Module:&lt;br&gt;library/des.c&lt;br&gt;Caller:&lt;br&gt;library/pem.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;&lt;br&gt;This module enables the following ciphersuites (if other requisites are enabled as well):&lt;br&gt;MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA&lt;br&gt;&lt;br&gt;PEM_PARSE uses DES/3DES for decrypting encrypted keys.&lt;br&gt;&lt;br&gt; &lt;br&gt; \warning   DES is considered a weak cipher and its use constitutes a security risk. We recommend considering stronger ciphers instead.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_DHM_C" Comment="MBEDTLS_DHM_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Diffie-Hellman-Merkle key exchange&lt;br&gt;Module:&lt;br&gt;library/dhm.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;This module is used by the following key exchanges:&lt;br&gt;DHE-RSA, DHE-PSK&lt;br&gt;&lt;br&gt;&lt;br&gt; \warning    Using DHE constitutes a security risk as it is not possible to validate custom DH parameters.&lt;br&gt;If possible, it is recommended users should consider preferring other methods of key exchange.&lt;br&gt;See dhm.h for more details.&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_DHM_C" Comment="MBEDTLS_DHM_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Diffie-Hellman-Merkle key exchange&lt;br&gt;Module:&lt;br&gt;library/dhm.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;This module is used by the following key exchanges:&lt;br&gt;DHE-RSA, DHE-PSK&lt;br&gt;&lt;br&gt;&lt;br&gt; \warning    Using DHE constitutes a security risk as it is not possible to validate custom DH parameters.&lt;br&gt;If possible, it is recommended users should consider preferring other methods of key exchange.&lt;br&gt;See dhm.h for more details.&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECDH_C" Comment="MBEDTLS_ECDH_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the elliptic curve Diffie-Hellman library.&lt;br&gt;Module:&lt;br&gt;library/ecdh.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;This module is used by the following key exchanges:&lt;br&gt;ECDHE-ECDSA, ECDHE-RSA, DHE-PSK&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECDH_C" Comment="MBEDTLS_ECDH_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the elliptic curve Diffie-Hellman library.&lt;br&gt;Module:&lt;br&gt;library/ecdh.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;This module is used by the following key exchanges:&lt;br&gt;ECDHE-ECDSA, ECDHE-RSA, DHE-PSK&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Enabled(#define&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECDSA_C" Comment="MBEDTLS_ECDSA_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_C &amp; MBEDTLS_ASN1_WRITE_C  &amp; MBEDTLS_ASN1_PARSE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the elliptic curve DSA library.&lt;br&gt;Module:  library/ecdsa.c&lt;br&gt;This module is used by the following key exchanges:&lt;br&gt;ECDHE-ECDSA&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C &amp; MBEDTLS_ASN1_WRITE_C  &amp; MBEDTLS_ASN1_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECDSA_C" Comment="MBEDTLS_ECDSA_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the elliptic curve DSA library.&lt;br&gt;Module:  library/ecdsa.c&lt;br&gt;This module is used by the following key exchanges:&lt;br&gt;ECDHE-ECDSA&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C &amp; MBEDTLS_ASN1_WRITE_C  &amp; MBEDTLS_ASN1_PARSE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECJPAKE_C" Comment="MBEDTLS_ECJPAKE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_C &amp; MBEDTLS_MD_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the elliptic curve J-PAKE library. &lt;br&gt; WARNING! This is currently experimental. EC J-PAKE support is based on the Thread v1.0.0  specification; incompatible changes to the specification might still happen. For this reason, this is disabled by default.&lt;br&gt;Module:  library/ecjpake.c&lt;br&gt;This module is used by the following key exchanges: ECJPAKE&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C &amp; MBEDTLS_MD_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECJPAKE_C" Comment="MBEDTLS_ECJPAKE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the elliptic curve J-PAKE library. &lt;br&gt; WARNING! This is currently experimental. EC J-PAKE support is based on the Thread v1.0.0  specification; incompatible changes to the specification might still happen. For this reason, this is disabled by default.&lt;br&gt;Module:  library/ecjpake.c&lt;br&gt;This module is used by the following key exchanges: ECJPAKE&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C &amp; MBEDTLS_MD_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_C" Comment="MBEDTLS_ECP_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_BIGNUM_C &amp; (MBEDTLS_ECP_DP_SECP192R1_ENABLED |  MBEDTLS_ECP_DP_SECP224R1_ENABLED | MBEDTLS_ECP_DP_SECP256R1_ENABLED | MBEDTLS_ECP_DP_SECP384R1_ENABLED | MBEDTLS_ECP_DP_SECP521R1_ENABLED | MBEDTLS_ECP_DP_SECP192K1_ENABLED | MBEDTLS_ECP_DP_SECP224K1_ENABLED | MBEDTLS_ECP_DP_SECP256K1_ENABLED | MBEDTLS_ECP_DP_BP256R1_ENABLED | MBEDTLS_ECP_DP_BP384R1_ENABLED | MBEDTLS_ECP_DP_BP512R1_ENABLED | MBEDTLS_ECP_DP_CURVE25519_ENABLED )"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the elliptic curve over GF(p) library.&lt;br&gt;Module:&lt;br&gt;library/ecp.c&lt;br&gt;Caller:&lt;br&gt;library/ecdh.c&lt;br&gt;library/ecdsa.c&lt;br&gt;library/ecjpake.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C &amp; (MBEDTLS_ECP_DP_SECP192R1_ENABLED |  MBEDTLS_ECP_DP_SECP224R1_ENABLED | MBEDTLS_ECP_DP_SECP256R1_ENABLED | MBEDTLS_ECP_DP_SECP384R1_ENABLED | MBEDTLS_ECP_DP_SECP521R1_ENABLED | MBEDTLS_ECP_DP_SECP192K1_ENABLED | MBEDTLS_ECP_DP_SECP224K1_ENABLED | MBEDTLS_ECP_DP_SECP256K1_ENABLED | MBEDTLS_ECP_DP_BP256R1_ENABLED | MBEDTLS_ECP_DP_BP384R1_ENABLED | MBEDTLS_ECP_DP_BP512R1_ENABLED | MBEDTLS_ECP_DP_CURVE25519_ENABLED )</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_C" Comment="MBEDTLS_ECP_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the elliptic curve over GF(p) library.&lt;br&gt;Module:&lt;br&gt;library/ecp.c&lt;br&gt;Caller:&lt;br&gt;library/ecdh.c&lt;br&gt;library/ecdsa.c&lt;br&gt;library/ecjpake.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C &amp; (MBEDTLS_ECP_DP_SECP192R1_ENABLED |  MBEDTLS_ECP_DP_SECP224R1_ENABLED | MBEDTLS_ECP_DP_SECP256R1_ENABLED | MBEDTLS_ECP_DP_SECP384R1_ENABLED | MBEDTLS_ECP_DP_SECP521R1_ENABLED | MBEDTLS_ECP_DP_SECP192K1_ENABLED | MBEDTLS_ECP_DP_SECP224K1_ENABLED | MBEDTLS_ECP_DP_SECP256K1_ENABLED | MBEDTLS_ECP_DP_BP256R1_ENABLED | MBEDTLS_ECP_DP_BP384R1_ENABLED | MBEDTLS_ECP_DP_BP512R1_ENABLED | MBEDTLS_ECP_DP_CURVE25519_ENABLED )</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ENTROPY_C" Comment="MBEDTLS_ENTROPY_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_SHA512_C | MBEDTLS_SHA256_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the platform-specific entropy code&lt;br&gt;Module:  library/entropy.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SHA512_C | MBEDTLS_SHA256_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_C" Comment="MBEDTLS_ENTROPY_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the platform-specific entropy code&lt;br&gt;Module:  library/entropy.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SHA512_C | MBEDTLS_SHA256_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ERROR_C" Comment="MBEDTLS_ERROR_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable error code to error string conversion&lt;br&gt;Module:  library/error.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ERROR_C" Comment="MBEDTLS_ERROR_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable error code to error string conversion&lt;br&gt;Module:  library/error.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_GCM_C" Comment="MBEDTLS_GCM_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_AES_C | MBEDTLS_CAMELLIA_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Galois/Counter Mode (GCM) for AES&lt;br&gt;Module:  library/gcm.c&lt;br&gt;This module enables the AES-GCM and CAMELLIA-GCM ciphersuites, if other requisites are enabled as well.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_AES_C | MBEDTLS_CAMELLIA_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_GCM_C" Comment="MBEDTLS_GCM_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the Galois/Counter Mode (GCM) for AES&lt;br&gt;Module:  library/gcm.c&lt;br&gt;This module enables the AES-GCM and CAMELLIA-GCM ciphersuites, if other requisites are enabled as well.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_AES_C | MBEDTLS_CAMELLIA_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HAVEGE_C" Comment="MBEDTLS_HAVEGE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_TIMING_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the HAVEGE random generator&lt;br&gt;WARNING!: the HAVEGE random generator is not suitable for virtualized environments&lt;br&gt;WARNING!: the HAVEGE random generator is dependent on timing and specific processor traits. It is therefore not advised to use HAVEGE as your applications primary random generator or primary entropy pool input. As a secondary input to your entropy pool, it IS able add the (limited) extra entropy it provides.&lt;br&gt;Module:  library/havege.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_TIMING_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HAVEGE_C" Comment="MBEDTLS_HAVEGE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the HAVEGE random generator&lt;br&gt;WARNING!: the HAVEGE random generator is not suitable for virtualized environments&lt;br&gt;WARNING!: the HAVEGE random generator is dependent on timing and specific processor traits. It is therefore not advised to use HAVEGE as your applications primary random generator or primary entropy pool input. As a secondary input to your entropy pool, it IS able add the (limited) extra entropy it provides.&lt;br&gt;Module:  library/havege.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_TIMING_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HKDF_C" Comment="MBEDTLS_HKDF_C" DefaultValue="1" Type="list" Group="General" TabName="Modules">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the HKDF algorithm (RFC 5869).&lt;br&gt;&lt;br&gt;Module:  library/hkdf.c&lt;br&gt; * This module adds support for the Hashed Message Authentication Code(HMAC)-based key derivation function (HKDF).&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Defined(define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HKDF_C" Comment="MBEDTLS_HKDF_C" DefaultValue="0" Type="list" Group="General" TabName="Modules">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the HKDF algorithm (RFC 5869).&lt;br&gt;&lt;br&gt;Module:  library/hkdf.c&lt;br&gt; * This module adds support for the Hashed Message Authentication Code(HMAC)-based key derivation function (HKDF).&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Defined(define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HMAC_DRBG_C" Comment="MBEDTLS_HMAC_DRBG_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_MD_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the HMAC_DRBG random generator.&lt;br&gt;Module:  library/hmac_drbg.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_C" Comment="MBEDTLS_HMAC_DRBG_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MD_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the HMAC_DRBG random generator.&lt;br&gt;Module:  library/hmac_drbg.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_C" Comment="MBEDTLS_HMAC_DRBG_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the HMAC_DRBG random generator.&lt;br&gt;Module:  library/hmac_drbg.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_C" Comment="MBEDTLS_HMAC_DRBG_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the HMAC_DRBG random generator.&lt;br&gt;Module:  library/hmac_drbg.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MD_C" Comment="MBEDTLS_MD_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic message digest layer&lt;br&gt;Module:  library/md.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MD2_C" Comment="MBEDTLS_MD2_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the MD2 hash algorithm&lt;br&gt;Module:  library/md2.c&lt;br&gt;&lt;br&gt; \warning   MD2 is considered a weak message digest and its use constitutes a security risk. If possible, we recommend avoiding dependencies on it, and considering stronger message digests instead.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MD4_C" Comment="MBEDTLS_MD4_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the MD4 hash algorithm&lt;br&gt;Module:  library/md4.c&lt;br&gt;&lt;br&gt; \warning   MD4 is considered a weak message digest and its use constitutes a security risk. If possible, we recommend avoiding dependencies on it, and considering stronger message digests instead.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MD5_C" Comment="MBEDTLS_MD5_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the MD5 hash algorithm&lt;br&gt;Module:&lt;br&gt;library/md5.c&lt;br&gt;Caller:&lt;br&gt;library/md.c&lt;br&gt;library/pem.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;This module is required for SSL/TLS up to version 1.1, and for TLS 1.2 depending on the handshake parameters. Further, it is used for checking MD5-signed certificates, and for PBKDF1 when decrypting PEM-encoded encrypted keys.&lt;br&gt;&lt;br&gt; \warning   MD5 is considered a weak message digest and its use constitutes a security risk. If possible, we recommend avoiding dependencies on it, and considering stronger message digests instead.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MD5_C" Comment="MBEDTLS_MD5_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the MD5 hash algorithm&lt;br&gt;Module:&lt;br&gt;library/md5.c&lt;br&gt;Caller:&lt;br&gt;library/md.c&lt;br&gt;library/pem.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;This module is required for SSL/TLS up to version 1.1, and for TLS 1.2 depending on the handshake parameters. Further, it is used for checking MD5-signed certificates, and for PBKDF1 when decrypting PEM-encoded encrypted keys.&lt;br&gt;&lt;br&gt; \warning   MD5 is considered a weak message digest and its use constitutes a security risk. If possible, we recommend avoiding dependencies on it, and considering stronger message digests instead.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MEMORY_BUFFER_ALLOC_C" Comment="MBEDTLS_MEMORY_BUFFER_ALLOC_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp; MBEDTLS_PLATFORM_MEMORY"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the buffer allocator implementation that makes use of a (stack) based buffer to 'allocate' dynamic memory. (replaces calloc() and free() calls)&lt;br&gt;Module:  library/memory_buffer_alloc.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_PLATFORM_MEMORY</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MEMORY_BUFFER_ALLOC_C" Comment="MBEDTLS_MEMORY_BUFFER_ALLOC_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the buffer allocator implementation that makes use of a (stack) based buffer to 'allocate' dynamic memory. (replaces calloc() and free() calls)&lt;br&gt;Module:  library/memory_buffer_alloc.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_PLATFORM_MEMORY</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_NET_C" Comment="MBEDTLS_NET_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
<!--        <Condition Diagnostic="" Expression="MBEDTLS_TCP_IP = LWIP TCP/IP stack"/> -->
        <Condition Diagnostic="" Expression="S_LWIP"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the TCP and UDP over IPv6/IPv4 networking routines. &lt;br&gt; Note: This module only works on POSIX/Unix (including Linux, BSD and OS X) and Windows. For other platforms, you'll want to disable it, and write your own networking callbacks to be passed to \c mbedtls_ssl_set_bio().&lt;/b&gt;&lt;b&gt;Note:&lt;/b&gt; See also our Knowledge Base article about porting to a new environment: https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_NET_C" Comment="MBEDTLS_NET_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the TCP and UDP over IPv6/IPv4 networking routines. &lt;br&gt; Note: This module only works on POSIX/Unix (including Linux, BSD and OS X) and Windows. For other platforms, you'll want to disable it, and write your own networking callbacks to be passed to \c mbedtls_ssl_set_bio().&lt;/b&gt;&lt;b&gt;Note:&lt;/b&gt; See also our Knowledge Base article about porting to a new environment: https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_OID_C" Comment="MBEDTLS_OID_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the OID database.&lt;br&gt;Module:&lt;br&gt;library/oid.c&lt;br&gt;Caller:&lt;br&gt;library/asn1write.c&lt;br&gt;library/pkcs5.c&lt;br&gt;library/pkparse.c&lt;br&gt;library/pkwrite.c&lt;br&gt;library/rsa.c&lt;br&gt;library/x509.c&lt;br&gt;library/x509_create.c&lt;br&gt;library/x509_crl.c&lt;br&gt;library/x509_crt.c&lt;br&gt;library/x509_csr.c&lt;br&gt;library/x509write_crt.c&lt;br&gt;library/x509write_csr.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PADLOCK_C" Comment="MBEDTLS_PADLOCK_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_HAVE_ASM &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable VIA Padlock support on x86.&lt;br&gt;Module:  library/padlock.c&lt;br&gt;Caller:  library/aes.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HAVE_ASM</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PADLOCK_C" Comment="MBEDTLS_PADLOCK_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HAVE_ASM"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable VIA Padlock support on x86.&lt;br&gt;Module:  library/padlock.c&lt;br&gt;Caller:  library/aes.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HAVE_ASM</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PADLOCK_C" Comment="MBEDTLS_PADLOCK_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable VIA Padlock support on x86.&lt;br&gt;Module:  library/padlock.c&lt;br&gt;Caller:  library/aes.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HAVE_ASM</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PADLOCK_C" Comment="MBEDTLS_PADLOCK_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable VIA Padlock support on x86.&lt;br&gt;Module:  library/padlock.c&lt;br&gt;Caller:  library/aes.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HAVE_ASM</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PEM_PARSE_C" Comment="MBEDTLS_PEM_PARSE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_BASE64_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PEM decoding / parsing.&lt;br&gt;Module:&lt;br&gt;library/pem.c&lt;br&gt;Caller:&lt;br&gt;library/dhm.c&lt;br&gt;library/pkparse.c&lt;br&gt;library/x509_crl.c&lt;br&gt;library/x509_crt.c&lt;br&gt;library/x509_csr.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BASE64_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PEM_PARSE_C" Comment="MBEDTLS_PEM_PARSE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PEM decoding / parsing.&lt;br&gt;Module:&lt;br&gt;library/pem.c&lt;br&gt;Caller:&lt;br&gt;library/dhm.c&lt;br&gt;library/pkparse.c&lt;br&gt;library/x509_crl.c&lt;br&gt;library/x509_crt.c&lt;br&gt;library/x509_csr.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BASE64_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PEM_WRITE_C" Comment="MBEDTLS_PEM_WRITE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_BASE64_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PEM encoding / writing&lt;br&gt;Module:&lt;br&gt;library/pem.c&lt;br&gt;Caller:&lt;br&gt;library/pkwrite.c&lt;br&gt;library/x509write_crt.c&lt;br&gt;library/x509write_csr.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BASE64_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PEM_WRITE_C" Comment="MBEDTLS_PEM_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_BASE64_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PEM encoding / writing&lt;br&gt;Module:&lt;br&gt;library/pem.c&lt;br&gt;Caller:&lt;br&gt;library/pkwrite.c&lt;br&gt;library/x509write_crt.c&lt;br&gt;library/x509write_csr.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BASE64_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PEM_WRITE_C" Comment="MBEDTLS_PEM_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PEM encoding / writing&lt;br&gt;Module:&lt;br&gt;library/pem.c&lt;br&gt;Caller:&lt;br&gt;library/pkwrite.c&lt;br&gt;library/x509write_crt.c&lt;br&gt;library/x509write_csr.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BASE64_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PEM_WRITE_C" Comment="MBEDTLS_PEM_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PEM encoding / writing&lt;br&gt;Module:&lt;br&gt;library/pem.c&lt;br&gt;Caller:&lt;br&gt;library/pkwrite.c&lt;br&gt;library/x509write_crt.c&lt;br&gt;library/x509write_csr.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BASE64_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PK_C" Comment="MBEDTLS_PK_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_RSA_C | MBEDTLS_ECP_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic public (asymetric) key layer.&lt;br&gt;Module:&lt;br&gt;library/pk.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_tls.c&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C | MBEDTLS_ECP_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PK_C" Comment="MBEDTLS_PK_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic public (asymetric) key layer.&lt;br&gt;Module:&lt;br&gt;library/pk.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_tls.c&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_RSA_C | MBEDTLS_ECP_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PK_PARSE_C" Comment="MBEDTLS_PK_PARSE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_PK_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic public (asymetric) key parser.&lt;br&gt;Module:&lt;br&gt;library/pkparse.c&lt;br&gt;Caller:&lt;br&gt;library/x509_crt.c&lt;br&gt;library/x509_csr.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PK_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PK_PARSE_C" Comment="MBEDTLS_PK_PARSE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic public (asymetric) key parser.&lt;br&gt;Module:&lt;br&gt;library/pkparse.c&lt;br&gt;Caller:&lt;br&gt;library/x509_crt.c&lt;br&gt;library/x509_csr.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PK_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PK_WRITE_C" Comment="MBEDTLS_PK_WRITE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_PK_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic public (asymetric) key writer.&lt;br&gt;Module:  library/pkwrite.c&lt;br&gt;Caller:  library/x509write.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PK_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PK_WRITE_C" Comment="MBEDTLS_PK_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PK_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic public (asymetric) key writer.&lt;br&gt;Module:  library/pkwrite.c&lt;br&gt;Caller:  library/x509write.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PK_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PK_WRITE_C" Comment="MBEDTLS_PK_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic public (asymetric) key writer.&lt;br&gt;Module:  library/pkwrite.c&lt;br&gt;Caller:  library/x509write.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PK_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PK_WRITE_C" Comment="MBEDTLS_PK_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic public (asymetric) key writer.&lt;br&gt;Module:  library/pkwrite.c&lt;br&gt;Caller:  library/x509write.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PK_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PKCS5_C" Comment="MBEDTLS_PKCS5_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_MD_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PKCS#5 functions&lt;br&gt;Module:  library/pkcs5.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS5_C" Comment="MBEDTLS_PKCS5_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MD_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PKCS#5 functions&lt;br&gt;Module:  library/pkcs5.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS5_C" Comment="MBEDTLS_PKCS5_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PKCS#5 functions&lt;br&gt;Module:  library/pkcs5.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS5_C" Comment="MBEDTLS_PKCS5_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PKCS#5 functions&lt;br&gt;Module:  library/pkcs5.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MD_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PKCS11_C" Comment="MBEDTLS_PKCS11_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PK_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable wrapper for PKCS#11 smartcard support * Module:  library/pkcs11.c&lt;br&gt;Caller:  library/pk.c&lt;br&gt;This module enables SSL/TLS PKCS #11 smartcard support.&lt;br&gt;Requires the presence of the PKCS#11 helper library (libpkcs11-helper)&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PK_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS11_C" Comment="MBEDTLS_PKCS11_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable wrapper for PKCS#11 smartcard support * Module:  library/pkcs11.c&lt;br&gt;Caller:  library/pk.c&lt;br&gt;This module enables SSL/TLS PKCS #11 smartcard support.&lt;br&gt;Requires the presence of the PKCS#11 helper library (libpkcs11-helper)&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PK_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PKCS12_C" Comment="MBEDTLS_PKCS12_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ASN1_PARSE_C &amp; MBEDTLS_CIPHER_C &amp; MBEDTLS_MD_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PKCS#12 PBE functions.&lt;br&gt;Adds algorithms for parsing PKCS#8 encrypted private keys&lt;br&gt;Module:  library/pkcs12.c&lt;br&gt;Caller:  library/pkparse.c&lt;br&gt;Can use:  MBEDTLS_ARC4_C&lt;br&gt;This module enables PKCS#12 functions.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ASN1_PARSE_C &amp; MBEDTLS_CIPHER_C &amp; MBEDTLS_MD_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS12_C" Comment="MBEDTLS_PKCS12_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ASN1_PARSE_C &amp; MBEDTLS_CIPHER_C &amp; MBEDTLS_MD_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PKCS#12 PBE functions.&lt;br&gt;Adds algorithms for parsing PKCS#8 encrypted private keys&lt;br&gt;Module:  library/pkcs12.c&lt;br&gt;Caller:  library/pkparse.c&lt;br&gt;Can use:  MBEDTLS_ARC4_C&lt;br&gt;This module enables PKCS#12 functions.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ASN1_PARSE_C &amp; MBEDTLS_CIPHER_C &amp; MBEDTLS_MD_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS12_C" Comment="MBEDTLS_PKCS12_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PKCS#12 PBE functions.&lt;br&gt;Adds algorithms for parsing PKCS#8 encrypted private keys&lt;br&gt;Module:  library/pkcs12.c&lt;br&gt;Caller:  library/pkparse.c&lt;br&gt;Can use:  MBEDTLS_ARC4_C&lt;br&gt;This module enables PKCS#12 functions.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ASN1_PARSE_C &amp; MBEDTLS_CIPHER_C &amp; MBEDTLS_MD_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PKCS12_C" Comment="MBEDTLS_PKCS12_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable PKCS#12 PBE functions.&lt;br&gt;Adds algorithms for parsing PKCS#8 encrypted private keys&lt;br&gt;Module:  library/pkcs12.c&lt;br&gt;Caller:  library/pkparse.c&lt;br&gt;Can use:  MBEDTLS_ARC4_C&lt;br&gt;This module enables PKCS#12 functions.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ASN1_PARSE_C &amp; MBEDTLS_CIPHER_C &amp; MBEDTLS_MD_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_C" Comment="MBEDTLS_PLATFORM_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the platform abstraction layer that allows you to re-assign functions like calloc(), free(), snprintf(), printf(), fprintf(), exit(). &lt;br&gt; Enabling MBEDTLS_PLATFORM_C enables to use of MBEDTLS_PLATFORM_XXX_ALT or MBEDTLS_PLATFORM_XXX_MACRO directives, allowing the functions mentioned above to be specified at runtime or compile time respectively.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This abstraction layer must be enabled on Windows (including MSYS2) as other module rely on it for a fixed snprintf implementation.Module:  library/platform.c&lt;br&gt;Caller:  Most other .c files&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_RIPEMD160_C" Comment="MBEDTLS_RIPEMD160_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RIPEMD-160 hash algorithm.&lt;br&gt;Module:  library/ripemd160.c&lt;br&gt;Caller:  library/md.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_RIPEMD160_C" Comment="MBEDTLS_RIPEMD160_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RIPEMD-160 hash algorithm.&lt;br&gt;Module:  library/ripemd160.c&lt;br&gt;Caller:  library/md.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_RSA_C" Comment="MBEDTLS_RSA_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA public-key cryptosystem&lt;br&gt;Module:&lt;br&gt;library/rsa.c&lt;br&gt;library/rsa_internal.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;library/x509.c&lt;br&gt;This module is used by the following key exchanges:&lt;br&gt; RSA, DHE-RSA, ECDHE-RSA, RSA-PSK&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_RSA_C" Comment="MBEDTLS_RSA_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA public-key cryptosystem&lt;br&gt;Module:&lt;br&gt;library/rsa.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;library/x509.c&lt;br&gt;This module is used by the following key exchanges:&lt;br&gt; RSA, DHE-RSA, ECDHE-RSA, RSA-PSK&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_RSA_C" Comment="MBEDTLS_RSA_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA public-key cryptosystem&lt;br&gt;Module:&lt;br&gt;library/rsa.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;library/x509.c&lt;br&gt;This module is used by the following key exchanges:&lt;br&gt; RSA, DHE-RSA, ECDHE-RSA, RSA-PSK&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_RSA_C" Comment="MBEDTLS_RSA_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the RSA public-key cryptosystem&lt;br&gt;Module:&lt;br&gt;library/rsa.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;library/x509.c&lt;br&gt;This module is used by the following key exchanges:&lt;br&gt; RSA, DHE-RSA, ECDHE-RSA, RSA-PSK&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA1_C" Comment="MBEDTLS_SHA1_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the SHA1 cryptographic hash algorithm&lt;br&gt;Module:&lt;br&gt;library/sha1.c&lt;br&gt;Caller:&lt;br&gt;library/md.c&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;library/x509write_crt.c&lt;br&gt;This module is required for SSL/TLS up to version 1.1, for TLS 1.2 depending on the handshake parameters, and for SHA1-signed certificates.&lt;br&gt; \warning   SHA-1 is considered a weak message digest and its use constitutes a security risk. If possible, we recommend avoiding dependencies on it, and considering stronger message digests instead.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SHA1_C" Comment="MBEDTLS_SHA1_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the SHA1 cryptographic hash algorithm&lt;br&gt;Module:&lt;br&gt;library/sha1.c&lt;br&gt;Caller:&lt;br&gt;library/md.c&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;library/x509write_crt.c&lt;br&gt;This module is required for SSL/TLS up to version 1.1, for TLS 1.2 depending on the handshake parameters, and for SHA1-signed certificates.&lt;br&gt; \warning   SHA-1 is considered a weak message digest and its use constitutes a security risk. If possible, we recommend avoiding dependencies on it, and considering stronger message digests instead.&lt;br&gt;&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA256_C" Comment="MBEDTLS_SHA256_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the SHA-224 and SHA-256 cryptographic hash algorithms&lt;br&gt;Module:&lt;br&gt;library/sha256.c&lt;br&gt;Caller:&lt;br&gt;library/entropy.c&lt;br&gt;library/md.clibrary/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;&lt;br&gt;This module adds support for SHA-224 and SHA-256.&lt;br&gt;This module is required for the SSL/TLS 1.2 PRF function.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SHA512_C" Comment="MBEDTLS_SHA512_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the SHA-384 and SHA-512 cryptographic hash algorithms&lt;br&gt;Module:&lt;br&gt;library/sha512.c&lt;br&gt;Caller:&lt;br&gt;library/entropy.c&lt;br&gt;library/md.c&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;This module adds support for SHA-384 and SHA-512.&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_CACHE_C" Comment="MBEDTLS_SSL_CACHE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable simple SSL cache implementation&lt;br&gt;Module:  library/ssl_cache.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_CACHE_C" Comment="MBEDTLS_SSL_CACHE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable simple SSL cache implementation&lt;br&gt;Module:  library/ssl_cache.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_COOKIE_C" Comment="MBEDTLS_SSL_COOKIE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable basic implementation of DTLS cookies for hello verification.&lt;br&gt;Module:  library/ssl_cookie.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_COOKIE_C" Comment="MBEDTLS_SSL_COOKIE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable basic implementation of DTLS cookies for hello verification.&lt;br&gt;Module:  library/ssl_cookie.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_TICKET_C" Comment="MBEDTLS_SSL_TICKET_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_CIPHER_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable an implementation of TLS server-side callbacks for session tickets.&lt;br&gt;Module:  library/ssl_ticket.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CIPHER_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_TICKET_C" Comment="MBEDTLS_SSL_TICKET_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CIPHER_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable an implementation of TLS server-side callbacks for session tickets.&lt;br&gt;Module:  library/ssl_ticket.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CIPHER_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_TICKET_C" Comment="MBEDTLS_SSL_TICKET_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable an implementation of TLS server-side callbacks for session tickets.&lt;br&gt;Module:  library/ssl_ticket.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CIPHER_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_TICKET_C" Comment="MBEDTLS_SSL_TICKET_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable an implementation of TLS server-side callbacks for session tickets.&lt;br&gt;Module:  library/ssl_ticket.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CIPHER_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_CLI_C" Comment="MBEDTLS_SSL_CLI_C" DefaultValue="0" Type="list" Group="Modes" TabName="Version and modes" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_TLS_C &amp; !S_LWIP"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the SSL/TLS client code&lt;br&gt;Module:  library/ssl_cli.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_TLS_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_CLI_C" Comment="MBEDTLS_SSL_CLI_C" DefaultValue="1" Type="list" Group="Modes" TabName="Version and modes" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_TLS_C &amp; S_LWIP"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the SSL/TLS client code&lt;br&gt;Module:  library/ssl_cli.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_TLS_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_CLI_C" Comment="MBEDTLS_SSL_CLI_C" DefaultValue="0" Type="list" Group="Modes" TabName="Version and modes" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the SSL/TLS client code&lt;br&gt;Module:  library/ssl_cli.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_TLS_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_SRV_C" Comment="MBEDTLS_SSL_SRV_C" DefaultValue="0" Type="list" Group="Modes" TabName="Version and modes" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_TLS_C &amp; !S_LWIP"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the SSL/TLS server code&lt;br&gt;Module:  library/ssl_srv.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_TLS_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_SRV_C" Comment="MBEDTLS_SSL_SRV_C" DefaultValue="1" Type="list" Group="Modes" TabName="Version and modes" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_TLS_C &amp; S_LWIP"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the SSL/TLS server code&lt;br&gt;Module:  library/ssl_srv.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_TLS_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_SRV_C" Comment="MBEDTLS_SSL_SRV_C" DefaultValue="0" Type="list" Group="Modes" TabName="Version and modes" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the SSL/TLS server code&lt;br&gt;Module:  library/ssl_srv.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_TLS_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_TLS_C" Comment="MBEDTLS_SSL_TLS_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_CIPHER_C &amp; MBEDTLS_MD_C &amp; (MBEDTLS_SSL_PROTO_SSL3 | MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_TLS1_2 | MBEDTLS_SSL_PROTO_DTLS)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic SSL/TLS code&lt;br&gt;Module:&lt;br&gt;library/ssl_tls.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CIPHER_C &amp; MBEDTLS_MD_C &amp; (MBEDTLS_SSL_PROTO_SSL3 | MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_DTLS)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_TLS_C" Comment="MBEDTLS_SSL_TLS_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the generic SSL/TLS code&lt;br&gt;Module:&lt;br&gt;library/ssl_tls.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CIPHER_C &amp; MBEDTLS_MD_C &amp; (MBEDTLS_SSL_PROTO_SSL3 | MBEDTLS_SSL_PROTO_TLS1 | MBEDTLS_SSL_PROTO_TLS1_1 | MBEDTLS_SSL_PROTO_DTLS)</Description>
    </RefParameter>

<!--    <RefParameter Name="MBEDTLS_THREADING_C" Comment="MBEDTLS_THREADING_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="!S_LWIP &amp; !S_FREERTOS &amp; !MBEDTLS_TIMING_ALT"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Need FreeRTOS to be activated - Enable the threading abstraction layer. &lt;br&gt; By default mbed TLS assumes it is used in a non-threaded environment or that contexts are not shared between threads. If you do intend to use contexts between threads, you will need to enable this layer to prevent race conditions.See also our Knowledge Base article about threading:&lt;br&gt;https://tls.mbed.org/kb/development/thread-safety-and-multi-threading&lt;br&gt;Module:  library/threading.c&lt;br&gt;This allows different threading implementations (self-implemented or provided).&lt;br&gt;You will have to enable either MBEDTLS_THREADING_ALT or MBEDTLS_THREADING_PTHREAD.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_THREADING_C" Comment="MBEDTLS_THREADING_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="!S_LWIP &amp; !S_FREERTOS &amp; MBEDTLS_TIMING_ALT"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>FreeRTOS available so can be activated - Enable the threading abstraction layer. &lt;br&gt; By default mbed TLS assumes it is used in a non-threaded environment or that contexts are not shared between threads. If you do intend to use contexts between threads, you will need to enable this layer to prevent race conditions.See also our Knowledge Base article about threading:&lt;br&gt;https://tls.mbed.org/kb/development/thread-safety-and-multi-threading&lt;br&gt;Module:  library/threading.c&lt;br&gt;This allows different threading implementations (self-implemented or provided).&lt;br&gt;You will have to enable either MBEDTLS_THREADING_ALT or MBEDTLS_THREADING_PTHREAD.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter> -->
    <RefParameter Name="MBEDTLS_THREADING_C" Comment="MBEDTLS_THREADING_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1" Semaphore="S_MBEDTLS_THREADING_C"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the threading abstraction layer. &lt;br&gt; By default mbed TLS assumes it is used in a non-threaded environment or that contexts are not shared between threads. If you do intend to use contexts between threads, you will need to enable this layer to prevent race conditions.See also our Knowledge Base article about threading:&lt;br&gt;https://tls.mbed.org/kb/development/thread-safety-and-multi-threading&lt;br&gt;Module:  library/threading.c&lt;br&gt;This allows different threading implementations (self-implemented or provided).&lt;br&gt;You will have to enable either MBEDTLS_THREADING_ALT or MBEDTLS_THREADING_PTHREAD.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_TIMING_C" Comment="MBEDTLS_TIMING_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1" Semaphore="S_MBEDTLS_TIMING_C"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the portable timing interface&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;The provided implementation only works on POSIX/Unix (including Linux,BSD and OS X) and Windows. On other platforms, you can either disable thatodule and provide your own implementations of the callbacks needed by \c mbedtls_ssl_set_timer_cb() for DTLS, or leave it enabled and provide your own implementation of the whole module by setting \c MBEDTLS_TIMING_ALT in the current file.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; See also our Knowledge Base article about porting to a new environment:&lt;br&gt; https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS &lt;br&gt;Module:  library/timing.c&lt;br&gt;Caller:  library/havege.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_VERSION_C" Comment="MBEDTLS_VERSION_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable run-time version information&lt;br&gt;Module:  library/version.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_VERSION_C" Comment="MBEDTLS_VERSION_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable run-time version information&lt;br&gt;Module:  library/version.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_USE_C" Comment="MBEDTLS_X509_USE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ASN1_PARSE_C &amp; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C &amp; MBEDTLS_PK_PARSE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 core for using certificates.&lt;br&gt;Module:&lt;br&gt;library/x509.c&lt;br&gt;&lt;br&gt;Caller:  library/x509_crl.c&lt;br&gt;library/x509_crt.c&lt;br&gt;library/x509_csr.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ASN1_PARSE_C &amp; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C &amp; MBEDTLS_PK_PARSE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_USE_C" Comment="MBEDTLS_X509_USE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 core for using certificates.&lt;br&gt;Module:&lt;br&gt;library/x509.c&lt;br&gt;&lt;br&gt;Caller:  library/x509_crl.c&lt;br&gt;library/x509_crt.c&lt;br&gt;library/x509_csr.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ASN1_PARSE_C &amp; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C &amp; MBEDTLS_PK_PARSE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_CRT_PARSE_C" Comment="MBEDTLS_X509_CRT_PARSE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_USE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 certificate parsing.&lt;br&gt;Module:&lt;br&gt;library/x509_crt.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CRT_PARSE_C" Comment="MBEDTLS_X509_CRT_PARSE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 certificate parsing.&lt;br&gt;Module:&lt;br&gt;library/x509_crt.c&lt;br&gt;Caller:&lt;br&gt;library/ssl_cli.c&lt;br&gt;library/ssl_srv.c&lt;br&gt;library/ssl_tls.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_CRL_PARSE_C" Comment="MBEDTLS_X509_CRL_PARSE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_USE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 CRL parsing.&lt;br&gt;Module:  library/x509_crl.c&lt;br&gt;Caller:  library/x509_crt.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CRL_PARSE_C" Comment="MBEDTLS_X509_CRL_PARSE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_USE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 CRL parsing.&lt;br&gt;Module:  library/x509_crl.c&lt;br&gt;Caller:  library/x509_crt.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CRL_PARSE_C" Comment="MBEDTLS_X509_CRL_PARSE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 CRL parsing.&lt;br&gt;Module:  library/x509_crl.c&lt;br&gt;Caller:  library/x509_crt.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CRL_PARSE_C" Comment="MBEDTLS_X509_CRL_PARSE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 CRL parsing.&lt;br&gt;Module:  library/x509_crl.c&lt;br&gt;Caller:  library/x509_crt.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_CSR_PARSE_C" Comment="MBEDTLS_X509_CSR_PARSE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_USE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 Certificate Signing Request (CSR) parsing.&lt;br&gt;Module:  library/x509_csr.c&lt;br&gt;Caller:  library/x509_crt_write.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CSR_PARSE_C" Comment="MBEDTLS_X509_CSR_PARSE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_USE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 Certificate Signing Request (CSR) parsing.&lt;br&gt;Module:  library/x509_csr.c&lt;br&gt;Caller:  library/x509_crt_write.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CSR_PARSE_C" Comment="MBEDTLS_X509_CSR_PARSE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 Certificate Signing Request (CSR) parsing.&lt;br&gt;Module:  library/x509_csr.c&lt;br&gt;Caller:  library/x509_crt_write.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CSR_PARSE_C" Comment="MBEDTLS_X509_CSR_PARSE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 Certificate Signing Request (CSR) parsing.&lt;br&gt;Module:  library/x509_csr.c&lt;br&gt;Caller:  library/x509_crt_write.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_CREATE_C" Comment="MBEDTLS_X509_CREATE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C &amp; MBEDTLS_PK_WRITE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 core for creating certificates.&lt;br&gt;Module:  library/x509_create.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C &amp; MBEDTLS_PK_WRITE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CREATE_C" Comment="MBEDTLS_X509_CREATE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C &amp; MBEDTLS_PK_WRITE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 core for creating certificates.&lt;br&gt;Module:  library/x509_create.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C &amp; MBEDTLS_PK_WRITE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CREATE_C" Comment="MBEDTLS_X509_CREATE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 core for creating certificates.&lt;br&gt;Module:  library/x509_create.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C &amp; MBEDTLS_PK_WRITE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CREATE_C" Comment="MBEDTLS_X509_CREATE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable X.509 core for creating certificates.&lt;br&gt;Module:  library/x509_create.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C &amp; MBEDTLS_OID_C &amp; MBEDTLS_PK_WRITE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_CRT_WRITE_C" Comment="MBEDTLS_X509_CRT_WRITE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_CREATE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable creating X.509 certificates.&lt;br&gt;Module:  library/x509_crt_write.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CREATE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CRT_WRITE_C" Comment="MBEDTLS_X509_CRT_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_CREATE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable creating X.509 certificates.&lt;br&gt;Module:  library/x509_crt_write.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CREATE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CRT_WRITE_C" Comment="MBEDTLS_X509_CRT_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable creating X.509 certificates.&lt;br&gt;Module:  library/x509_crt_write.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CREATE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CRT_WRITE_C" Comment="MBEDTLS_X509_CRT_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable creating X.509 certificates.&lt;br&gt;Module:  library/x509_crt_write.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CREATE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_CSR_WRITE_C" Comment="MBEDTLS_X509_CSR_WRITE_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_CREATE_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable creating X.509 Certificate Signing Requests (CSR).&lt;br&gt;Module:  library/x509_csr_write.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CREATE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CSR_WRITE_C" Comment="MBEDTLS_X509_CSR_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_CREATE_C"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable creating X.509 Certificate Signing Requests (CSR).&lt;br&gt;Module:  library/x509_csr_write.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CREATE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CSR_WRITE_C" Comment="MBEDTLS_X509_CSR_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable creating X.509 Certificate Signing Requests (CSR).&lt;br&gt;Module:  library/x509_csr_write.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CREATE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_CSR_WRITE_C" Comment="MBEDTLS_X509_CSR_WRITE_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable creating X.509 Certificate Signing Requests (CSR).&lt;br&gt;Module:  library/x509_csr_write.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_CREATE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_XTEA_C" Comment="MBEDTLS_XTEA_C" DefaultValue="1" Type="list" Group="General" TabName="Modules" Mode="Basic">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the XTEA block cipher&lt;br&gt;Module:  library/xtea.c&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Defined(#define)</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_XTEA_C" Comment="MBEDTLS_XTEA_C" DefaultValue="0" Type="list" Group="General" TabName="Modules" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable the XTEA block cipher&lt;br&gt;Module:  library/xtea.c&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Not Defined(//#define)</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Module configuration options - MPI / BIGNUM options -->

    <RefParameter Name="MBEDTLS_MPI_WINDOW_SIZE_ENABLE" Comment="MBEDTLS_MPI_WINDOW_SIZE_ENABLE" DefaultValue="0" Type="list" Group="MPI / BIGNUM" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_BIGNUM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_MPI_WINDOW_SIZE options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MPI_WINDOW_SIZE_ENABLE" Comment="MBEDTLS_MPI_WINDOW_SIZE_ENABLE" DefaultValue="0" Type="list" Group="MPI / BIGNUM" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_MPI_WINDOW_SIZE options configuration&lt;b&gt;&lt;br&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MPI_WINDOW_SIZE" Comment="MBEDTLS_MPI_WINDOW_SIZE" DefaultValue="6" Type="integer" Group="MPI / BIGNUM" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MPI_WINDOW_SIZE_ENABLE"/>
        <Description>Maximum windows size used &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 6</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MPI_WINDOW_SIZE" Comment="MBEDTLS_MPI_WINDOW_SIZE" DefaultValue="6" Type="integer" Group="MPI / BIGNUM" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="6"/>
        <Description>Maximum windows size used &lt;br&gt;&lt;b&gt;&lt;br&gt;Default value:&lt;/b&gt; 6</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MPI_MAX_SIZE_ENABLE" Comment="MBEDTLS_MPI_MAX_SIZE_ENABLE" DefaultValue="0" Type="list" Group="MPI / BIGNUM" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_BIGNUM_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_MPI_MAX_SIZE options configuration&lt;b&gt;&lt;br&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MPI_MAX_SIZE_ENABLE" Comment="MBEDTLS_MPI_MAX_SIZE_ENABLE" DefaultValue="Enabled" Type="list" Group="MPI / BIGNUM" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_BIGNUM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_MPI_MAX_SIZE options configuration&lt;b&gt;&lt;br&gt;Default value:&lt;/b&gt; Enabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MPI_MAX_SIZE_ENABLE" Comment="MBEDTLS_MPI_MAX_SIZE_ENABLE" DefaultValue="0" Type="list" Group="MPI / BIGNUM" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_MPI_MAX_SIZE options configuration&lt;b&gt;&lt;br&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_BIGNUM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MPI_MAX_SIZE" Comment="MBEDTLS_MPI_MAX_SIZE" DefaultValue="1024" Type="integer" Group="MPI / BIGNUM" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MPI_MAX_SIZE_ENABLE &amp; (STM32F7 | STM32H7)"/>
        <Description>Maximum number of bytes for usable MPIs &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 1024</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MPI_MAX_SIZE" Comment="MBEDTLS_MPI_MAX_SIZE" DefaultValue="48" Type="integer" Group="MPI / BIGNUM" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_MPI_MAX_SIZE_ENABLE"/>
        <Description>Maximum number of bytes for usable MPIs &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 48</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MPI_MAX_SIZE" Comment="MBEDTLS_MPI_MAX_SIZE" DefaultValue="1024" Type="integer" Group="MPI / BIGNUM" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="1024"/>
        <Description>Maximum number of bytes for usable MPIs &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 1024</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Module configuration options - CTR_DRBG options -->

    <RefParameter Name="MBEDTLS_CTR_DRBG_ENTROPY_LEN_ENABLE" Comment="MBEDTLS_CTR_DRBG_ENTROPY_LEN_ENABLE" DefaultValue="0" Type="list" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CTR_DRBG_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_CTR_DRBG_ENTROPY_LEN options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CTR_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_ENTROPY_LEN_ENABLE" Comment="MBEDTLS_CTR_DRBG_ENTROPY_LEN_ENABLE" DefaultValue="0" Type="list" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_CTR_DRBG_ENTROPY_LEN options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CTR_DRBG_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CTR_DRBG_ENTROPY_LEN" Comment="MBEDTLS_CTR_DRBG_ENTROPY_LEN" DefaultValue="48" Type="integer" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CTR_DRBG_ENTROPY_LEN_ENABLE"/>
        <Description>Amount of entropy used per seed by default (48 with SHA-512, 32 with SHA-256) &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 48</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_ENTROPY_LEN" Comment="MBEDTLS_CTR_DRBG_ENTROPY_LEN" DefaultValue="48" Type="integer" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="48"/>
        <Description>Amount of entropy used per seed by default (48 with SHA-512, 32 with SHA-256) &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 48</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CTR_DRBG_RESEED_INTERVAL_ENABLE" Comment="MBEDTLS_CTR_DRBG_RESEED_INTERVAL_ENABLE" DefaultValue="0" Type="list" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CTR_DRBG_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_CTR_DRBG_RESEED_INTERVAL options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CTR_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_RESEED_INTERVAL_ENABLE" Comment="MBEDTLS_CTR_DRBG_RESEED_INTERVAL_ENABLE" DefaultValue="0" Type="list" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_CTR_DRBG_RESEED_INTERVAL options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CTR_DRBG_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CTR_DRBG_RESEED_INTERVAL" Comment="MBEDTLS_CTR_DRBG_RESEED_INTERVAL" DefaultValue="1000" Type="integer" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CTR_DRBG_RESEED_INTERVAL_ENABLE"/>
        <Description>Interval before reseed is performed by default &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 1000</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_RESEED_INTERVAL" Comment="MBEDTLS_CTR_DRBG_RESEED_INTERVAL" DefaultValue="1000" Type="integer" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="1000"/>
        <Description>Interval before reseed is performed by default &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 1000</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_INPUT_ENABLE" Comment="MBEDTLS_CTR_DRBG_MAX_INPUT_ENABLE" DefaultValue="0" Type="list" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CTR_DRBG_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_CTR_DRBG_MAX_INPUT options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CTR_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_INPUT_ENABLE" Comment="MBEDTLS_CTR_DRBG_MAX_INPUT_ENABLE" DefaultValue="0" Type="list" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_CTR_DRBG_MAX_INPUT options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CTR_DRBG_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_INPUT" Comment="MBEDTLS_CTR_DRBG_MAX_INPUT" DefaultValue="256" Type="integer" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CTR_DRBG_MAX_INPUT_ENABLE"/>
        <Description>Maximum number of additional input bytes &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 256</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_INPUT" Comment="MBEDTLS_CTR_DRBG_MAX_INPUT" DefaultValue="256" Type="integer" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="256"/>
        <Description>Maximum number of additional input bytes &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 256</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_REQUEST_ENABLE" Comment="MBEDTLS_CTR_DRBG_MAX_REQUEST_ENABLE" DefaultValue="0" Type="list" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CTR_DRBG_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_CTR_DRBG_MAX_REQUEST options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CTR_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_REQUEST_ENABLE" Comment="MBEDTLS_CTR_DRBG_MAX_REQUEST_ENABLE" DefaultValue="0" Type="list" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_CTR_DRBG_MAX_REQUEST options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CTR_DRBG_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_REQUEST" Comment="MBEDTLS_CTR_DRBG_MAX_REQUEST" DefaultValue="1024" Type="integer" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CTR_DRBG_MAX_REQUEST_ENABLE"/>
        <Description>Maximum number of requested bytes per call &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 1024</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_REQUEST" Comment="MBEDTLS_CTR_DRBG_MAX_REQUEST" DefaultValue="1024" Type="integer" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="1024"/>
        <Description>Maximum number of requested bytes per call &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 1024</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT_ENABLE" Comment="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT_ENABLE" DefaultValue="0" Type="list" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CTR_DRBG_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_CTR_DRBG_MAX_SEED_INPUT options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CTR_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT_ENABLE" Comment="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT_ENABLE" DefaultValue="0" Type="list" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_CTR_DRBG_MAX_SEED_INPUT options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_CTR_DRBG_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT" Comment="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT" DefaultValue="384" Type="integer" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT_ENABLE"/>
        <Description>Maximum size of (re)seed buffer &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 384</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT" Comment="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT" DefaultValue="384" Type="integer" Group="CTR_DRBG" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="384"/>
        <Description>Maximum size of (re)seed buffer &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 384</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Module configuration options - HMAC_DRBG options -->

    <RefParameter Name="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL_ENABLE" Comment="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL_ENABLE" DefaultValue="0" Type="list" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HMAC_DRBG_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable HMAC_DRBG options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL_ENABLE" Comment="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL_ENABLE" DefaultValue="0" Type="list" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable HMAC_DRBG options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL" Comment="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL" DefaultValue="10000" Type="integer" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL_ENABLE"/>
        <Description>Interval before reseed is performed by default &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 10000</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL" Comment="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL" DefaultValue="10000" Type="integer" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="10000"/>
        <Description>Interval before reseed is performed by default&lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 10000</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_INPUT_ENABLE" Comment="MBEDTLS_HMAC_DRBG_MAX_INPUT_ENABLE" DefaultValue="0" Type="list" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HMAC_DRBG_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable HMAC_DRBG options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_INPUT_ENABLE" Comment="MBEDTLS_HMAC_DRBG_MAX_INPUT_ENABLE" DefaultValue="0" Type="list" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable HMAC_DRBG options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_INPUT" Comment="MBEDTLS_HMAC_DRBG_MAX_INPUT" DefaultValue="256" Type="integer" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HMAC_DRBG_MAX_INPUT_ENABLE"/>
        <Description>Maximum number of additional input bytes &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 256</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_INPUT" Comment="MBEDTLS_HMAC_DRBG_MAX_INPUT" DefaultValue="256" Type="integer" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="256"/>
        <Description>Maximum number of additional input bytes &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 256</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_REQUEST_ENABLE" Comment="MBEDTLS_HMAC_DRBG_MAX_REQUEST_ENABLE" DefaultValue="0" Type="list" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HMAC_DRBG_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable HMAC_DRBG options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_REQUEST_ENABLE" Comment="MBEDTLS_HMAC_DRBG_MAX_REQUEST_ENABLE" DefaultValue="0" Type="list" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable HMAC_DRBG options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_REQUEST" Comment="MBEDTLS_HMAC_DRBG_MAX_REQUEST" DefaultValue="1024" Type="integer" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HMAC_DRBG_MAX_REQUEST_ENABLE"/>
        <Description>Maximum number of requested bytes per call &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 1024</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_REQUEST" Comment="MBEDTLS_HMAC_DRBG_MAX_REQUEST" DefaultValue="1024" Type="integer" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="1024"/>
        <Description>Maximum number of requested bytes per call &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 1024</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT_ENABLE" Comment="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT_ENABLE" DefaultValue="0" Type="list" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HMAC_DRBG_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable HMAC_DRBG options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT_ENABLE" Comment="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT_ENABLE" DefaultValue="0" Type="list" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable HMAC_DRBG options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_HMAC_DRBG_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT" Comment="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT" DefaultValue="384" Type="integer" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT_ENABLE"/>
        <Description>Maximum size of (re)seed buffer &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 384</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT" Comment="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT" DefaultValue="384" Type="integer" Group="HMAC_DRBG" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="384"/>
        <Description>Maximum size of (re)seed buffer &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 384</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Module configuration options - ECP options -->

    <RefParameter Name="MBEDTLS_ECP_MAX_BITS_ENABLE" Comment="MBEDTLS_ECP_MAX_BITS_ENABLE" DefaultValue="0" Type="list" Group="ECP" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ECP_MAX_BITS options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_MAX_BITS_ENABLE" Comment="MBEDTLS_ECP_MAX_BITS_ENABLE" DefaultValue="Enabled" Type="list" Group="ECP" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ECP_MAX_BITS options configuration &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Enabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_MAX_BITS_ENABLE" Comment="MBEDTLS_ECP_MAX_BITS_ENABLE" DefaultValue="0" Type="list" Group="ECP" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ECP_MAX_BITS options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_MAX_BITS" Comment="MBEDTLS_ECP_MAX_BITS" DefaultValue="521" Type="integer" Group="ECP" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_MAX_BITS_ENABLE &amp; (STM32F7 | STM32H7)"/>
        <Description>Maximum bit size of groups &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 521</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_MAX_BITS" Comment="MBEDTLS_ECP_MAX_BITS" DefaultValue="384" Type="integer" Group="ECP" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_MAX_BITS_ENABLE"/>
        <Description>Maximum bit size of groups &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 384</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_MAX_BITS" Comment="MBEDTLS_ECP_MAX_BITS" DefaultValue="521" Type="integer" Group="ECP" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="521"/>
        <Description>Maximum bit size of groups &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 521</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_WINDOW_SIZE_ENABLE" Comment="MBEDTLS_ECP_WINDOW_SIZE_ENABLE" DefaultValue="0" Type="list" Group="ECP" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ECP_WINDOW_SIZE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_WINDOW_SIZE_ENABLE" Comment="MBEDTLS_ECP_WINDOW_SIZE_ENABLE" DefaultValue="Enabled" Type="list" Group="ECP" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ECP_WINDOW_SIZE options configuration &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Enabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_WINDOW_SIZE_ENABLE" Comment="MBEDTLS_ECP_WINDOW_SIZE_ENABLE" DefaultValue="0" Type="list" Group="ECP" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ECP_WINDOW_SIZE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_WINDOW_SIZE" Comment="MBEDTLS_ECP_WINDOW_SIZE" DefaultValue="6" Type="integer" Group="ECP" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_WINDOW_SIZE_ENABLE &amp; (STM32F7 | STM32H7)"/>
        <Description>Maximum window size used &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 6</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_WINDOW_SIZE" Comment="MBEDTLS_ECP_WINDOW_SIZE" DefaultValue="2" Type="integer" Group="ECP" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_WINDOW_SIZE_ENABLE"/>
        <Description>Maximum window size used &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_WINDOW_SIZE" Comment="MBEDTLS_ECP_WINDOW_SIZE" DefaultValue="6" Type="integer" Group="ECP" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="6"/>
        <Description>Maximum window size used &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 6</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_FIXED_POINT_OPTIM_ENABLE" Comment="MBEDTLS_ECP_FIXED_POINT_OPTIM_ENABLE" DefaultValue="0" Type="list" Group="ECP" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ECP_FIXED_POINT_OPTIM options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_FIXED_POINT_OPTIM_ENABLE" Comment="MBEDTLS_ECP_FIXED_POINT_OPTIM_ENABLE" DefaultValue="Enabled" Type="list" Group="ECP" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ECP_FIXED_POINT_OPTIM options configuration &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Enabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_FIXED_POINT_OPTIM_ENABLE" Comment="MBEDTLS_ECP_FIXED_POINT_OPTIM_ENABLE" DefaultValue="0" Type="list" Group="ECP" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ECP_FIXED_POINT_OPTIM options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ECP_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ECP_FIXED_POINT_OPTIM" Comment="MBEDTLS_ECP_FIXED_POINT_OPTIM" DefaultValue="1" Type="integer" Group="ECP" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_FIXED_POINT_OPTIM_ENABLE &amp; (STM32F7 | STM32H7)"/>
        <Description>Enable fixed-point speed-up &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 1</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_FIXED_POINT_OPTIM" Comment="MBEDTLS_ECP_FIXED_POINT_OPTIM" DefaultValue="0" Type="integer" Group="ECP" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ECP_FIXED_POINT_OPTIM_ENABLE"/>
        <Description>Enable fixed-point speed-up &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 0</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ECP_FIXED_POINT_OPTIM" Comment="MBEDTLS_ECP_FIXED_POINT_OPTIM" DefaultValue="0" Type="integer" Group="ECP" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Enable fixed-point speed-up &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 0</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Module configuration options - Entropy options -->

    <RefParameter Name="MBEDTLS_ENTROPY_MAX_SOURCES_ENABLE" Comment="MBEDTLS_ENTROPY_MAX_SOURCES_ENABLE" DefaultValue="0" Type="list" Group="Entropy" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ENTROPY_C &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ENTROPY_MAX_SOURCES options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_MAX_SOURCES_ENABLE" Comment="MBEDTLS_ENTROPY_MAX_SOURCES_ENABLE" DefaultValue="Enabled" Type="list" Group="Entropy" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ENTROPY_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ENTROPY_MAX_SOURCES options configuration &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Enabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_MAX_SOURCES_ENABLE" Comment="MBEDTLS_ENTROPY_MAX_SOURCES_ENABLE" DefaultValue="0" Type="list" Group="Entropy" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ENTROPY_MAX_SOURCES options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ENTROPY_MAX_SOURCES" Comment="MBEDTLS_ENTROPY_MAX_SOURCES" DefaultValue="20" Type="integer" Group="Entropy" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ENTROPY_MAX_SOURCES_ENABLE &amp; (STM32F7 | STM32H7)"/>
        <Description>Maximum number of sources supported &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 20</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_MAX_SOURCES" Comment="MBEDTLS_ENTROPY_MAX_SOURCES" DefaultValue="2" Type="integer" Group="Entropy" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_ENTROPY_MAX_SOURCES_ENABLE"/>
        <Description>Maximum number of sources supported &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 2</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_MAX_SOURCES" Comment="MBEDTLS_ENTROPY_MAX_SOURCES" DefaultValue="20" Type="integer" Group="Entropy" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="20"/>
        <Description>Maximum number of sources supported &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 20</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ENTROPY_MAX_GATHER_ENABLE" Comment="MBEDTLS_ENTROPY_MAX_GATHER_ENABLE" DefaultValue="0" Type="list" Group="Entropy" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ENTROPY_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ENTROPY_MAX_GATHER options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_MAX_GATHER_ENABLE" Comment="MBEDTLS_ENTROPY_MAX_GATHER_ENABLE" DefaultValue="0" Type="list" Group="Entropy" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ENTROPY_MAX_GATHER options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ENTROPY_MAX_GATHER" Comment="MBEDTLS_ENTROPY_MAX_GATHER" DefaultValue="128" Type="integer" Group="Entropy" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ENTROPY_MAX_GATHER_ENABLE"/>
        <Description>Maximum amount requested from entropy sources &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 128</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_MAX_GATHER" Comment="MBEDTLS_ENTROPY_MAX_GATHER" DefaultValue="128" Type="integer" Group="Entropy" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="128"/>
        <Description>Maximum amount requested from entropy sources &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 128</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ENTROPY_MIN_HARDWARE_ENABLE" Comment="MBEDTLS_ENTROPY_MIN_HARDWARE_ENABLE" DefaultValue="0" Type="list" Group="Entropy" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ENTROPY_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ENTROPY_MIN_HARDWARE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_MIN_HARDWARE_ENABLE" Comment="MBEDTLS_ENTROPY_MIN_HARDWARE_ENABLE" DefaultValue="0" Type="list" Group="Entropy" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_ENTROPY_MIN_HARDWARE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_ENTROPY_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_ENTROPY_MIN_HARDWARE" Comment="MBEDTLS_ENTROPY_MIN_HARDWARE" DefaultValue="32" Type="integer" Group="Entropy" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_ENTROPY_MIN_HARDWARE_ENABLE"/>
        <Description>Default minimum number of bytes required for the hardware entropy source mbedtls_hardware_poll() before entropy is released &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 32</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_ENTROPY_MIN_HARDWARE" Comment="MBEDTLS_ENTROPY_MIN_HARDWARE" DefaultValue="32" Type="integer" Group="Entropy" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="32"/>
        <Description>Default minimum number of bytes required for the hardware entropy source mbedtls_hardware_poll() before entropy is released &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 32</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Module configuration options - Memory buffer allocator options -->

    <RefParameter Name="MBEDTLS_MEMORY_ALIGN_MULTIPLE_ENABLE" Comment="MBEDTLS_MEMORY_ALIGN_MULTIPLE_ENABLE" DefaultValue="0" Type="list" Group="Memory buffer allocator" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MEMORY_BUFFER_ALLOC_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_MEMORY_ALIGN_MULTIPLE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MEMORY_BUFFER_ALLOC_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MEMORY_ALIGN_MULTIPLE_ENABLE" Comment="MBEDTLS_MEMORY_ALIGN_MULTIPLE_ENABLE" DefaultValue="0" Type="list" Group="Memory buffer allocator" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_MEMORY_ALIGN_MULTIPLE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_MEMORY_BUFFER_ALLOC_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_MEMORY_ALIGN_MULTIPLE" Comment="MBEDTLS_MEMORY_ALIGN_MULTIPLE" DefaultValue="4" Type="integer" Group="Memory buffer allocator" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_MEMORY_ALIGN_MULTIPLE_ENABLE"/>
        <Description>Align on multiples of this value &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 4</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_MEMORY_ALIGN_MULTIPLE" Comment="MBEDTLS_MEMORY_ALIGN_MULTIPLE" DefaultValue="4" Type="integer" Group="Memory buffer allocator" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="4"/>
        <Description>Align on multiples of this value &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 4</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Module configuration options - Platform options -->

    <RefParameter Name="MBEDTLS_PLATFORM_STD_MEM_HDR_ENABLE" Comment="MBEDTLS_PLATFORM_STD_MEM_HDR_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp; MBEDTLS_PLATFORM_NO_STD_FUNCTIONS"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_MEM_HDR options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_PLATFORM_NO_STD_FUNCTIONS</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_MEM_HDR_ENABLE" Comment="MBEDTLS_PLATFORM_STD_MEM_HDR_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_MEM_HDR options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_PLATFORM_NO_STD_FUNCTIONS</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_MEM_HDR" Comment="MBEDTLS_PLATFORM_STD_MEM_HDR" DefaultValue="&lt;stdlib.h&gt;" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_MEM_HDR_ENABLE"/>
        <Description>Header to include if MBEDTLS_PLATFORM_NO_STD_FUNCTIONS is defined. Don't define if no header is needed. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; stdlib.h</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_MEM_HDR" Comment="MBEDTLS_PLATFORM_STD_MEM_HDR" DefaultValue="&lt;stdlib.h&gt;" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="&lt;stdlib.h&gt;"/>
        <Description>Header to include if MBEDTLS_PLATFORM_NO_STD_FUNCTIONS is defined. Don't define if no header is needed. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; stdlib.h</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_CALLOC_ENABLE" Comment="MBEDTLS_PLATFORM_STD_CALLOC_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_CALLOC options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_CALLOC_ENABLE" Comment="MBEDTLS_PLATFORM_STD_CALLOC_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_CALLOC options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_CALLOC" Comment="MBEDTLS_PLATFORM_STD_CALLOC" DefaultValue="calloc" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_CALLOC_ENABLE"/>
        <Description>Default allocator to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; calloc</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_CALLOC" Comment="MBEDTLS_PLATFORM_STD_CALLOC" DefaultValue="calloc" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="calloc"/>
        <Description>Default allocator to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; calloc</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_FREE_ENABLE" Comment="MBEDTLS_PLATFORM_STD_FREE_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_FREE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_FREE_ENABLE" Comment="MBEDTLS_PLATFORM_STD_FREE_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_FREE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_FREE" Comment="MBEDTLS_PLATFORM_STD_FREE" DefaultValue="free" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_FREE_ENABLE"/>
        <Description>Default free to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; free</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_FREE" Comment="MBEDTLS_PLATFORM_STD_FREE" DefaultValue="free" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="free"/>
        <Description>Default free to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; free</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT_ENABLE" Comment="MBEDTLS_PLATFORM_STD_EXIT_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_EXIT options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT_ENABLE" Comment="MBEDTLS_PLATFORM_STD_EXIT_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_EXIT options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT" Comment="MBEDTLS_PLATFORM_STD_EXIT" DefaultValue="exit" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_EXIT_ENABLE"/>
        <Description>Default exit to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; exit</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT" Comment="MBEDTLS_PLATFORM_STD_EXIT" DefaultValue="exit" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="exit"/>
        <Description>Default exit to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; exit</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_TIME_ENABLE" Comment="MBEDTLS_PLATFORM_STD_TIME_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp;MBEDTLS_HAVE_TIME"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_TIME options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp;MBEDTLS_HAVE_TIME</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_TIME_ENABLE" Comment="MBEDTLS_PLATFORM_STD_TIME_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_TIME options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp;MBEDTLS_HAVE_TIME</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_TIME" Comment="MBEDTLS_PLATFORM_STD_TIME" DefaultValue="time" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_TIME_ENABLE"/>
        <Description>Default time to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; time</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_TIME" Comment="MBEDTLS_PLATFORM_STD_TIME" DefaultValue="time" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="time"/>
        <Description>Default time to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; time</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_FPRINTF_ENABLE" Comment="MBEDTLS_PLATFORM_STD_FPRINTF_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_FPRINTF options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_FPRINTF_ENABLE" Comment="MBEDTLS_PLATFORM_STD_FPRINTF_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_FPRINTF options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_FPRINTF" Comment="MBEDTLS_PLATFORM_STD_FPRINTF" DefaultValue="fprintf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_FPRINTF_ENABLE"/>
        <Description>Default fprintf to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; fprintf</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_FPRINTF" Comment="MBEDTLS_PLATFORM_STD_FPRINTF" DefaultValue="fprintf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="fprintf"/>
        <Description>Default fprintf to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; fprintf</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_PRINTF_ENABLE" Comment="MBEDTLS_PLATFORM_STD_PRINTF_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_PRINTF options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_PRINTF_ENABLE" Comment="MBEDTLS_PLATFORM_STD_PRINTF_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_PRINTF options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_PRINTF" Comment="MBEDTLS_PLATFORM_STD_PRINTF" DefaultValue="printf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_PRINTF_ENABLE"/>
        <Description>Default printf to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; printf</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_PRINTF" Comment="MBEDTLS_PLATFORM_STD_PRINTF" DefaultValue="printf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="printf"/>
        <Description>Default printf to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; printf</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_SNPRINTF_ENABLE" Comment="MBEDTLS_PLATFORM_STD_SNPRINTF_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_SNPRINTF options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_SNPRINTF_ENABLE" Comment="MBEDTLS_PLATFORM_STD_SNPRINTF_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_SNPRINTF options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_SNPRINTF" Comment="MBEDTLS_PLATFORM_STD_SNPRINTF" DefaultValue="snprintf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_SNPRINTF_ENABLE"/>
        <Description>Default snprintf to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; snprintf</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_SNPRINTF" Comment="MBEDTLS_PLATFORM_STD_SNPRINTF" DefaultValue="snprintf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="snprintf"/>
        <Description>Default snprintf to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; snprintf</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS_ENABLE" Comment="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_EXIT_SUCCESS options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS_ENABLE" Comment="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_EXIT_SUCCESS options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS" Comment="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS" DefaultValue="0" Type="integer" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS_ENABLE"/>
        <Description>Default exit value to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 0</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS" Comment="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS" DefaultValue="0" Type="integer" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Default exit value to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 0)</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT_FAILURE_ENABLE" Comment="MBEDTLS_PLATFORM_STD_EXIT_FAILURE_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_EXIT_FAILURE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT_FAILURE_ENABLE" Comment="MBEDTLS_PLATFORM_STD_EXIT_FAILURE_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_EXIT_FAILURE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT_FAILURE" Comment="MBEDTLS_PLATFORM_STD_EXIT_FAILURE" DefaultValue="0" Type="integer" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_EXIT_FAILURE_ENABLE"/>
        <Description>Default exit value to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 0</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_EXIT_FAILURE" Comment="MBEDTLS_PLATFORM_STD_EXIT_FAILURE" DefaultValue="0" Type="integer" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description>Default exit value to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 0</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_READ_ENABLE" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_READ_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_NV_SEED_READ options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_READ_ENABLE" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_READ_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_NV_SEED_READ options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_READ" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_READ" DefaultValue="mbedtls_platform_std_nv_seed_read" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_NV_SEED_READ_ENABLE"/>
        <Description>Default nv_seed_read function to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; mbedtls_platform_std_nv_seed_read</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_READ" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_READ" DefaultValue="mbedtls_platform_std_nv_seed_read" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="mbedtls_platform_std_nv_seed_read"/>
        <Description>Default nv_seed_read function to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; mbedtls_platform_std_nv_seed_read</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE_ENABLE" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_NV_SEED_WRITE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE_ENABLE" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_NV_SEED_WRITE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE" DefaultValue="mbedtls_platform_std_nv_seed_write" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE_ENABLE"/>
        <Description>Default nv_seed_write function to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; mbedtls_platform_std_nv_seed_write</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE" DefaultValue="mbedtls_platform_std_nv_seed_write" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="mbedtls_platform_std_nv_seed_write"/>
        <Description>Default nv_seed_write function to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; mbedtls_platform_std_nv_seed_write</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_FILE_ENABLE" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_FILE_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_NV_SEED_FILE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_FILE_ENABLE" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_FILE_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_STD_NV_SEED_FILE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_FILE" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_FILE" DefaultValue="seedfile" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_STD_NV_SEED_FILE_ENABLE"/>
        <Description>Seed file to read/write with default implementation &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; seedfile</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_FILE" Comment="MBEDTLS_PLATFORM_STD_NV_SEED_FILE" DefaultValue="seedfile" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="seedfile"/>
        <Description>Seed file to read/write with default implementation &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; seedfile</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_CALLOC_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_CALLOC_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_CALLOC_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_CALLOC_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_CALLOC_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_CALLOC_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_CALLOC_MACRO" Comment="MBEDTLS_PLATFORM_CALLOC_MACRO" DefaultValue="calloc" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_CALLOC_MACRO_ENABLE"/>
        <Description>Default allocator macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; calloc</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_CALLOC_MACRO" Comment="MBEDTLS_PLATFORM_CALLOC_MACRO" DefaultValue="calloc" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="calloc"/>
        <Description>Default allocator macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; calloc</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_FREE_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_FREE_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_FREE_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_FREE_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_FREE_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_FREE_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_FREE_MACRO" Comment="MBEDTLS_PLATFORM_FREE_MACRO" DefaultValue="free" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_FREE_MACRO_ENABLE"/>
        <Description>Default free macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; free</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_FREE_MACRO" Comment="MBEDTLS_PLATFORM_FREE_MACRO" DefaultValue="free" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="free"/>
        <Description>Default free macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; free</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_EXIT_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_EXIT_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp; !MBEDTLS_PLATFORM_EXIT_ALT"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_EXIT_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; !MBEDTLS_PLATFORM_EXIT_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_EXIT_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_EXIT_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_EXIT_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; !MBEDTLS_PLATFORM_EXIT_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_EXIT_MACRO" Comment="MBEDTLS_PLATFORM_EXIT_MACRO" DefaultValue="exit" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_EXIT_MACRO_ENABLE"/>
        <Description>Default exit macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; exit</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_EXIT_MACRO" Comment="MBEDTLS_PLATFORM_EXIT_MACRO" DefaultValue="exit" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="exit"/>
        <Description>Default exit macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; exit</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_TIME_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_TIME_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_TIME_ALT"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_TIME_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_TIME_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_TIME_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_TIME_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_TIME_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_TIME_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_TIME_MACRO" Comment="MBEDTLS_PLATFORM_TIME_MACRO" DefaultValue="time" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_TIME_MACRO_ENABLE"/>
        <Description>Default time macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; time</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_TIME_MACRO" Comment="MBEDTLS_PLATFORM_TIME_MACRO" DefaultValue="time" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="time"/>
        <Description>Default time macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; time</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_TIME_TYPE_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_TIME_TYPE_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_TIME_TYPE_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_TIME_TYPE_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_TIME_TYPE_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_TIME_TYPE_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_TIME_TYPE_MACRO" Comment="MBEDTLS_PLATFORM_TIME_TYPE_MACRO" DefaultValue="time_t" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_TIME_TYPE_MACRO_ENABLE"/>
        <Description>Default time macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; time_t</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_TIME_TYPE_MACRO" Comment="MBEDTLS_PLATFORM_TIME_TYPE_MACRO" DefaultValue="time_t" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="time_t"/>
        <Description>Default time macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; time_t</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_FPRINTF_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_FPRINTF_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_FPRINTF_ALT"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_FPRINTF_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_FPRINTF_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_FPRINTF_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_FPRINTF_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_FPRINTF_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_FPRINTF_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_FPRINTF_MACRO" Comment="MBEDTLS_PLATFORM_FPRINTF_MACRO" DefaultValue="fprintf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_FPRINTF_MACRO_ENABLE"/>
        <Description>Default fprintf macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; fprintf</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_FPRINTF_MACRO" Comment="MBEDTLS_PLATFORM_FPRINTF_MACRO" DefaultValue="fprintf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="fprintf"/>
        <Description>Default fprintf macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; fprintf</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_PRINTF_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_PRINTF_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_PRINTF_ALT &amp; (STM32F7 | STM32H7)"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_PRINTF_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_PRINTF_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_PRINTF_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_PRINTF_MACRO_ENABLE" DefaultValue="Enabled" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_PRINTF_ALT"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_PRINTF_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Enabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_PRINTF_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_PRINTF_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_PRINTF_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_PRINTF_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp;!MBEDTLS_PLATFORM_PRINTF_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_PRINTF_MACRO" Comment="MBEDTLS_PLATFORM_PRINTF_MACRO" DefaultValue="printf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_PRINTF_MACRO_ENABLE &amp; (STM32F7 | STM32H7)"/>
        <Description>Default printf macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; printf</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_PRINTF_MACRO" Comment="MBEDTLS_PLATFORM_PRINTF_MACRO" DefaultValue="printf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_PRINTF_MACRO_ENABLE"/>
        <Description>Default printf macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; printf</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_PRINTF_MACRO" Comment="MBEDTLS_PLATFORM_PRINTF_MACRO" DefaultValue="printf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="printf"/>
        <Description>Default printf macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; printf</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_SNPRINTF_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_SNPRINTF_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_SNPRINTF_ALT"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_SNPRINTF_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_SNPRINTF_ALT</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_SNPRINTF_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_SNPRINTF_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_SNPRINTF_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C &amp; MBEDTLS_HAVE_TIME &amp; !MBEDTLS_PLATFORM_SNPRINTF_ALT</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_SNPRINTF_MACRO" Comment="MBEDTLS_PLATFORM_SNPRINTF_MACRO" DefaultValue="snprintf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_SNPRINTF_MACRO_ENABLE"/>
        <Description>Default snprintf macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; snprintf</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_SNPRINTF_MACRO" Comment="MBEDTLS_PLATFORM_SNPRINTF_MACRO" DefaultValue="snprintf" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="snprintf"/>
        <Description>Default snprintf macro to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; snprintf</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_NV_SEED_READ_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_NV_SEED_READ_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO" Comment="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO" DefaultValue="mbedtls_platform_std_nv_seed_read" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO_ENABLE"/>
        <Description>Default nv_seed_read function to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; mbedtls_platform_std_nv_seed_read</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO" Comment="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO" DefaultValue="mbedtls_platform_std_nv_seed_read" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="mbedtls_platform_std_nv_seed_read"/>
        <Description>Default nv_seed_read function to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; mbedtls_platform_std_nv_seed_read</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO_ENABLE" Comment="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO_ENABLE" DefaultValue="0" Type="list" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_PLATFORM_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO" Comment="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO" DefaultValue="mbedtls_platform_std_nv_seed_write" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO_ENABLE"/>
        <Description>Default nv_seed_write function to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; mbedtls_platform_std_nv_seed_write</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO" Comment="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO" DefaultValue="mbedtls_platform_std_nv_seed_write" Type="StringRW" Group="Platform" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="mbedtls_platform_std_nv_seed_write"/>
        <Description>Default nv_seed_write function to use, can be undefined &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; mbedtls_platform_std_nv_seed_write</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Module configuration options - SSL Cache options -->

    <RefParameter Name="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT_ENABLE" Comment="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT_ENABLE" DefaultValue="0" Type="list" Group="SSL Cache" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_CACHE_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_CACHE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT_ENABLE" Comment="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT_ENABLE" DefaultValue="0" Type="list" Group="SSL Cache" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_CACHE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT" Comment="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT" DefaultValue="86400" Type="integer" Group="SSL Cache" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT_ENABLE"/>
        <Description>1 day &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 86400</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT" Comment="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT" DefaultValue="86400" Type="integer" Group="SSL Cache" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="86400"/>
        <Description>1 day &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 86400</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES_ENABLE" Comment="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES_ENABLE" DefaultValue="0" Type="list" Group="SSL Cache" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_CACHE_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_CACHE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES_ENABLE" Comment="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES_ENABLE" DefaultValue="0" Type="list" Group="SSL Cache" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_SSL_CACHE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES" Comment="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES" DefaultValue="50" Type="integer" Group="SSL Cache" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES_ENABLE"/>
        <Description>Maximum entries in cache &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 50</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES" Comment="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES" DefaultValue="50" Type="integer" Group="SSL Cache" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="50"/>
        <Description>Maximum entries in cache &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 50</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Module configuration options - SSL options -->

    <RefParameter Name="MBEDTLS_SSL_MAX_CONTENT_LEN_ENABLE" Comment="MBEDTLS_SSL_MAX_CONTENT_LEN_ENABLE" DefaultValue="0" Type="list" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_SSL_MAX_CONTENT_LEN options configuration &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Disabled</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_MAX_CONTENT_LEN_ENABLE" Comment="MBEDTLS_SSL_MAX_CONTENT_LEN_ENABLE" DefaultValue="Enabled" Type="list" Group="SSL" TabName="Modules Configuration" Mode="Basic">
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_SSL_MAX_CONTENT_LEN options configuration &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; Enabled</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_MAX_CONTENT_LEN" Comment="MBEDTLS_SSL_MAX_CONTENT_LEN" DefaultValue="4*1024" Type="integer" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_MAX_CONTENT_LEN_ENABLE &amp; (STM32F7 | STM32H7)"/>
        <Description>Maxium fragment length in bytes, determines the size of each of the two internal I/O buffers &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 16*1024</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_MAX_CONTENT_LEN" Comment="MBEDTLS_SSL_MAX_CONTENT_LEN" DefaultValue="2048" Type="integer" Group="SSL" TabName="Modules Configuration" Mode="Basic">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_MAX_CONTENT_LEN_ENABLE"/>
        <Description>Maxium fragment length in bytes, determines the size of each of the two internal I/O buffers &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 2048</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_MAX_CONTENT_LEN" Comment="MBEDTLS_SSL_MAX_CONTENT_LEN" DefaultValue="16384" Type="integer" Group="SSL" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="16384"/>
        <Description>Maxium fragment length in bytes, determines the size of each of the two internal I/O buffers &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 16384</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME_ENABLE" Comment="MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME_ENABLE" DefaultValue="0" Type="list" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME" Comment="MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME" DefaultValue="86400" Type="integer" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME_ENABLE"/>
        <Description>Lifetime of session tickets (if enabled) &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 86400</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME" Comment="MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME" DefaultValue="86400" Type="integer" Group="SSL" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="86400"/>
        <Description>Lifetime of session tickets (if enabled) &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 86400</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PSK_MAX_LEN_ENABLE" Comment="MBEDTLS_PSK_MAX_LEN_ENABLE" DefaultValue="0" Type="list" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_PSK_MAX_LEN options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PSK_MAX_LEN" Comment="MBEDTLS_PSK_MAX_LEN" DefaultValue="32" Type="integer" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_PSK_MAX_LEN_ENABLE"/>
        <Description>Max size of TLS pre-shared keys, in bytes (default 256 bits) &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 32</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_PSK_MAX_LEN" Comment="MBEDTLS_PSK_MAX_LEN" DefaultValue="32" Type="integer" Group="SSL" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="32"/>
        <Description>Max size of TLS pre-shared keys, in bytes (default 256 bits) &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 32</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_COOKIE_TIMEOUT_ENABLE" Comment="MBEDTLS_SSL_COOKIE_TIMEOUT_ENABLE" DefaultValue="0" Type="list" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_SSL_COOKIE_TIMEOUT options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_COOKIE_TIMEOUT" Comment="MBEDTLS_SSL_COOKIE_TIMEOUT" DefaultValue="60" Type="integer" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_COOKIE_TIMEOUT_ENABLE"/>
        <Description>Default expiration delay of DTLS cookies, in seconds if HAVE_TIME, or in number of cookies issued &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 60</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_COOKIE_TIMEOUT" Comment="MBEDTLS_SSL_COOKIE_TIMEOUT" DefaultValue="60" Type="integer" Group="SSL" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="60"/>
        <Description>Default expiration delay of DTLS cookies, in seconds if HAVE_TIME, or in number of cookies issued &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 60</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Complete list of ciphersuites to use, in order of preference -->

    <RefParameter Name="MBEDTLS_SSL_CIPHERSUITES_ENABLE" Comment="MBEDTLS_SSL_CIPHERSUITES_ENABLE" DefaultValue="0" Type="list" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="STM32F7 | STM32H7"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_SSL_CIPHERSUITES options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_CIPHERSUITES_ENABLE" Comment="MBEDTLS_SSL_CIPHERSUITES_ENABLE" DefaultValue="Enabled" Type="list" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_SSL_CIPHERSUITES options configuration&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_SSL_CIPHERSUITES" Comment="MBEDTLS_SSL_CIPHERSUITES" DefaultValue="MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256" Type="StringRW" Group="SSL" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_SSL_CIPHERSUITES_ENABLE"/>
        <Description>No dependency checking is done on that field! This option can only be used to restrict the set of available ciphersuites. It is your responsibility to make sure the needed modules are active. Use this to save a few hundred bytes of ROM (default ordering of all available ciphersuites) and a few to a few hundred bytes of RAM. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_SSL_CIPHERSUITES" Comment="MBEDTLS_SSL_CIPHERSUITES" DefaultValue="MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256" Type="StringRW" Group="SSL" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <Description>No dependency checking is done on that field! This option can only be used to restrict the set of available ciphersuites. It is your responsibility to make sure the needed modules are active. Use this to save a few hundred bytes of ROM (default ordering of all available ciphersuites) and a few to a few hundred bytes of RAM. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - X509 options -->

    <RefParameter Name="MBEDTLS_X509_MAX_INTERMEDIATE_CA_ENABLE" Comment="MBEDTLS_X509_MAX_INTERMEDIATE_CA_ENABLE" DefaultValue="0" Type="list" Group="X509" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_USE_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_X509_MAX_INTERMEDIATE_CA options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_MAX_INTERMEDIATE_CA_ENABLE" Comment="MBEDTLS_X509_MAX_INTERMEDIATE_CA_ENABLE" DefaultValue="0" Type="list" Group="X509" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_X509_MAX_INTERMEDIATE_CA options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_MAX_INTERMEDIATE_CA" Comment="MBEDTLS_X509_MAX_INTERMEDIATE_CA" DefaultValue="8" Type="integer" Group="X509" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_MAX_INTERMEDIATE_CA_ENABLE"/>
        <Description>Maximum number of intermediate CAs in a verification chain. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 8</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_MAX_INTERMEDIATE_CA" Comment="MBEDTLS_X509_MAX_INTERMEDIATE_CA" DefaultValue="8" Type="integer" Group="X509" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="8"/>
        <Description>Maximum number of intermediate CAs in a verification chain. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 8</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_MAX_FILE_PATH_LEN_ENABLE" Comment="MBEDTLS_X509_MAX_FILE_PATH_LEN_ENABLE" DefaultValue="0" Type="list" Group="X509" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_USE_C"/>
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_X509_MAX_FILE_PATH_LEN options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_MAX_FILE_PATH_LEN_ENABLE" Comment="MBEDTLS_X509_MAX_FILE_PATH_LEN_ENABLE" DefaultValue="0" Type="list" Group="X509" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable MBEDTLS_X509_MAX_FILE_PATH_LEN options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;&lt;b&gt;Require:&lt;/b&gt; MBEDTLS_X509_USE_C</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_X509_MAX_FILE_PATH_LEN" Comment="MBEDTLS_X509_MAX_FILE_PATH_LEN" DefaultValue="512" Type="integer" Group="X509" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="MBEDTLS_X509_MAX_FILE_PATH_LEN_ENABLE"/>
        <Description>Maximum length of a path/filename string in bytes including the null terminator character ('\0'). &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 512</Description>
    </RefParameter>
    <RefParameter Name="MBEDTLS_X509_MAX_FILE_PATH_LEN" Comment="MBEDTLS_X509_MAX_FILE_PATH_LEN" DefaultValue="512" Type="integer" Group="X509" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <PossibleValue Comment="Disabled" Value="512"/>
        <Description>Maximum length of a path/filename string in bytes including the null terminator character ('\0'). &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; 512</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Allow SHA-1 in the default TLS configuration for certificate signing. -->
    <RefParameter Name="MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_CERTIFICATES" Comment="MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_CERTIFICATES" DefaultValue="0" Type="list" Group="SHA1" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Allow SHA-1 in the default TLS configuration for certificate signing.&lt;br&gt;Without this build-time option, SHA-1 support must be activated explicitly through mbedtls_ssl_conf_cert_profile. Turning on this option is not recommended because of it is possible to generate SHA-1 collisions, however this may be safe for legacy infrastructure where additional controls apply.&lt;br&gt;\warning   SHA-1 is considered a weak message digest and its use constitutes a security risk. If possible, we recommend avoiding dependencies on it, and considering stronger message digests instead.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Allow SHA-1 in the default TLS configuration for TLS 1.2 handshake signature and ciphersuite selection. -->

    <RefParameter Name="MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE" Comment="MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE" DefaultValue="0" Type="list" Group="SHA1" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Allow SHA-1 in the default TLS configuration for TLS 1.2 handshake signature and ciphersuite selection. Without this build-time option, SHA-1 support must be activated explicitly through mbedtls_ssl_conf_sig_hashes. The use of SHA-1 in TLS version 1.1 or below and in HMAC-SHA-1 is always allowed by default. At the time of writing, there is no practical attack on the use of SHA-1 in handshake signatures, hence this option is turned on by default for compatibility with existing peers.&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;</Description>
    </RefParameter>

    <RefParameter Name="MBEDTLS_PLATFORM_ZEROIZE_ALT" Comment="MBEDTLS_PLATFORM_ZEROIZE_ALT" DefaultValue="0" Type="list" Group="Platform" TabName="Alternate implementation" Mode="Advanced">
        <PossibleValue Comment="Defined" Value="1"/>
        <PossibleValue Comment="Not Defined" Value="0"/>
        <Description> * Uncomment the macro to let mbed TLS use your alternate implementation of &lt;br&gt; mbedtls_platform_zeroize(). This replaces the default implementation in platform_util.c. &lt;br&gt;&lt;br&gt;mbedtls_platform_zeroize() is a widely used function across the library to zero a block of memory. The implementation is expected to be secure in the sense that it has been written to prevent the compiler from removing calls to mbedtls_platform_zeroize() as part of redundant code elimination optimizations. However, it is difficult to guarantee that calls to mbedtls_platform_zeroize() will not be optimized by the compiler as older versions of the C language standards do not provide a secure implementation of memset(). Therefore, MBEDTLS_PLATFORM_ZEROIZE_ALT enables users to configure their own implementation of mbedtls_platform_zeroize(), for example by using directives specific to their compiler, features from newer C standards (e.g using memset_s() in C11) or calling a secure memset() from their system (e.g explicit_bzero() in BSD).&lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled&lt;br&gt;</Description>
    </RefParameter>

    <!-- RefParameters for MBEDTLS - Target and application specific configurations -->

    <RefParameter Name="YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE_ENABLE" Comment="YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE_ENABLE" DefaultValue="0" Type="list" Group="Target and application specific configurations" TabName="Modules Configuration" Mode="Advanced">
        <PossibleValue Comment="Enabled" Value="1"/>
        <PossibleValue Comment="Disabled" Value="0"/>
        <Description>Enable YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE options configuration &lt;br&gt;&lt;b&gt;Default value: &lt;/b&gt;Disabled</Description>
    </RefParameter>

    <RefParameter Name="YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE" Comment="YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE" DefaultValue="mbedtls/target_config.h" Type="StringRW" Group="Target and application specific configurations" TabName="Modules Configuration" Mode="Advanced">
        <Condition Diagnostic="" Expression="YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE_ENABLE"/>
        <Description>Target and application specific configurations &lt;br&gt; Allow user to override any previous default. &lt;br&gt; Use two macro names for that, as: &lt;br&gt; - with yotta the prefix YOTTA_CFG_ is forced &lt;br&gt; - without yotta is looks weird to have a YOTTA prefix. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; mbedtls/target_config.h</Description>
    </RefParameter>
    <RefParameter Name="YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE" Comment="YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE" DefaultValue="mbedtls/target_config.h" Type="StringRW" Group="Target and application specific configurations" TabName="Modules Configuration" Mode="Advanced" Visible="false">
        <Description>Target and application specific configurations &lt;br&gt; Allow user to override any previous default. &lt;br&gt; Use two macro names for that, as: &lt;br&gt; - with yotta the prefix YOTTA_CFG_ is forced &lt;br&gt; - without yotta is looks weird to have a YOTTA prefix. &lt;br&gt;&lt;b&gt;Default value:&lt;/b&gt; mbedtls/target_config.h</Description>
    </RefParameter>
    
	<!-- Basemode for MBEDTLS -->

	<RefMode Name="Enabled" Comment="MBEDTLS parameters" Abstract="true">
		<ConfigForMode>MBEDTLS_ENABLE_Init</ConfigForMode>
		<!-- Parameters for MBEDTLS - Version-->
		<Parameter Name="MBEDTLS_version"/>
        <Parameter Name="MBEDTLS_TCP_IP"/>
        <Parameter Name="MBEDTLS_RNG_IP"/>
		<!-- Parameters for MBEDTLS - MBEDTLS modes-->
		<Parameter Name="MBEDTLS_SSL_CLI_C"/>
		<Parameter Name="MBEDTLS_SSL_SRV_C"/>
		<!-- Parameters for MBEDTLS - Feature support-->
        <!-- Parameters for MBEDTLS - Feature support - System support -->
        <Parameter Name="MBEDTLS_HAVE_ASM"/>
        <Parameter Name="MBEDTLS_NO_UDBL_DIVISION"/>
        <Parameter Name="MBEDTLS_HAVE_SSE2"/>
        <Parameter Name="MBEDTLS_HAVE_TIME"/>
        <Parameter Name="MBEDTLS_HAVE_TIME_DATE"/>
        <Parameter Name="MBEDTLS_PLATFORM_MEMORY"/>
        <Parameter Name="MBEDTLS_PLATFORM_NO_STD_FUNCTIONS"/>
        <Parameter Name="MBEDTLS_DEPRECATED_WARNING"/>
        <Parameter Name="MBEDTLS_DEPRECATED_REMOVED"/>
        <!-- Parameters for MBEDTLS - Feature support - General -->
        <Parameter Name="MBEDTLS_TEST_NULL_ENTROPY"/>
        <Parameter Name="MBEDTLS_AES_ROM_TABLES"/>
        <Parameter Name="MBEDTLS_AES_FEWER_TABLES"/>
        <Parameter Name="MBEDTLS_CAMELLIA_SMALL_MEMORY"/>
        <Parameter Name="MBEDTLS_ECP_NIST_OPTIM"/>
        <Parameter Name="MBEDTLS_ECDSA_DETERMINISTIC"/>
        <Parameter Name="MBEDTLS_PK_PARSE_EC_EXTENDED"/>
        <Parameter Name="MBEDTLS_ERROR_STRERROR_DUMMY"/>
        <Parameter Name="MBEDTLS_GENPRIME"/>
        <Parameter Name="MBEDTLS_FS_IO"/>
        <Parameter Name="MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES"/>
        <Parameter Name="MBEDTLS_NO_PLATFORM_ENTROPY"/>
        <Parameter Name="MBEDTLS_ENTROPY_FORCE_SHA256"/>
        <Parameter Name="MBEDTLS_ENTROPY_NV_SEED"/>
        <Parameter Name="MBEDTLS_MEMORY_DEBUG"/>
        <Parameter Name="MBEDTLS_MEMORY_BACKTRACE"/>
        <Parameter Name="MBEDTLS_PK_RSA_ALT_SUPPORT"/>
        <Parameter Name="MBEDTLS_PKCS1_V15"/>
        <Parameter Name="MBEDTLS_PKCS1_V21"/>
        <Parameter Name="MBEDTLS_RSA_NO_CRT"/>
        <Parameter Name="MBEDTLS_SELF_TEST"/>
        <Parameter Name="MBEDTLS_SHA256_SMALLER"/>
        <Parameter Name="MBEDTLS_THREADING_ALT"/>
        <Parameter Name="MBEDTLS_THREADING_PTHREAD"/>
        <Parameter Name="MBEDTLS_VERSION_FEATURES"/>
        <Parameter Name="MBEDTLS_ZLIB_SUPPORT"/>
        <!-- Parameters for MBEDTLS - Feature support - Ciphering -->
        <Parameter Name="MBEDTLS_CIPHER_MODE_CBC"/>
        <Parameter Name="MBEDTLS_CIPHER_MODE_CFB"/>
        <Parameter Name="MBEDTLS_CIPHER_MODE_CTR"/>
        <Parameter Name="MBEDTLS_CIPHER_MODE_OFB"/>
        <Parameter Name="MBEDTLS_CIPHER_MODE_XTS"/>
        <Parameter Name="MBEDTLS_CIPHER_NULL_CIPHER"/>
        <Parameter Name="MBEDTLS_CIPHER_PADDING_PKCS7"/>
        <Parameter Name="MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS"/>
        <Parameter Name="MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN"/>
        <Parameter Name="MBEDTLS_CIPHER_PADDING_ZEROS"/>
        <Parameter Name="MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS"/>
        <Parameter Name="MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN"/>
        <Parameter Name="MBEDTLS_CIPHER_PADDING_ZEROS"/>
        <Parameter Name="MBEDTLS_ENABLE_WEAK_CIPHERSUITES"/>
        <Parameter Name="MBEDTLS_REMOVE_ARC4_CIPHERSUITES"/>
        <!-- Parameters for MBEDTLS - Feature support - Elliptic curves -->
        <Parameter Name="MBEDTLS_ECP_DP_SECP192R1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_SECP224R1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_SECP256R1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_SECP384R1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_SECP521R1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_SECP192K1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_SECP224K1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_SECP256K1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_BP256R1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_BP384R1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_BP512R1_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_CURVE25519_ENABLED"/>
        <Parameter Name="MBEDTLS_ECP_DP_CURVE448_ENABLED"/>
        <!-- Parameters for MBEDTLS - Feature support - Key exchange -->
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_PSK_ENABLED"/>
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED"/>
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED"/>
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED"/>
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_RSA_ENABLED"/>
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED"/>
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED"/>
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED"/>
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED"/>
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED"/>
        <Parameter Name="MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED"/>
        <!-- Parameters for MBEDTLS - Feature support - SSL -->
        <Parameter Name="MBEDTLS_SSL_ALL_ALERT_MESSAGES"/>
        <Parameter Name="MBEDTLS_SSL_ASYNC_PRIVATE"/>
        <Parameter Name="MBEDTLS_SSL_DEBUG_ALL"/>
        <Parameter Name="MBEDTLS_SSL_ENCRYPT_THEN_MAC"/>
        <Parameter Name="MBEDTLS_SSL_EXTENDED_MASTER_SECRET"/>
        <Parameter Name="MBEDTLS_SSL_FALLBACK_SCSV"/>
        <Parameter Name="MBEDTLS_SSL_HW_RECORD_ACCEL"/>
        <Parameter Name="MBEDTLS_SSL_CBC_RECORD_SPLITTING"/>
        <Parameter Name="MBEDTLS_SSL_RENEGOTIATION"/>
        <Parameter Name="MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO"/>
        <Parameter Name="MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE"/>
        <Parameter Name="MBEDTLS_SSL_MAX_FRAGMENT_LENGTH"/>
        <Parameter Name="MBEDTLS_SSL_PROTO_SSL3"/>
        <Parameter Name="MBEDTLS_SSL_PROTO_TLS1"/>
        <Parameter Name="MBEDTLS_SSL_PROTO_TLS1_1"/>
        <Parameter Name="MBEDTLS_SSL_PROTO_TLS1_2"/>
        <Parameter Name="MBEDTLS_SSL_PROTO_DTLS"/>
        <Parameter Name="MBEDTLS_SSL_ALPN"/>
        <Parameter Name="MBEDTLS_SSL_DTLS_ANTI_REPLAY"/>
        <Parameter Name="MBEDTLS_SSL_DTLS_HELLO_VERIFY"/>
        <Parameter Name="MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE"/>
        <Parameter Name="MBEDTLS_SSL_DTLS_BADMAC_LIMIT"/>
        <Parameter Name="MBEDTLS_SSL_SESSION_TICKETS"/>
        <Parameter Name="MBEDTLS_SSL_EXPORT_KEYS"/>
        <Parameter Name="MBEDTLS_SSL_SERVER_NAME_INDICATION"/>
        <Parameter Name="MBEDTLS_SSL_TRUNCATED_HMAC"/>
        <Parameter Name="MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT"/>
        <!-- Parameters for MBEDTLS - Feature support - X509 -->
        <Parameter Name="MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3"/>
        <Parameter Name="MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION"/>
        <Parameter Name="MBEDTLS_X509_CHECK_KEY_USAGE"/>
        <Parameter Name="MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE"/>
        <Parameter Name="MBEDTLS_X509_RSASSA_PSS_SUPPORT"/>
        <!-- Parameters for MBEDTLS - Alternate implementations -->
        <!-- Parameters for MBEDTLS - Alternate module implementations -->
        <Parameter Name="MBEDTLS_AES_ALT"/>
        <Parameter Name="MBEDTLS_ARC4_ALT"/>
        <Parameter Name="MBEDTLS_ARIA_ALT"/>
        <Parameter Name="MBEDTLS_BLOWFISH_ALT"/>
        <Parameter Name="MBEDTLS_CAMELLIA_ALT"/>
        <Parameter Name="MBEDTLS_CCM_ALT"/>
        <Parameter Name="MBEDTLS_CMAC_ALT"/>
        <Parameter Name="MBEDTLS_DES_ALT"/>
        <Parameter Name="MBEDTLS_DHM_ALT"/>
        <Parameter Name="MBEDTLS_ECJPAKE_ALT"/>
        <Parameter Name="MBEDTLS_GCM_ALT"/>
        <Parameter Name="MBEDTLS_MD2_ALT"/>
        <Parameter Name="MBEDTLS_MD4_ALT"/>
        <Parameter Name="MBEDTLS_MD5_ALT"/>
        <Parameter Name="MBEDTLS_RIPEMD160_ALT"/>
        <Parameter Name="MBEDTLS_RSA_ALT"/>
        <Parameter Name="MBEDTLS_SHA1_ALT"/>
        <Parameter Name="MBEDTLS_SHA256_ALT"/>
        <Parameter Name="MBEDTLS_SHA512_ALT"/>
        <Parameter Name="MBEDTLS_XTEA_ALT"/>
        <Parameter Name="MBEDTLS_ECP_ALT"/>
        <!-- Parameters for MBEDTLS - Alternate function implementations -->
        <Parameter Name="MBEDTLS_MD2_PROCESS_ALT"/>
        <Parameter Name="MBEDTLS_MD4_PROCESS_ALT"/>
        <Parameter Name="MBEDTLS_MD5_PROCESS_ALT"/>
        <Parameter Name="MBEDTLS_RIPEMD160_PROCESS_ALT"/>
        <Parameter Name="MBEDTLS_SHA1_PROCESS_ALT"/>
        <Parameter Name="MBEDTLS_SHA256_PROCESS_ALT"/>
        <Parameter Name="MBEDTLS_SHA512_PROCESS_ALT"/>
        <Parameter Name="MBEDTLS_DES_SETKEY_ALT"/>
        <Parameter Name="MBEDTLS_DES_CRYPT_ECB_ALT"/>
        <Parameter Name="MBEDTLS_DES3_CRYPT_ECB_ALT"/>
        <Parameter Name="MBEDTLS_AES_SETKEY_ENC_ALT"/>
        <Parameter Name="MBEDTLS_AES_SETKEY_DEC_ALT"/>
        <Parameter Name="MBEDTLS_AES_ENCRYPT_ALT"/>
        <Parameter Name="MBEDTLS_AES_DECRYPT_ALT"/>
        <Parameter Name="MBEDTLS_ECDH_GEN_PUBLIC_ALT"/>
        <Parameter Name="MBEDTLS_ECDH_COMPUTE_SHARED_ALT"/>
        <Parameter Name="MBEDTLS_ECDSA_VERIFY_ALT"/>
        <Parameter Name="MBEDTLS_ECDSA_SIGN_ALT"/>
        <Parameter Name="MBEDTLS_ECDSA_GENKEY_ALT"/>
        <Parameter Name="MBEDTLS_ECP_INTERNAL_ALT"/>
        <Parameter Name="MBEDTLS_ECP_RANDOMIZE_JAC_ALT"/>
        <Parameter Name="MBEDTLS_ECP_ADD_MIXED_ALT"/>
        <Parameter Name="MBEDTLS_ECP_DOUBLE_JAC_ALT"/>
        <Parameter Name="MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT"/>
        <Parameter Name="MBEDTLS_ECP_NORMALIZE_JAC_ALT"/>
        <Parameter Name="MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT"/>
        <Parameter Name="MBEDTLS_ECP_RANDOMIZE_MXZ_ALT"/>
        <Parameter Name="MBEDTLS_ECP_NORMALIZE_MXZ_ALT"/>
        
        <!-- Parameters for MBEDTLS - Alternate implementations - Platform -->
        <Parameter Name="MBEDTLS_TIMING_ALT"/>
        <Parameter Name="MBEDTLS_ENTROPY_HARDWARE_ALT"/>        
        <Parameter Name="MBEDTLS_PLATFORM_EXIT_ALT"/>
        <Parameter Name="MBEDTLS_PLATFORM_TIME_ALT"/>
        <Parameter Name="MBEDTLS_PLATFORM_FPRINTF_ALT"/>
        <Parameter Name="MBEDTLS_PLATFORM_PRINTF_ALT"/>
        <Parameter Name="MBEDTLS_PLATFORM_SNPRINTF_ALT"/>
        <Parameter Name="MBEDTLS_PLATFORM_NV_SEED_ALT"/>
        <Parameter Name="MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT"/>
        <!-- Parameters for MBEDTLS - Modules -->
        <Parameter Name="MBEDTLS_AESNI_C"/>
        <Parameter Name="MBEDTLS_AES_C"/>
        <Parameter Name="MBEDTLS_ARC4_C"/>
        <Parameter Name="MBEDTLS_ASN1_PARSE_C"/>
        <Parameter Name="MBEDTLS_ASN1_WRITE_C"/>
        <Parameter Name="MBEDTLS_BASE64_C"/>
        <Parameter Name="MBEDTLS_BIGNUM_C"/>
        <Parameter Name="MBEDTLS_BLOWFISH_C"/>
        <Parameter Name="MBEDTLS_CAMELLIA_C"/>
        <Parameter Name="MBEDTLS_ARIA_C"/>
        <Parameter Name="MBEDTLS_CCM_C"/>
        <Parameter Name="MBEDTLS_CERTS_C"/>
        <Parameter Name="MBEDTLS_CIPHER_C"/>
        <Parameter Name="MBEDTLS_CMAC_C"/>
        <Parameter Name="MBEDTLS_CTR_DRBG_C"/>
        <Parameter Name="MBEDTLS_DEBUG_C"/>
        <Parameter Name="MBEDTLS_DES_C"/>
        <Parameter Name="MBEDTLS_DHM_C"/>
        <Parameter Name="MBEDTLS_ECDH_C"/>
        <Parameter Name="MBEDTLS_ECDSA_C"/>
        <Parameter Name="MBEDTLS_ECJPAKE_C"/>
        <Parameter Name="MBEDTLS_ECP_C"/>
        <Parameter Name="MBEDTLS_ENTROPY_C"/>
        <Parameter Name="MBEDTLS_ERROR_C"/>
        <Parameter Name="MBEDTLS_GCM_C"/>
        <Parameter Name="MBEDTLS_HAVEGE_C"/>
        <Parameter Name="MBEDTLS_HKDF_C"/>
        <Parameter Name="MBEDTLS_HMAC_DRBG_C"/>
        <Parameter Name="MBEDTLS_MD_C"/>
        <Parameter Name="MBEDTLS_MD2_C"/>
        <Parameter Name="MBEDTLS_MD4_C"/>
        <Parameter Name="MBEDTLS_MD5_C"/>
        <Parameter Name="MBEDTLS_MEMORY_BUFFER_ALLOC_C"/>
        <Parameter Name="MBEDTLS_NET_C"/>
        <Parameter Name="MBEDTLS_OID_C"/>
        <Parameter Name="MBEDTLS_PADLOCK_C"/>
        <Parameter Name="MBEDTLS_PEM_PARSE_C"/>
        <Parameter Name="MBEDTLS_PEM_WRITE_C"/>
        <Parameter Name="MBEDTLS_PK_C"/>
        <Parameter Name="MBEDTLS_PK_PARSE_C"/>
        <Parameter Name="MBEDTLS_PK_WRITE_C"/>
        <Parameter Name="MBEDTLS_PKCS5_C"/>
        <Parameter Name="MBEDTLS_PKCS11_C"/>
        <Parameter Name="MBEDTLS_PKCS12_C"/>
        <Parameter Name="MBEDTLS_PLATFORM_C"/>
        <Parameter Name="MBEDTLS_RIPEMD160_C"/>
        <Parameter Name="MBEDTLS_RSA_C"/>
        <Parameter Name="MBEDTLS_SHA1_C"/>
        <Parameter Name="MBEDTLS_SHA256_C"/>
        <Parameter Name="MBEDTLS_SHA512_C"/>
        <Parameter Name="MBEDTLS_SSL_CACHE_C"/>
        <Parameter Name="MBEDTLS_SSL_COOKIE_C"/>
        <Parameter Name="MBEDTLS_SSL_TICKET_C"/>
        <Parameter Name="MBEDTLS_SSL_TLS_C"/>
        <Parameter Name="MBEDTLS_THREADING_C"/>
        <Parameter Name="MBEDTLS_TIMING_C"/>
        <Parameter Name="MBEDTLS_VERSION_C"/>
        <Parameter Name="MBEDTLS_X509_USE_C"/>
        <Parameter Name="MBEDTLS_X509_CRT_PARSE_C"/>
        <Parameter Name="MBEDTLS_X509_CRL_PARSE_C"/>
        <Parameter Name="MBEDTLS_X509_CSR_PARSE_C"/>
        <Parameter Name="MBEDTLS_X509_CREATE_C"/>
        <Parameter Name="MBEDTLS_X509_CRT_WRITE_C"/>
        <Parameter Name="MBEDTLS_X509_CSR_WRITE_C"/>
        <Parameter Name="MBEDTLS_XTEA_C"/>
        <!-- Parameters for MBEDTLS - Module configuration options - MPI / BIGNUM options -->
        <Parameter Name="MBEDTLS_MPI_WINDOW_SIZE_ENABLE"/>
        <Parameter Name="MBEDTLS_MPI_WINDOW_SIZE"/>
        <Parameter Name="MBEDTLS_MPI_MAX_SIZE_ENABLE"/>
        <Parameter Name="MBEDTLS_MPI_MAX_SIZE"/>
        <!-- Parameters for MBEDTLS - Module configuration options - CTR_DRBG options -->
        <Parameter Name="MBEDTLS_CTR_DRBG_ENTROPY_LEN_ENABLE"/>
        <Parameter Name="MBEDTLS_CTR_DRBG_ENTROPY_LEN"/>
        <Parameter Name="MBEDTLS_CTR_DRBG_RESEED_INTERVAL_ENABLE"/>
        <Parameter Name="MBEDTLS_CTR_DRBG_RESEED_INTERVAL"/>
        <Parameter Name="MBEDTLS_CTR_DRBG_MAX_INPUT_ENABLE"/>
        <Parameter Name="MBEDTLS_CTR_DRBG_MAX_INPUT"/>
        <Parameter Name="MBEDTLS_CTR_DRBG_MAX_REQUEST_ENABLE"/>
        <Parameter Name="MBEDTLS_CTR_DRBG_MAX_REQUEST"/>
        <Parameter Name="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT_ENABLE"/>
        <Parameter Name="MBEDTLS_CTR_DRBG_MAX_SEED_INPUT"/>
        <!-- Parameters for MBEDTLS - Module configuration options - HMAC_DRBG options -->
        <Parameter Name="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL_ENABLE"/>
        <Parameter Name="MBEDTLS_HMAC_DRBG_RESEED_INTERVAL"/>
        <Parameter Name="MBEDTLS_HMAC_DRBG_MAX_INPUT_ENABLE"/>
        <Parameter Name="MBEDTLS_HMAC_DRBG_MAX_INPUT"/>
        <Parameter Name="MBEDTLS_HMAC_DRBG_MAX_REQUEST_ENABLE"/>
        <Parameter Name="MBEDTLS_HMAC_DRBG_MAX_REQUEST"/>
        <Parameter Name="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT_ENABLE"/>
        <Parameter Name="MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT"/>
        <!-- Parameters for MBEDTLS - Module configuration options - ECP options -->
        <Parameter Name="MBEDTLS_ECP_MAX_BITS_ENABLE"/>
        <Parameter Name="MBEDTLS_ECP_MAX_BITS"/>
        <Parameter Name="MBEDTLS_ECP_WINDOW_SIZE_ENABLE"/>
        <Parameter Name="MBEDTLS_ECP_WINDOW_SIZE"/>
        <Parameter Name="MBEDTLS_ECP_FIXED_POINT_OPTIM_ENABLE"/>
        <Parameter Name="MBEDTLS_ECP_FIXED_POINT_OPTIM"/>
        <!-- Parameters for MBEDTLS - Module configuration options - Entropy options -->
        <Parameter Name="MBEDTLS_ENTROPY_MAX_SOURCES_ENABLE"/>
        <Parameter Name="MBEDTLS_ENTROPY_MAX_SOURCES"/>
        <Parameter Name="MBEDTLS_ENTROPY_MAX_GATHER_ENABLE"/>
        <Parameter Name="MBEDTLS_ENTROPY_MAX_GATHER"/>
        <Parameter Name="MBEDTLS_ENTROPY_MIN_HARDWARE_ENABLE"/>
        <Parameter Name="MBEDTLS_ENTROPY_MIN_HARDWARE"/>
        <!-- Parameters for MBEDTLS - Module configuration options - Memory buffer allocator options -->
        <Parameter Name="MBEDTLS_MEMORY_ALIGN_MULTIPLE_ENABLE"/>
        <Parameter Name="MBEDTLS_MEMORY_ALIGN_MULTIPLE"/>
        <!-- Parameters for MBEDTLS - Module configuration options - Platform options -->
        <Parameter Name="MBEDTLS_PLATFORM_STD_MEM_HDR_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_MEM_HDR"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_CALLOC_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_CALLOC"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_FREE_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_FREE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_EXIT_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_EXIT"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_TIME_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_TIME"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_FPRINTF_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_FPRINTF"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_PRINTF_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_PRINTF"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_SNPRINTF_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_SNPRINTF"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_EXIT_SUCCESS"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_EXIT_FAILURE_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_EXIT_FAILURE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_READ_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_READ"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_WRITE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_FILE_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_STD_NV_SEED_FILE"/>
        <Parameter Name="MBEDTLS_PLATFORM_CALLOC_MACRO_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_CALLOC_MACRO"/>
        <Parameter Name="MBEDTLS_PLATFORM_FREE_MACRO_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_FREE_MACRO"/>
        <Parameter Name="MBEDTLS_PLATFORM_EXIT_MACRO_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_EXIT_MACRO"/>
        <Parameter Name="MBEDTLS_PLATFORM_TIME_MACRO_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_TIME_MACRO"/>
        <Parameter Name="MBEDTLS_PLATFORM_TIME_TYPE_MACRO_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_TIME_TYPE_MACRO"/>
        <Parameter Name="MBEDTLS_PLATFORM_FPRINTF_MACRO_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_FPRINTF_MACRO"/>
        <Parameter Name="MBEDTLS_PLATFORM_PRINTF_MACRO_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_PRINTF_MACRO"/>
        <Parameter Name="MBEDTLS_PLATFORM_SNPRINTF_MACRO_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_SNPRINTF_MACRO"/>
        <Parameter Name="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_NV_SEED_READ_MACRO"/>
        <Parameter Name="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO_ENABLE"/>
        <Parameter Name="MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO"/>
        <!-- Parameters for MBEDTLS - Module configuration options - SSL Cache options -->
        <Parameter Name="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT_ENABLE"/>
        <Parameter Name="MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT"/>
        <Parameter Name="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES_ENABLE"/>
        <Parameter Name="MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES"/>
        <!-- Parameters for MBEDTLS - Module configuration options - SSL options -->
        <Parameter Name="MBEDTLS_SSL_MAX_CONTENT_LEN_ENABLE"/>
        <Parameter Name="MBEDTLS_SSL_MAX_CONTENT_LEN"/>
        <Parameter Name="MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME_ENABLE"/>
        <Parameter Name="MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME"/>
        <Parameter Name="MBEDTLS_PSK_MAX_LEN_ENABLE"/>
        <Parameter Name="MBEDTLS_PSK_MAX_LEN"/>
        <Parameter Name="MBEDTLS_SSL_COOKIE_TIMEOUT_ENABLE"/>
        <Parameter Name="MBEDTLS_SSL_COOKIE_TIMEOUT"/>
        <!-- Parameters for MBEDTLS - Complete list of ciphersuites to use, in order of preference -->
        <Parameter Name="MBEDTLS_SSL_CIPHERSUITES_ENABLE"/>
        <Parameter Name="MBEDTLS_SSL_CIPHERSUITES"/>
        <!-- Parameters for MBEDTLS - X509 options -->
        <Parameter Name="MBEDTLS_X509_MAX_INTERMEDIATE_CA_ENABLE"/>
        <Parameter Name="MBEDTLS_X509_MAX_INTERMEDIATE_CA"/>
        <Parameter Name="MBEDTLS_X509_MAX_FILE_PATH_LEN_ENABLE"/>
        <Parameter Name="MBEDTLS_X509_MAX_FILE_PATH_LEN"/>
        <!-- Parameters for MBEDTLS - SHA1 options -->
        <Parameter Name="MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_CERTIFICATES"/>
        <Parameter Name="MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE"/>
        <Parameter Name="MBEDTLS_PLATFORM_ZEROIZE_ALT"/>
        <!-- Parameters for MBEDTLS - Target and application specific configurations -->
        <Parameter Name="YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE_ENABLE"/>
        <Parameter Name="YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE"/>
    </RefMode>
    <!-- ModeLogicOperator for MBEDTLS -->
	<ModeLogicOperator Name="OR">
		<Mode Name="Enabled">
			<ModeLogicOperator Name="XOR">
				<Mode Name="Enabled">
					<SignalLogicalOp Name="AND">
						<Signal IOMode="" Name="VS_MBEDTLS"/>
					</SignalLogicalOp>
					<Semaphore>S_MBEDTLS</Semaphore>
				</Mode>
			</ModeLogicOperator>
			<Condition Diagnostic="Active only if: LwIP not enabled / FREERTOS is enabled when LwIP is enabled." Expression="!S_LWIP | (S_LWIP &amp; S_FREERTOS)"/>
		</Mode>
	</ModeLogicOperator>
	
	<!-- RefSignal for MBEDTLS -->
	<RefSignal Name="VS_MBEDTLS" Virtual="true" />

</IP>

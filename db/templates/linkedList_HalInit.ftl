[#ftl]
[#macro generateConfigModelListCode configModelList inst nTab index]
[#assign listofDeclaration = ""]
[#assign listofCalledMethod = ""]
[#list configModelList as configModel]
[#list configModel.configs as config]
[#assign bz36245=false]
[#if config.methods??] [#-- if the pin configuration contains a list of LibMethods--]
    [#assign methodList = config.methods]
[#else] [#assign methodList = config.libMethod]

[/#if]
[#assign writeConfigComments=false]
[#list methodList as method]
    [#if method.status=="OK"][#assign writeConfigComments=true][/#if]
[/#list]
[#if writeConfigComments]
[#if config.ipName?contains("CORTEX")]
[#if config.comments?? && config.comments!=""] #t/** ${config.comments} #n#t*/[/#if]
[#else]
[#if config.comments?? && config.comments!=""] #t/** ${config.comments?replace("#t","#t")} #n#t*/[/#if]
[/#if]
[/#if]
    [#list methodList as method][#assign args = ""]	 
            [#if method.hardCode??] [#-- Hard code --]              
                ${method.hardCode.text?replace("$IpInstance",inst)} 
            [#else]
                [#if method.type == "Template"] [#-- Template code --]  
                    [#list method.name?split("/") as n]
                        [#assign tplName = n]
                    [/#list]
                    [@optinclude name=mxTmpFolder+"/${tplName?replace('ftl','tmp')}" /] 
                [/#if]
            [/#if]
            [#if method.status=="OK" && method.type != "Template" && method.type != "HardCode"]
                [#if method.arguments??]
                    [#list method.arguments as fargument][#compress]
[#if fargument.refMethod??] [#-- CallLibMethod for Argument value --]
    [#assign argumentValue=""]
    [@callLibMethod CLmethod=fargument.refMethod configModelRef=configModel instRef=inst nTabRef=nTab indexRef=index argumentValue=argumentValue/]
    [#assign arg = argumentValue]
    [#if args == "" && arg!=""][#assign args = args + arg ][#else][#if arg!=""][#assign args = args + ', ' + arg][/#if][/#if]
[/#if] [#-- end if fargument.refMethod??--] [#-- New --]

                    [#if fargument.addressOf] [#assign adr = "&"][#else ][#assign adr = ""][/#if][/#compress] 
                    [#if fargument.genericType == "struct" && fargument.argumentReference == "RefParameter"]
                        [#if fargument.optional == "output"]
                                [#assign arg = "" + adr + fargument.name]
                        [/#if]
                        [#if fargument.context?? && fargument.optional!="output"]
                            [#if fargument.context=="global"]                            
                                [#if config.ipName=="DMA" || config.ipName=="BDMA"]
                                    [#assign instanceIndex = "_"+ config.dmaRequestName?lower_case]
                                [#else] debug 222
                                    [#if config.ipName=="GPDMA"]
                                        [#assign instanceIndex = ""]
                                   [#else]
                                        [#-- [#assign instanceIndex = instRef?replace(name,"")]--]
                                        [#if index??][#assign instanceIndex = index][#else][#if name??][#assign instanceIndex = inst?replace(name,"")][/#if][/#if]
                                                     [#if configModel.ipName=="DFSDM"]
                                                         [#assign instanceIndex = ""]
                                                     [/#if]
                                        [/#if]
                                    [/#if]
                            [/#if]
                        [/#if]
                        [#if instanceIndex??&&fargument.context=="global"][#if fargument.status!="NULL"][#assign arg = "" + adr + fargument.name + instanceIndex][#else][#assign arg = "NULL"][/#if][#else][#if  fargument.status!="NULL"][#assign arg = "" + adr + fargument.name][#else][#assign arg = "NULL"][/#if][/#if]
                        [#-- [#assign arg = "" + adr + fargument.name] --]
                        [#if ((!method.name?contains("Init")&&fargument.context=="global")||(fargument.optional=="output"))]
                        [#else]
                            [#assign index1 =1] [#-- index of argument struct level1 --]
                        [#list fargument.argument as argument]	

                            [#if argument.genericType != "struct"]
                                [#if argument.mandatory && !argument.refMethod??]
                                [#if argument.value?? && argument.value!="__NULL"]
                                    [#if instanceIndex??&&fargument.context=="global"]
                                        [#assign argValue=argument.value?replace("$Index",instanceIndex)]
                                    [#else]
                                        [#assign argValue=argument.value]
                                    [/#if][#-- if global --]
                                    [#-- Bz40086 - Begin tweak of the value in case of ADC --]
                                    [#if ((config.name == "ADC_RegularChannelConfig" && FamilyName!="STM32G0" ) || config.name == "ADC_InjectedChannelConfig" ||  (FamilyName=="STM32G0" && config.name == "ADC_RegularChannelRankConfig")) && (FamilyName!="STM32F0" && FamilyName!="STM32L0" && FamilyName!="STM32F2" && FamilyName!="STM32F4")]
                                        [#list argument?keys as k]
                                            [#if k == "name"]
                                                [#if argument[k] == "Rank"]
                                                 
                                                    [#assign argValue="ADC_REGULAR_RANK_"+argument.value]
                                                [#elseif argument[k] == "InjectedRank"]
                                                    [#assign argValue="ADC_INJECTED_RANK_"+argument.value]
                                                [/#if]
                                            [/#if]
                                        [/#list]
                                    [/#if]                                   
                                    [#-- Bz40086 End tweak of the value in case of ADC --]
                                    [#if argument.genericType=="Array" && argument.context!="globalConst"][#-- if genericType=Array --]
                                    [#assign valList = argument.value?split(argument.arraySeparator)]     
                                            [#assign i = 0]                                  
                                        [#list valList as val]
                                            [#if argument.base == "10"]
                                                #t${argument.name}[${i}] = ${val};
                                            [#else]
                                                #t${argument.name}[${i}] = 0x${val};
                                            [/#if]
                                            [#assign i = i+1]
                                        [/#list]
                                        [#assign argValue="&"+argument.name]                                    
                                    [/#if] [#-- if genericType=Array --]
                                    [#if argument.genericType=="Array" && argument.context=="globalConst"][#-- if genericType=Array and gloabl--]                                        
                                        [#assign argValue="("+argument.typeName +" *)"+argument.name]
                                    [/#if]
                                    [#if argument.value!="" && argument.value!="N/A"]
                                    [#if instanceIndex??&&fargument.context=="global"][#assign varName=fargument.name +"." +instanceIndex][#else][#assign varName=fargument.name][/#if]
                                        [#assign indicator = varName+"."+argument.name+" = "+argValue+" "]
                                        [#assign indicatorName = varName+"."+argument.name]
                                        [#if !listofDeclaration?contains(indicator)][#-- if not repeted --]  
                                            [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"][#assign varName=fargument.name +"." +instanceIndex]${fargument.name}${instanceIndex}[#else][#assign varName=fargument.name]${fargument.name}[/#if].${argument.name} = ${argValue};
                                            [#assign listofDeclaration = listofDeclaration?replace(indicatorName+" =","")]
                                            [#assign listofDeclaration = listofDeclaration +", "+ varName+"."+argument.name+" = "+argValue+" "]                                                                                 
                                        [/#if]
                                    [#else]
                                    [#if nTab==2]#t#t[#else]#t[/#if]//[#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = [#if argument.value!="N/A"]${argValue}[/#if];
                                    [/#if]                                                                     
                                    [/#if]
                                    [#else] [#-- else argument.mandatory--]
                                      [#if fargument.name!="GPIO_InitStruct" && fargument.name!="GPIO_Init"]
                                            [#if argument.name=="Instance"][#-- if argument=Instance--]
                                              [#-- calculate the value of Instance argument if contains $Index --]
                                                [#if  (argument.value??&& argument.value!="__NULL") && (argument.value?contains("$Index"))]
                                                    [#assign instanceValue=argument.value?replace("$Index",index)]
[#if instanceIndex??&&fargument.context=="global"][#assign varName=fargument.name +instanceIndex][#else][#assign varName=fargument.name][/#if]
                                                    [#assign indicator = varName+"."+argument.name+" = "+instanceValue+" "]
                                                    [#if !listofDeclaration?contains(indicator)]    [#-- if not repeted --]
                                                    [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = ${instanceValue};
                                                            [#assign listofDeclaration = listofDeclaration +", "+ indicator]
                                                    
                                                    [/#if]
                                                [#else]
[#if instanceIndex??&&fargument.context=="global"][#assign varName=fargument.name+instanceIndex][#else][#assign varName=fargument.name][/#if] [#if argument.value?? && argument.value!="__NULL"][#assign argv =argument.value][#else][#assign argv=inst][/#if]
                                                   [#assign indicator = varName+"."+argument.name+" = "+argv+" "]
                                                   [#if !listofDeclaration?contains(indicator)] [#-- if not repeted --]
                                                    [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = [#if argument.value?? && argument.value!="__NULL"]${argument.value};[#else]${inst};[/#if]
                                                            [#assign listofDeclaration = listofDeclaration +", "+ indicator]

                                                            [#if index1 == fargument.argument?size]
                                                                #n
                                                            [/#if]
                                                            [#if configModel.ipName=="RTC" && config.name=="RTC_Init_Only"]
                                                                [#list configModel.configs as bz36245config]
                                                                    [#if bz36245config.name=="RTC_Init"]
                                                                        [#assign bz36245=true]
                                                                    [/#if]
                                                                [/#list]
                                                            [/#if]
                                                            [#if bz36245]
                                                              
                                                            [/#if]
                                                   [/#if]
                                                [/#if]
                                          [#else]

                                              [#if argument.status=="KO"]
                                                   [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]//${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = ${argument.value};                                        
                                              [/#if]
                                              [#if argument.value?? && argument.value!="__NULL"]

[#if argument.refMethod??] [#-- CallLibMethod for Argument value --]
    [#assign argumentValue=""]
    [@callLibMethod CLmethod=argument.refMethod configModelRef=configModel instRef=inst nTabRef=nTab indexRef=index argumentValue=argumentValue/]
    [#assign argTmp = argumentValue]
[/#if] [#-- end if fargument.refMethod??--] [#-- New --]
                                                   [#if argument.value!="N/A"][#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = [#if argument.refMethod??]${argumentValue}[#else]${argument.value}[/#if];  [/#if]
 [#if index1 == fargument.argument?size]
                                                                #n
                                                            [/#if]

                                              [/#if]                                    
                                          [/#if][#-- if argument=Instance--]                                
                                      [/#if]    
                                [/#if][#-- if argument.mandatory--]     
                            [#else]
                            [#assign index2=0]
                            [#list argument.argument as argument2]
[#if argument2.genericType!="struct"]
                                [#if argument2.value?? && argument2.value!="__NULL"][#assign argValue=argument2.value][#else] [#assign argValue=""][/#if]
                                [#if argument2.mandatory]
                                    [#if argument2.value?? && argument2.value!="__NULL"]
                                    [#if instanceIndex??&&fargument.context=="global"][#assign argValue=argument2.value?replace("$Index",instanceIndex)][#else][#assign argValue=argument2.value][/#if]
                                    [#if argument2.genericType=="Array" && argument2.context!="globalConst"][#-- if genericType=Array --]
                                        [#if argument2.arraySeparator?? && argument2.arraySeparator!=""]
                                        [#assign valList = argument2.value?split(argument2.arraySeparator)]     
                                        [#else]
                                            [#assign valList = argument2.value?split(":")]
                                        [/#if]
                                            [#assign i = 0]
                                            [#assign argValue="&"+argument2.name+"[0]"]
                                            [#if instanceIndex??&&fargument.context=="global"][#assign varName=fargument.name +instanceIndex][#else][#assign varName=fargument.name][/#if]
                                            [#assign indicator = varName+"."+argument.name+"."+argument2.name+" = "+argValue+" "]

                                        [#list valList as val]
                                            [#if !listofDeclaration?contains(indicator)]  [#-- if not repeted --]
                                                [#if nTab==2]#t#t[#else]#t[/#if][#t]
                                                [#if instanceIndex??&&fargument.context=="global"][#t]
                                                    ${fargument.name}${instanceIndex}[#t]
                                                [#else]
                                                    ${fargument.name}[#t]
                                                [/#if]
                                                .${argument.name}.${argument2.name}[${i}] =[#t]
                                                [#if argument2.base == "10"]
                                                    #t${val};
                                                [#else]
                                                    #t0x${val};
                                                [/#if]

                                            [/#if]
                                            [#assign i = i+1]
                                        [/#list]
                                            [#if index2 == argument.argument?size]
                                                 [#-- add space line at the end of argument setting --]
                                            [/#if]
                                            [#assign listofDeclaration = listofDeclaration +", "+ indicator]
                                    [#else] [#-- if genericType=Array --]
                                    [#-- if argument is a global array --]
                                    [#if argument2.genericType=="Array" && argument2.context=="globalConst"][#-- if genericType=Array and gloabl--]                                        
                                        [#assign argValue="("+argument2.typeName +" *)"+argument2.variableName]
                                    [/#if]                                         
                                    [#if instanceIndex??&&fargument.context=="global"][#assign varName=fargument.name +instanceIndex][#else][#assign varName=fargument.name][/#if]
                                                    [#assign indicator = varName+"."+argument.name+"."+argument2.name+" = "+argValue+" "]
                                                    [#if !listofDeclaration?contains(indicator)]  [#-- if not repeted --]
                                                        [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name} = ${argValue};                                    
                                                            
                                                        [#if index2 == argument.argument?size]
                                                            #n [#-- add space line at the end of argument setting --] 
                                                        [/#if]
                                                            [#assign listofDeclaration = listofDeclaration +", "+ indicator]
                                                    [/#if]
                                        [/#if]
                                    [/#if]
                               [#else] [#-- !argument.mandatory --]
                                    [#if argument2.status=="WARNING"]
                                        [#if argument2.name=="ShieldIOs"]
                                            [#assign argValue ="0"]
                                            [#assign indicator = varName+"."+argument.name+"."+argument2.name+" = "+argValue+" "]
                                            [#if !listofDeclaration?contains(indicator)]  [#-- if not repeted --]
                                                [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name} = ${argValue};                                    
                                                [#if index2 == argument.argument?size]
                                                        #n [#-- add space line at the end of argument setting --]
                                                [/#if]
                                            [/#if]
                                        [/#if]
                                    [/#if]
                                    [#if argument2.status=="KO"]
                                        [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]//${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name} = ${argValue};
                                    [/#if]
                                    [#if argument2.status=="OK"]
[#if instanceIndex??&&fargument.context=="global"][#assign varName=fargument.name +instanceIndex][#else][#assign varName=fargument.name][/#if]
                                         [#assign indicator = varName+"."+argument.name+"."+argument2.name+" = "+argValue+" "]
                                         [#if !listofDeclaration?contains(indicator)]  [#-- if not repeted --]   
                                            [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name} = ${argValue};
                                            [#assign listofDeclaration = listofDeclaration +", "+ indicator]                                            
                                         [/#if]
                                    [/#if]
                                [/#if][#-- if argument.mandatory --]
[#else]
[#list argument2.argument as argument3]
 [#if argument3.value?? && argument3.value!="__NULL"][#assign argValue=argument3.value][#else] [#assign argValue=""][/#if]
                                [#if argument3.mandatory]
                                    [#if argument3.value?? && argument3.value!="__NULL"]
                                    [#if instanceIndex??&&fargument.context=="global"][#assign argValue=argument3.value?replace("$Index",instanceIndex)][#else][#assign argValue=argument3.value][/#if]
                                    [#if argument3.genericType=="Array" && argument3.context!="globalConst"][#-- if genericType=Array --] 
                                        [#if argument3.arraySeparator?? && argument3.arraySeparator!=""]
                                            [#assign valList = argument3.value?split(argument3.arraySeparator)]     
                                        [#else]
                                            [#assign valList = argument3.value?split(":")]
                                        [/#if]
                                            [#assign i = 0]                                  
                                        [#list valList as val] 
                                            [#if argument3.base == "10"]
                                                #t${argument3.name}[${i}] = ${val};
                                            [#else]
                                                #t${argument3.name}[${i}] = 0x${val};
                                            [/#if]
                                            [#assign i = i+1]
                                        [/#list]
                                        [#assign argValue="&"+argument3.name+"[0]"]
                                    [/#if] [#-- if genericType=Array --]
                                     [#-- if argument is a global array --]
                                    [#if argument3.genericType=="Array" && argument3.context=="globalConst"][#-- if genericType=Array and gloabl--]                                        
                                        [#assign argValue="("+argument3.typeName +" *)"+argument3.name]
                                    [/#if]
[#if instanceIndex??&&fargument.context=="global"][#assign varName=fargument.name +instanceIndex][#else][#assign varName=fargument.name][/#if]
                                         [#assign indicator = varName+"."+argument.name+"."+argument2.name+"."+argument3.name+" = "+argValue+ " "]
                                         [#if !listofDeclaration?contains(indicator)]  [#-- if not repeted --]                                      
                                            [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name}.${argument3.name} = ${argValue};                                    
                                            [#assign listofDeclaration = listofDeclaration +", "+ indicator]
                                         [/#if]                                       [/#if]
                               [#else] [#-- !argument.mandatory --]
                                    [#if argument3.status=="KO"]
[#if instanceIndex??&&fargument.context=="global"][#assign varName=fargument.name +instanceIndex][#else][#assign varName=fargument.name][/#if]
                                         [#assign indicator = varName+"."+argument.name+"."+argument2.name+"."+argument3.name+" = "+argValue+" "] 
                                         [#if !listofDeclaration?contains(indicator)]  [#-- if not repeted --]  
                                            [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name}.${argument3.name} = ${argValue};
                                            [#assign listofDeclaration = listofDeclaration +", "+ indicator]
                                         [/#if]
                                    [/#if]
                                    [#if argument3.status=="OK"]
                                    [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name}.${argument3.name} = ${argValue};
                                    [/#if]
                                [/#if][#-- if argument.mandatory --]
[/#list]
[/#if]

[#assign index2=index2 + 1]
                            [/#list]
                            [/#if]
[#assign index1 =index1 + 1]


                        [/#list][#-- list  fargument.argument as argument--]
                        [/#if]
                    [#else][#-- if fargument a simple type struct --]
                        [#if fargument.genericType=="Array"][#-- if genericType=Array --]
                            [#if fargument.context!="globalConst"]
                                [#assign valList = fargument.value?split(fargument.arraySeparator)]
                                [#assign i = 0]
                                [#list valList as val]
                                    [#if fargument.base == "10"]
                                        #t${fargument.name}[${i}] = ${val};
                                    [#else]
                                        #t${fargument.name}[${i}] = 0x${val};
                                    [/#if]
                                    [#assign i = i+1]
                                [/#list]
                            [/#if]
                            [#if fargument.status!="NULL"]
                                [#if instanceIndex??&&fargument.context=="global"]
                                    [#assign arg = "" + adr + fargument.name + instanceIndex]
                                [#else]
                                    [#assign arg = "" + adr + fargument.name]
                                [/#if]
                            [#else]
                                [#assign arg = "NULL"]
                            [/#if]
                        [#else] [#-- if genericType=Array --]
                    [#assign arg = ""]
                        [#if fargument.status=="OK" && fargument.value?? && fargument.value!="__NULL" && fargument.argumentReference == "RefParameter"]
                            [#if name??][#assign argIndex = inst?replace(name,"")]  [/#if]
                                            [#if argIndex??] 
                                                [#assign argValue=fargument.value?replace("$Index",argIndex)]
                                                [#if fargument.returnValue!="true"]
                                                    [#assign arg = "" + adr + argValue]
                                                [/#if]
                                            [#else]
                                                [#if fargument.returnValue!="true"]
                                                    [#assign arg = "" + adr + fargument.value]                                                
                                                [/#if]
                                            [/#if]    
                        [#else] 
                            [#if fargument.status=="NULL"][#assign arg = "" + adr + "NULL"] [/#if]      
                    [/#if]
                        [/#if] [#-- if genericType=Array --]
                    [/#if] [#-- end if fargument is struct --]
                    [#if args == "" && arg!=""][#assign args = args + arg ][#else][#if arg!=""][#assign args = args + ', ' + arg][/#if][/#if]
                    [/#list]
                    [#assign retval=""]
            [#list method.arguments as argument]
            [#if argument.returnValue=="true"]
                [#assign retval=argument.name]
            [/#if]
            [/#list]
[#if S_FATFS_SDIO?? && (inst=="SDIO" || inst?starts_with("SDMMC"))] [#-- if HAL_SD_Init  and SDIO is used with FATFS--]
[#else]		    
                [#if inst?contains("ETH")]
                    #n
                    #t/* USER CODE BEGIN MACADDRESS */
                    #t#t
                    #t/* USER CODE END MACADDRESS */
                    #n
                [/#if]

[#--[#if nTab==2]#t#t[#else]#t[/#if]${method.name}(${args});#n--]
        [#if method.returnHAL=="false"]
            [#-- Check if Method is already called (listofCalledMethod)--]
            [#assign methodName = method.name + "("+args+")"]
            [#if !listofCalledMethod?contains(methodName)]
                [#if nTab==2]#t#t[#else]#t[/#if]${method.name}(${args});
                [#if method.optimizale??&&method.optimizale==true]
                [#assign listofCalledMethod = listofCalledMethod + ", "+ methodName]
                [/#if]
            [#if bz36245]

             }

               [/#if]
            [/#if]
        [#else]
            [#-- [#if nTab==2]#t#t[#else]#t[/#if]${method.name}(${args});#n --]
            [#-- Check if Method is already called (listofCalledMethod)--]
            [#assign methodName = method.name + "("+args+")"] 
            [#if !listofCalledMethod?contains(methodName) && method.optimizale??]
                [#if nTab==2]#t#t[#else]#t[/#if]if (${method.name}(${args}) != [#if method.returnHAL == "true"]HAL_OK[#else]${method.returnHAL}[/#if])
                [#if nTab==2]#t#t[#else]#t[/#if]{
                [#if nTab==2]#t#t[#else]#t[/#if]#tError_Handler();

				

                [#if nTab==2]#t#t[#else]#t[/#if]}
                [#if method.optimizale??&&method.optimizale==true]
                [#assign listofCalledMethod = listofCalledMethod + ", "+ methodName]
                [/#if]


            [/#if]
        [/#if]
[/#if]
                    
            [#else]
                    [#if S_FATFS_SDIO?? && (inst=="SDIO" || inst?starts_with("SDMMC"))] [#-- if HAL_SD_Init  and SDIO is used with FATFS--][#else]
                        [#--[#if nTab==2]#t#t[#else]#t[/#if]${method.name}();#n--]
                        [#if method.returnHAL=="false"]
            [#if nTab==2]#t#t[#else]#t[/#if]${method.name}();
                        [#else]
                            [#-- [#if nTab==2]#t#t[#else]#t[/#if]${method.name}(${args});#n --]
                            [#if nTab==2]#t#t[#else]#t[/#if]if (${method.name}() != [#if method.returnHAL == "true"]HAL_OK[#else]${method.returnHAL}[/#if])
                            [#if nTab==2]#t#t[#else]#t[/#if]{
                            [#if nTab==2]#t#t[#else]#t[/#if]#tError_Handler();
                            [#if nTab==2]#t#t[#else]#t[/#if]}
                        [/#if]#n                  
                    [/#if]
                [/#if]			
        [/#if]
        [#if method.status=="KO"]
        #n [#if nTab==2]#t#t[#else]#t[/#if]//!!! ${method.name} is commented because some parameters are missing
            [#if method.arguments??]			
                [#list method.arguments as fargument]
                    [#if fargument.addressOf] [#assign adr = "&"][#else ] [#assign adr = ""][/#if]
                    [#if fargument.genericType == "struct"][#assign arg = "" + adr + fargument.name]
                                        [#if fargument.context??]                   
                                            [#if fargument.context=="global"]
                                                [#if config.ipName=="DMA" || config.ipName=="BDMA"]
                                                [#assign instanceIndex = "_"+ config.dmaRequestName?lower_case]
                                                [#else]
                                               [#if name??] [#assign instanceIndex = inst?replace(name,"")][/#if]
                                                [#if configModel.ipName=="DFSDM"]
                                                    [#assign instanceIndex = ""]
                                                [/#if]                
                                                [/#if]
                                            [/#if]
                                        [/#if]              
                        [#if instanceIndex??&&fargument.context=="global"][#assign arg = "" + adr + fargument.name + instanceIndex][#else][#assign arg = "" + adr + fargument.name][/#if]
                        [#if (!method.name?contains("Init")&&fargument.context=="global")]
                        [#else]
                        [#list fargument.argument as argument]	
                                [#if argument.genericType != "struct"]
                                [#if argument.mandatory && argument.value?? && argument.value!="__NULL"]
                                    [#if instanceIndex??&&fargument.context=="global"][#assign argValue=argument.value?replace("$Index",instanceIndex)][#else][#assign argValue=argument.value][/#if]
                                    [#if nTab==2]#t#t[#else]#t[/#if]//[#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = ${argValue};
                                 [#else]
                                    [#if argument.name=="Instance"]
                                        [#if nTab==2]#t#t[#else]#t[/#if]//[#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = ${inst};
                                    [/#if]                                
                                [/#if]
                            [#else]
                            [#list argument.argument as argument1]
                                [#if argument1.mandatory && argument1.value?? && argument1.value!="__NULL"]
                                    [#if instanceIndex??&&fargument.context=="global"][#assign argValue=argument1.value?replace("$Index",instanceIndex)][#else][#assign argValue=argument1.value][/#if]
                                [#if nTab==2]#t#t[#else]#t[/#if]//[#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument1.name} = ${argValue};
                                [/#if]
                            [/#list]
                            [/#if]
                            [/#list]
[/#if]
                                        [#else] [#-- if argument != struct --]
 [#if name??][#assign argIndex = inst?replace(name,"")]  
                                            [#assign argIndex = inst?replace(name,"")] 
[/#if]
                                            [#if argIndex??]
                                                [#assign argValue=fargument.value?replace("$Index",argIndex)]
                                                [#assign arg = "" + adr + argValue]
                                            [#else]
                                                [#assign arg = "" + adr + fargument.value]                                                
                                            [/#if]
                                        [/#if]
                    [#if args == ""][#assign args = args + arg ]
                    [#else][#assign args = args + ', ' + arg]
                                        [/#if]
                                [/#list]
                                [#if nTab==2]#t#t[#else]#t[/#if]#t//${method.name}(${args});
                        [#else] [#-- if method without argument --]
                            [#if method.returnHAL=="false"]
                            [#if nTab==2]#t#t[#else]#t[/#if]${method.name}();
                            [#else]
                                [#-- [#if nTab==2]#t#t[#else]#t[/#if]${method.name}(${args});#n --]
                                [#if nTab==2]#t#t[#else]#t[/#if]if (${method.name}() != [#if method.returnHAL == "true"]HAL_OK[#else]${method.returnHAL}[/#if])
                                [#if nTab==2]#t#t[#else]#t[/#if]{
                                [#if nTab==2]#t#t[#else]#t[/#if]#tError_Handler();
                                [#if nTab==2]#t#t[#else]#t[/#if]}
                            [/#if]#n
                               [#--[#if nTab==2]#t#t[#else]#t[/#if]${method.name}();--]
#n
                        [/#if]
                [/#if]
        [/#list]
[#-- assign instanceIndex = "" --]
 [#-- else there is no LibMethod to call--]
[#if bz36245]                                                           
    #n
    #t/* USER CODE BEGIN Check_RTC_BKUP */
    #t#t
    #t/* USER CODE END Check_RTC_BKUP */
    #n
[/#if]
[/#list]
[/#list]


[/#macro]
[#-- End macro generateConfigModelListCode --]


[#list datas as ddd]
    debug 0000
[/#list]
[#-- Function getInitServiceMode --]
[#function getInitServiceMode(ipname1)]
    [#-- assign initServicesList = {"test0":"test1"}--]
    [#assign initServicesList = ""]
    [#list ipvar.configModelList as instanceData]
        [#if instanceData.instanceName==ipname1]
            [#assign initServicesList = {"test0":"test1"}]
            [#if instanceData.initServices??]
                [#return instanceData.initServices]
            [/#if]
        [/#if]
    [/#list]
   [#return initServicesList]
[/#function]
[#-- End Function getInitServiceMode --]

[#-- Function getDeInitServiceMode --]
[#function getDeInitServiceMode(ipname2)]
    [#-- assign initServicesList = {"test0":"test1"}--]
    [#assign deInitServicesList = ""]
    [#list ipvar.configModelList as instanceData]
        [#if instanceData.instanceName==ipname2]
            [#assign deInitServicesList = {"test0":"test1"}]
            [#if instanceData.deInitServices??]
                [#return instanceData.deInitServices]
            [/#if]
        [/#if]
    [/#list]
   [#return deInitServicesList]
[/#function]
[#-- End Function getDeInitServiceMode --]

[#-- macro getLocalVariable of a config Start--]
[#macro getLocalVariable configModel1 listOfLocalVariables resultList]
    [#if configModel1.methods??] 
        [#assign methodList1 = configModel1.methods]
    [#else] [#assign methodList1 = configModel1.libMethod]
    [/#if]
 [#assign myListOfLocalVariables = listOfLocalVariables]
    [#list methodList1 as method][#-- list methodList1 --]
[#if method.arguments??]
        [#list method.arguments as argument][#-- list method.arguments --]
            [#if argument.genericType == "struct"][#-- if struct --]
                [#if argument.context??][#-- if argument.context?? --]
                    [#if argument.context!="global"&&argument.status!="WARNING"&&argument.status!="NULL"&&argument.returnValue=="true"] [#-- if !global --]
                    [#assign varName= " "+argument.name]                    
                    [#assign ll= myListOfLocalVariables?split(" ")]
                    [#assign exist=false]
                    [#list ll as var  ]
                        [#if var==argument.name]
                            [#assign exist=true]
                        [/#if]
                    [/#list]
                    [#if !exist]  [#-- if exist --]                  
                    #t${argument.typeName} ${argument.name} = {0};                        
                      [#assign myListOfLocalVariables = myListOfLocalVariables + " "+ argument.name]
                      [#assign resultList = myListOfLocalVariables]
                    [/#if][#-- if exist --]
                    [/#if][#-- if global --]
                [#else][#-- if context?? --]
                #t${argument.typeName} ${argument.name} = {0};
            [/#if][#-- if argument.context?? --]

            [#-- Array type --]
            [#list argument.argument as subArg] [#-- list subArg --]
                [#if subArg.genericType=="Array"] [#-- if genericType == "Array" --]
                    ${subArg.typeName} ${subArg.name}[${subArg.arraySize}] ; 
                [/#if] [#-- if genericType == "Array" --]
                [#if subArg.genericType =="struct"]
                    [#list subArg.argument as subArg1] [#-- list subArg1 --]
                        [#if subArg1.genericType=="Array"] [#-- if genericType == "Array" --]
                           #t ${subArg1.typeName} ${subArg1.name}[${subArg1.arraySize}] ; 
                        [/#if] [#-- if genericType == "Array" --]
                    [/#list]
                [/#if]
            [/#list] [#-- list subArg --]
            [/#if][#-- if struct --]
        [/#list][#-- list method.arguments --]
[/#if]
    [/#list][#-- list methodList1 --]
[/#macro]
[#-- macro getLocalVariable of a config End--]


[#-- macro generateConfigModelCode --]

[#macro generateConfigModelCode configModel inst nTab index]
[#if configModel.methods??] [#-- if the pin configuration contains a list of LibMethods--]
    [#assign methodList = configModel.methods]
[#else] [#assign methodList = configModel.libMethod]
[/#if]
[#assign writeConfigComments=false]
[#list methodList as method]
    [#if method.status=="OK"][#assign writeConfigComments=true][/#if]
[/#list]
[#if writeConfigComments]
[#-- [#if configModel.comments??] #t/**${configModel.comments} #n#t*/[/#if] --]
[/#if]
	[#list methodList as method][#assign args = ""]	  
[#assign handler = ""]
            [#if method.hardCode??] [#-- Hard code --]              
                ${method.hardCode.text?replace("$IpInstance",inst)} 
            [#else]
                [#if method.type == "Template"] [#-- Template code --]  
                    [#list method.name?split("/") as n]
                        [#assign tplName = n]
                    [/#list]
                    [@optinclude name=mxTmpFolder+"/${tplName?replace('ftl','tmp')}" /] 
                [/#if]
            [/#if]
            [#if method.status=="OK" && method.type != "Template" && method.type != "HardCode"]                           		
             	[#if method.arguments??]
                    [#list method.arguments as fargument][#compress]
[#if inst=="USB"]
[#assign handler = fargument.name]
[/#if]
                    [#if fargument.addressOf] [#assign adr = "&"][#else ][#assign adr = ""][/#if][/#compress] 
                    [#if fargument.genericType == "struct"]
                        [#if fargument.context??]
                            [#if fargument.context=="global"]
                                [#if configModel.ipName=="DMA"]
                                    [#assign instanceIndex = "_"+ configModel.instanceName?lower_case]
                                [#else]
                                   [#-- [#assign instanceIndex = inst?replace(name,"")]--]
                                   [#if index??][#assign instanceIndex = index][#else][#assign instanceIndex = inst?replace(name,"")][/#if]
                                [/#if]
                            [/#if]
                        [/#if]                     
                        [#if instanceIndex??&&fargument.context=="global"][#if fargument.status!="NULL"][#assign arg = "" + adr + fargument.name + instanceIndex][#else][#assign arg = "NULL"][/#if][#else][#if  fargument.status!="NULL"][#assign arg = "" + adr + fargument.name][#else][#assign arg = "NULL"][/#if][/#if]
                        [#-- [#assign arg = "" + adr + fargument.name] --]
                        [#if (!method.name?contains("Init")&&fargument.context=="global")]
                        [#else]
                        [#list fargument.argument as argument]	
                            [#if argument.genericType != "struct"]
                                [#if argument.mandatory]
                                [#if argument.value??]
                                    [#if instanceIndex??&&fargument.context=="global"]
                                        [#assign argValue=argument.value?replace("$Index",instanceIndex)]
                                    [#else]
                                        [#assign argValue=argument.value]
                                    [/#if][#-- if global --]
                                    [#if argument.genericType=="Array"][#-- if genericType=Array --]
                                    [#assign valList = argument1.value?split(argument1.arraySeparator)]     
                                            [#assign i = 0]                                  
                                        [#list valList as val] 
                                            [#if argument1.typeName == "10"]
                                                #t${argument1.name}[${i}] = ${val};
                                            [#else]
                                                #t${argument1.name}[${i}] = 0x${val};
                                            [/#if]                                            [#assign i = i+1]
                                        [/#list]
                                        [#assign argValue="&"+argument1.name]
                                    [/#if] [#-- if genericType=Array --]
                                    [#if argument.value!="" && argument.value!="N/A"]
                                    [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = ${argValue};
                                    [#else]
                                    [#if nTab==2]#t#t[#else]#t[/#if]//[#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = [#if argument.value!="N/A"]${argValue}[/#if];
                                    [/#if]                                                                     
                                    [/#if]
                                    [#else] [#-- else argument.mandatory--]
                                      [#if fargument.name!="GPIO_InitStruct" && fargument.name!="GPIO_Init"]
                                            [#if argument.name=="Instance"][#-- if argument=Instance--]
                                              [#-- calculate the value of Instance argument if contains $Index --]
                                                [#if  (argument.value??) && (argument.value?contains("$Index"))]
                                                    [#assign instanceValue=argument.value?replace("$Index",index)]
                                                [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = ${instanceValue};
                                                [#else]
                                                   [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = [#if argument.value??]${argument.value};[#else]${inst}[/#if]
                                                [/#if]
                                          [#else]
                                              [#if argument.status=="KO"]
                                                   [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]//${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = ${argument.value};                                        
                                              [/#if]
                                              [#if argument.value??]
                                                   [#if argument.value!="N/A"][#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = ${argument.value};  [/#if]
                                              [/#if]                                    
                                          [/#if][#-- if argument=Instance--]                                
                                      [/#if]    
                                [/#if][#-- if argument.mandatory--]
                                
                            [#else]
                            [#list argument.argument as argument2]
[#if argument2.genericType!="struct"]
                                [#if argument2.value??][#assign argValue=argument2.value][#else] [#assign argValue=""][/#if]
                                [#if argument2.mandatory]
                                    [#if argument2.value??]
                                    [#if instanceIndex??&&fargument.context=="global"][#assign argValue=argument2.value?replace("$Index",instanceIndex)][#else][#assign argValue=argument2.value][/#if]
                                    [#if argument2.genericType=="Array"][#-- if genericType=Array --] 
                                        [#assign valList = argument2.value?split(":")]     
                                            [#assign i = 0]                                  
                                        [#list valList as val] 
                                            [#if argument2.typeName == "10"]
                                                #t${argument2.name}[${i}] = ${val};
                                            [#else]
                                                #t${argument2.name}[${i}] = 0x${val};
                                            [/#if]                                            [#assign i = i+1]
                                        [/#list]
                                        [#assign argValue="&"+argument2.name+"[0]"]
                                    [/#if] [#-- if genericType=Array --]
                                    [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name} = ${argValue};                                    
                                    [/#if]
                               [#else] [#-- !argument.mandatory --]
                                    [#if argument2.status=="KO"]
                                        [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]//${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name} = ${argValue};
                                    [/#if]
                                    [#if argument2.status=="OK"]
                                    [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name} = ${argValue};
                                    [/#if]
                                [/#if][#-- if argument.mandatory --]
[#else]
[#list argument2.argument as argument3]
 [#if argument3.value??][#assign argValue=argument3.value][#else] [#assign argValue=""][/#if]
                                [#if argument3.mandatory]
                                    [#if argument3.value??]
                                    [#if instanceIndex??&&fargument.context=="global"][#assign argValue=argument3.value?replace("$Index",instanceIndex)][#else][#assign argValue=argument3.value][/#if]
                                    [#if argument3.genericType=="Array"][#-- if genericType=Array --] 
                                        [#assign valList = argument3.value?split(":")]     
                                            [#assign i = 0]                                  
                                        [#list valList as val] 
                                            [#if argument3.typeName == "10"]
                                                #t${argument3.name}[${i}] = ${val};
                                            [#else]
                                                #t${argument3.name}[${i}] = 0x${val};
                                            [/#if]                                            [#assign i = i+1]
                                        [/#list]
                                        [#assign argValue="&"+argument3.name+"[0]"]
                                    [/#if] [#-- if genericType=Array --]
                                    [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name}.${argument3.name} = ${argValue};                                    
                                    [/#if]
                               [#else] [#-- !argument.mandatory --]
                                    [#if argument3.status=="KO"]
                                        [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]//${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name}.${argument3.name} = ${argValue};
                                    [/#if]
                                    [#if argument3.status=="OK"]
                                    [#if nTab==2]#t#t[#else]#t[/#if][#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument2.name}.${argument3.name} = ${argValue};
                                    [/#if]
                                [/#if][#-- if argument.mandatory --]
[/#list]
[/#if]
                            [/#list]
                            [/#if]
                        [/#list][#-- list  fargument.argument as argument--]
                        [/#if]
                    [#else][#-- if struct --]
                        [#assign arg = ""]
                        [#if inst?contains("ETH")]
                            #n
                            #t/* USER CODE BEGIN MACADDRESS */
                            #t#t
                            #t/* USER CODE END MACADDRESS */
                            #n
                        [/#if]
                        [#if fargument.status=="OK" && fargument.value??]
                            [#assign argIndex = inst?replace(name,"")]  
                                            [#if argIndex??]
                                                [#assign argValue=fargument.value?replace("$Index",argIndex)]
                                                [#if fargument.returnValue!="true"]
                                                	[#assign arg = "" + adr + argValue]
                                                [/#if]
                                            [#else]
                                                [#assign arg = "" + adr + fargument.value]                                                
                                            [/#if]
                        [/#if]
                    [/#if]
                    [#if args == "" && arg!=""][#assign args = args + arg ][#else][#if arg!=""][#assign args = args + ', ' + arg][/#if][/#if]
                    [/#list]
                    [#assign retval=""]
		    [#list method.arguments as argument]
			[#if argument.returnValue=="true"]
				[#assign retval=argument.name]
			[/#if]
		    [/#list]
                    [#-- add Register Callbacks for USB STM32WB Start --]
                    [#if (FamilyName=="STM32WB" | FamilyName=="STM32G4" ) && inst == "USB" && handler!=""]                    
                    [#if handler?contains("pcd")]
                    [#assign USBmodule = "PCD"]
                    [#else]
                    [#assign USBmodule = "HCD"]
                    [/#if]
                        #n#t#if (USE_HAL_${USBmodule}_REGISTER_CALLBACKS == 1U)
                        #t/* register Msp Callbacks (before the Init) */
                        #tHAL_${USBmodule}_RegisterCallback(&${handler}, HAL_${USBmodule}_MSPINIT_CB_ID, ${USBmodule}_MspInit);
                        #tHAL_${USBmodule}_RegisterCallback(&${handler}, HAL_${USBmodule}_MSPDEINIT_CB_ID, ${USBmodule}_MspDeInit);
                        #t#endif /* USE_HAL_${USBmodule}_REGISTER_CALLBACKS */#n
                    
                    [#-- add Register Callbacks for USB STM32WB End --]
                    [/#if]
		    [#if retval??&& retval!=""]
			[#if nTab==2]#t#t[#else]#t[/#if]${retval} = ${method.name}(${args});
		    [#else]
			[#--[#if nTab==2]#t#t[#else]#t[/#if]${method.name}(${args});#n--]
                            [#if method.returnHAL=="false"]
                                [#if nTab==2]#t#t[#else]#t[/#if]${method.name}(${args});
                            [#else]
                                [#-- [#if nTab==2]#t#t[#else]#t[/#if]${method.name}(${args});#n --]
                                [#if nTab==2]#t#t[#else]#t[/#if]if (${method.name}(${args}) != [#if method.returnHAL == "true"]HAL_OK[#else]${method.returnHAL}[/#if])
                                [#if nTab==2]#t#t[#else]#t[/#if]{
                                [#if nTab==2]#t#t[#else]#t[/#if]#tError_Handler( );
                                [#if nTab==2]#t#t[#else]#t[/#if]}
                            [/#if]#n
		    [/#if]
		[#else]
                    [#--[#if nTab==2]#t#t[#else]#t[/#if]${method.name}();#n""--]
                            [#if method.returnHAL=="false"]
                                [#if nTab==2]#t#t[#else]#t[/#if]${method.name}();
                            [#else]
                                [#-- [#if nTab==2]#t#t[#else]#t[/#if]${method.name}(${args});#n --]
                                [#if nTab==2]#t#t[#else]#t[/#if]if (${method.name}() != [#if method.returnHAL == "true"]HAL_OK[#else]${method.returnHAL}[/#if])
                                [#if nTab==2]#t#t[#else]#t[/#if]{
                                [#if nTab==2]#t#t[#else]#t[/#if]#tError_Handler( );
                                [#if nTab==2]#t#t[#else]#t[/#if]}
                            [/#if]#n
                [/#if]			
		[/#if]
		[#if method.status=="KO"]
		#n [#if nTab==2]#t#t[#else]#t[/#if]//!!! ${method.name} is commented because some parameters are missing
			[#if method.arguments??]			
				[#list method.arguments as fargument]
					[#if fargument.addressOf] [#assign adr = "&"][#else ] [#assign adr = ""][/#if]
					[#if fargument.genericType == "struct"][#assign arg = "" + adr + fargument.name]
                                        [#if fargument.context??]                   
                                            [#if fargument.context=="global"]
                                                [#if configModel.ipName=="DMA"]
                                                [#assign instanceIndex = "_"+ configModel.instanceName?lower_case]
                                                [#else]
                                                [#assign instanceIndex = inst?replace(name,"")]
                                                [/#if]
                                            [/#if]
                                        [/#if]              
                        [#if instanceIndex??&&fargument.context=="global"][#assign arg = "" + adr + fargument.name + instanceIndex][#else][#assign arg = "" + adr + fargument.name][/#if]
                        [#if (!method.name?contains("Init")&&fargument.context=="global")]
                        [#else]
                        [#list fargument.argument as argument]	
                                [#if argument.genericType != "struct"]
                                [#if argument.mandatory && argument.value??]
                                    [#if instanceIndex??&&fargument.context=="global"][#assign argValue=argument.value?replace("$Index",instanceIndex)][#else][#assign argValue=argument.value][/#if]
                                    [#if nTab==2]#t#t[#else]#t[/#if]//[#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = ${argValue};
                                 [#else]
                                    [#if argument.name=="Instance"]
                                        [#if nTab==2]#t#t[#else]#t[/#if]//[#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name} = ${inst};
                                    [/#if]                                
                                [/#if]
                            [#else]
                            [#list argument.argument as argument1]
                                [#if argument1.mandatory && argument1.value??]
                                    [#if instanceIndex??&&fargument.context=="global"][#assign argValue=argument1.value?replace("$Index",instanceIndex)][#else][#assign argValue=argument1.value][/#if]
                                [#if nTab==2]#t#t[#else]#t[/#if]//[#if instanceIndex??&&fargument.context=="global"]${fargument.name}${instanceIndex}[#else]${fargument.name}[/#if].${argument.name}.${argument1.name} = ${argValue};
                                [/#if]
                            [/#list]
                            [/#if]
                            [/#list]
[/#if]
                                        [#else] [#-- if argument != struct --]
                                            [#assign argIndex = inst?replace(name,"")] 
                                            [#if argIndex??]
                                                [#assign argValue=fargument.value?replace("$Index",argIndex)]
                                                [#assign arg = "" + adr + argValue]
                                            [#else]
                                                [#assign arg = "" + adr + fargument.value]                                                
                                            [/#if]
                                        [/#if]
					[#if args == ""][#assign args = args + arg ]
					[#else][#assign args = args + ', ' + arg]
                                        [/#if]
                                [/#list]
                                [#if nTab==2]#t#t[#else]#t[/#if]#t//${method.name}(${args});
                        [#else] [#-- if method without argument --]
                               [#--[#if nTab==2]#t#t[#else]#t[/#if]${method.name}()#n;--]
                            [#if method.returnHAL=="false"]
                                [#if nTab==2]#t#t[#else]#t[/#if]${method.name}();
                            [#else]
                                [#-- [#if nTab==2]#t#t[#else]#t[/#if]${method.name}(${args});#n --]
                                [#if nTab==2]#t#t[#else]#t[/#if]if (${method.name}() != [#if method.returnHAL == "true"]HAL_OK[#else]${method.returnHAL}[/#if])
                                [#if nTab==2]#t#t[#else]#t[/#if]{
                                [#if nTab==2]#t#t[#else]#t[/#if]#tError_Handler( );
                                [#if nTab==2]#t#t[#else]#t[/#if]}
                            [/#if]#n                                
                        [/#if]
                [/#if]
        [/#list]

[#-- assign instanceIndex = "" --]
 [#-- else there is no LibMethod to call--]
[/#macro]
[#-- End macro generateConfigModelCode --]

[#-- macro generateConfigCode --]
[#macro generateConfigCode ipName type serviceName instHandler tabN]
[#if type=="Init"]
 [#assign service = getInitServiceMode(ipName)]
[#else]
 [#assign service = getDeInitServiceMode(ipName)]
[/#if]
[#if serviceName=="gpio"]
    [#if service.gpio??][#assign gpioService = service.gpio][#else][#assign gpioService = ""][/#if]
[/#if]
[#if serviceName=="dma" && service.dma??]
[#assign dmaService = service.dma]
[/#if]
   
[#if serviceName=="gpio"]
 [#assign instanceIndex =""]
    [@generateConfigModelCode configModel=gpioService inst=ipName nTab=tabN index=""/]
[/#if]
[#if serviceName=="dma" && dmaService??]
 [#assign instanceIndex =""]
    [#list dmaService as dmaconfig] 
     [@generateConfigModelCode configModel=dmaconfig inst=ipName  nTab=tabN index=""/]
        [#assign dmaCurrentRequest = dmaconfig.instanceName?lower_case]
        [#assign prefixList = dmaCurrentRequest?split("_")]
        [#list prefixList as p][#assign prefix= p][/#list]
        
#t__HAL_LINKDMA(${instHandler},[#if dmaconfig.dmaHandel??]${dmaconfig.dmaHandel}[#else]hdma${prefix}[/#if],hdma_${dmaconfig.instanceName?lower_case});#n
    [/#list] [#-- list dmaService as dmaconfig --]
[/#if]

[/#macro]
[#-- End macro generateConfigCode --]

[#-- function: getHalMode(ipInstanceName) --]
[#function getHalMode ipname]
    [#list ipvar.instances.entrySet() as entry]
        [#if entry.key==ipname]
            ${entry.value}
        [/#if]
    [#return entry.value]
    [/#list]
[/#function]
[#-- End function: getHalMode(ipInstanceName) --]

[#-- function: getDmaHandler(currentipname) --]
[#function getDmaHandler currentipname]
    [#assign result=""]
    [#list ipvar.configModelList as instanceData]
        [#if instanceData.instanceName==currentipname]
            [#if instanceData.dmaHandel??] [#assign result=instanceData.dmaHandel][/#if]
        [/#if]
    [/#list] 
    [#return result]   
[/#function]
[#-- End function: getDmaHandler(currentipname) --]

[#-- macro generate service code for MspInit/MspDeInit Start--]
[#macro generateServiceCode ipName serviceType modeName instHandler tabN]
    [#if serviceType=="Init"]
        [#assign initService = getInitServiceMode(ipName)]
    [#else]
        [#assign initService = getDeInitServiceMode(ipName)]
    [/#if]
        [#assign gpioExist = false]
        [#assign dmaExist = false]
        [#assign nvicExist = false]
        [#if initService?? && initService.entrySet??]
        [#list initService.entrySet() as entry]
            [#if entry.key=="dma"]
            [#assign dmaExist = true]
            [/#if]
            [#if entry.key=="nvic"]
            [#assign nvicExist = true]
            [/#if]
            [#if entry.key=="gpio"]
            [#assign gpioExist = true]
            [/#if]            
        [/#list]
        [/#if]    
    #t#t/* Peripheral clock enable */
    [#if serviceType=="Init"] 
           [#if initService.clock??]
            [#if initService.clock!="none"]
                #t#t/* Enable Peripheral clock */
            [#list initService.clock?split(';') as clock]            
               #t#t${clock?trim}();
            [/#list]
            [/#if]
            [#else]
                 #t#t/* Peripheral clock enable */
                 #t#t__HAL_RCC_${ipName}_CLK_ENABLE(); 
           [/#if]
    [#else]           
         [#if initService.clock??]
            [#if initService.clock!="none"]
               #t#t/* Disable Peripheral clock */
               [#list initService.clock?split(';') as clock]            
                  #t#t${clock?replace("ENABLE","DISABLE")?trim}(); 
               [/#list]
            [/#if]
         [#else]
            [#if ipName?contains("WWDG") && (DIE=="DIE415" || DIE=="DIE435")]
            [#-- Orca and LittleOrca window watchdog clock disable don't work --]
            [#else]
                 #t#t/* Peripheral clock disable */
                 #t#t__HAL_RCC_${ipName}_CLK_DISABLE();  
            [/#if]
         [/#if]   
    [/#if]
    [#if gpioExist]
#t[@generateConfigCode ipName=ipName type=serviceType serviceName="gpio" instHandler=instHandler tabN=tabN/]
[/#if]
    [#if serviceType=="Init"] 
    [#if dmaExist]#n#t#t/* Peripheral DMA init*/
#t[@generateConfigCode ipName=ipName type=serviceType serviceName="dma" instHandler=instHandler tabN=tabN/]

    [/#if]
    [#if nvicExist]
        [#if initService.nvic??&&initService.nvic?size>0]
            [#assign irqNum = 0]
            [#list initService.nvic as initVector]
                [#if initVector.codeInMspInit]
                  [#assign irqNum = irqNum+1]
                  [#if irqNum==1]#n#t#t/* Peripheral interrupt init*/[/#if]
                  #t#tHAL_NVIC_SetPriority(${initVector.vector}, ${initVector.preemptionPriority}, ${initVector.subPriority});
                  #t#tHAL_NVIC_EnableIRQ(${initVector.vector});
                [/#if]
            [/#list]
        [/#if]
    [/#if]
    [#else] [#-- else serviceType = DeInit --]
    [#if dmaExist]#n#t#t/* Peripheral DMA DeInit*/    
 [#assign service = getInitServiceMode(ipName)]
 [#assign dmaservice =service.dma]
 [#if dmaservice??]
    [#list dmaservice as dmaconfig]
        [#assign dmaCurrentRequest = dmaconfig.instanceName?lower_case]
        [#assign prefixList = dmaCurrentRequest?split("_")]
        [#list prefixList as p][#assign prefix= p][/#list]
        [#assign ipdmahandler1 = "hdma" + prefix]
         [#-- [#if getDmaHandler(ipName)!=""][#assign ipdmahandler = getDmaHandler(ipName)][#else][#assign ipdmahandler = ipdmahandler1][/#if]--]
           [#if dmaconfig.dmaHandel??][#assign ipdmahandler = dmaconfig.dmaHandel][#else][#assign ipdmahandler = ipdmahandler1][/#if]
        #t#tHAL_DMA_DeInit(${instHandler}->${ipdmahandler});
    [/#list] [#-- list dmaService as dmaconfig --]
[/#if]    
    [/#if] [#-- if DMA exist --]
[#-- DeInit NVIC if DeInit --]
    [#if nvicExist&&service.nvic?size>0]#n#t#t/* Peripheral interrupt Deinit*/[#--#n#t#tHAL_NVIC_DisableIRQ([#if service.nvic.vector??]${service.nvic.vector}[/#if]);--]
            [#list service.nvic as initVector]
                #t#tHAL_NVIC_DisableIRQ(${initVector.vector});
            [/#list]
    [/#if]

    [/#if]
[/#macro]
[#-- End macro add service code --]

[#assign debugmdma = false]
[#assign ipName = "MDMA"]
[#if dmas?size > 0]
  [#list dmas as dma]
    [#assign ipName = dma]
  [/#list]
[/#if]

[#assign LL_Driver = false]
[#if driver??]
  [#list driver as driverType]
    [#if driverType=="LL"]
      [#assign LL_Driver = true]
    [/#if]
  [/#list]
[/#if]

[#assign contextFolder=""]
[#if cpucore!=""]
[#assign contextFolder = cpucore?replace("ARM_CORTEX_","C")+"/"]
[/#if]

[#function list_contains string_list element]
  [#list string_list?split(" ") as string_element]
    [#if string_element == element]
      [#return true]
    [/#if]
  [/#list]
  [#return false]
[/#function]

[#function is_global_variable element]
  [#list variables as variable]
    [#if variable.name == element]
      [#return true]
    [/#if]
  [/#list]
  [#return false]
[/#function]

/** 
  * Enable MDMA controller clock
[#if datas?size > 0]
  * Configure MDMA for global transfers
[/#if]
[#if variables?? && variables?size > 0]
  [#list variables as variable]
  *   ${variable.name}
  [/#list]
[/#if]
  */
static void MX_${ipName}_Init(void) 
{
[#assign initServicesList = {"test0":"test1"}]
[#-- Section1: Create the void mx_LINKEDLIST_init() function for each ip instance --]
[#compress]
[#if isHalSupported=="true"]
  [#if clocks?size > 0]
  /* MDMA controller clock enable */
  [/#if]
  [#list clocks as clockMacro]
    [#if clockMacro?contains("(")]
  ${clockMacro};
    [#else]
  ${clockMacro}();
    [/#if]
  [/#list]
[/#if]
[#assign global_variables = ""]
[#list datas as configModel]
  [#list configModel.methods as method]
    [#list method.arguments as func_argument]
      [#if func_argument.genericType == "struct" && func_argument.context == "global"]
        [#if global_variables == ""]
          [#assign global_variables = func_argument.name]
        [#else]
          [#if !list_contains(global_variables, func_argument.name)]
            [#assign global_variables = global_variables + " " + func_argument.name]
          [/#if]
        [/#if]
      [/#if]
    [/#list]
  [/#list]
[/#list]
[#if debugmdma]
global_variables=${global_variables}
[/#if]
[#assign local_variables = ""]
  /* Local variables */
[#list datas as configModel]
  [#list configModel.methods as method]
    [#list method.arguments as func_argument]
      [#if func_argument.genericType == "struct" && func_argument.context != "global"]
        [#if local_variables == ""]
          [#assign local_variables = func_argument.name]
  ${func_argument.typeName} ${func_argument.name};
        [#else]
          [#if !list_contains(local_variables, func_argument.name) && !list_contains(global_variables, func_argument.name)]
            [#assign local_variables = local_variables + " " + func_argument.name]
  ${func_argument.typeName} ${func_argument.name};
          [/#if]
        [/#if]
      [/#if]
    [/#list]
  [/#list]
[/#list]
[#if debugmdma]
local_variables=${local_variables}
[/#if]
[@generateConfigModelListCode configModelList=datas  inst=""  nTab=1 index=""/]
[/#compress]
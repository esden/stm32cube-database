[#ftl]
[#compress]

[#----------------------------------------------------]
[#-- DTS FTL binder and printer (specific "dts-v1") --]
[#-- All the DTS structuring should be defined in FTL
	 as it cannot be changed between 2 versions		--]
[#----------------------------------------------------]

[#--Configure FTL behaviors --]
[#assign cfg_traceEnable = false] [#-- false: disable tracing for memory&performance gain --]

[#--FTL path--]
[#assign mx_dtLibsPath = "DeviceTree" + mx_osPathDelimiter]

[#--Load services libs --]
[#include mx_dtLibsPath + "tpl_CommonLibs_v1-0.ftl"]
[#include mx_dtLibsPath + "tpl_MxLibs_v1-0.ftl"]

[#--Load SOC system bindings--]
[#--FIX: load from DTConfigs.xml--]
[#include mx_dtLibsPath + mx_dtBindingsSocPath +  "system-soc_and_common_v1.0_Bindings.ftl"]


[#--Check DTGen config--]
[#assign global_allowBinding = true]
[#if !mxDtDM.dts_fwsList?has_content]
	[@mlog  logMod=module logType="ERR" logMsg="wrong DTGen configuration: no FW specified" varsMap={} /]
	[#assign global_allowBinding = false]
[/#if]
[#if !mxDtDM.dts_name?has_content || !mxDtDM.dts_template?has_content]
	[@mlog  logMod=module logType="ERR" logMsg="wrong DTGen configuration" varsMap={"mxDtDM.dts_name":mxDtDM.dts_name!,"mxDtDM.dts_template":mxDtDM.dts_template!} /]
	[#assign global_allowBinding = false]
[/#if]


[#--------------------------------------------------------------------------------------------------------------------------------]
[#-- DTS printing services --]
[#--------------------------------------------------------------------------------------------------------------------------------]

[#--manage tabulations level--]
[#function dts_get_tabs   pDtLevel ]

	[#local TABN = ""]
	[#local TABP = "#t#t"]
	[#if pDtLevel > 0]
		[#list 1..pDtLevel as idx ]
			[#local TABN = TABN + "#t#t"]
			[#local TABP = TABP + "#t#t"]
		[/#list]
	[/#if]

[#return {"TABN":TABN, "TABP":TABP}]
[/#function]


[#--Print list of elmts.
before printing, position elements respecting ordering.--]
[#macro DTBindedDtsElmtDMsList_print pParentElmt  pElmtsList pDtLevel pOrdering]
[#compress]
	[#local module = "DTBindedDtsElmtDMsList_print"]

	[#--FIX: optimize when pElmtsList is empty--]

		[#if pParentElmt?? && pParentElmt?has_content]
			[#--mandatory attributes--]
			[#if pParentElmt.typeName?? && pParentElmt.typeName?has_content]
				[#local typeName = pParentElmt.typeName]
				[#local areUserSectionsAllowed = pParentElmt.areUserSectionsAllowed]
			[#else]
				[@mlog  logMod=module logType="ERR" logMsg="Undefined typeName (pParentElmt)" varsMap={} /]
				[#local typeName = ""]
			[/#if]
			[#--optional attributes--]
		[#else]
			[#local typeName = ""]
		[/#if]

		[#--elmts extraction for re-ordering--]
		[#local NodeElmtsList = []]
		[#local pinCtrlElmtsList = []]
		[#local otherElmtsList = []]
		[#local notOrderedElmtsList = []]
		[#list pElmtsList as elmt]
			[#--FIX: if no parent and no overloading => node location error--]
			[#if elmt.typeName?? && elmt.typeName?has_content]
				[#if (elmt.typeName=="Node")]
					[#local NodeElmtsList = NodeElmtsList + [elmt]]
					[#local notOrderedElmtsList = notOrderedElmtsList + [elmt]]
				[#elseif (elmt.typeName=="PinCtrl")]
					[#local pinCtrlElmtsList = pinCtrlElmtsList + [elmt]]
				[#else]
					[#local otherElmtsList = otherElmtsList + [elmt]]
					[#local notOrderedElmtsList = notOrderedElmtsList + [elmt]]
				[/#if]
			[#else]
				[@mlog  logMod=module logType="ERR" logMsg="Undefined typeName (elmt)" varsMap={"elmt.typeName":elmt.typeName!} /]
				[#local typeName = ""]
			[/#if]
		[/#list]

		[#--bind pinCtrl--]
		[#local pinCtrlBindedElmtsList = [] ]
		[#if pinCtrlElmtsList?has_content && srvcmx_isPinCtrlToGenerate_inElmt(pParentElmt)]
				[#--mandatory attributes--]
				[#if pParentElmt.fwName?? && pParentElmt.fwName?has_content]
					[#local fwName = pParentElmt.fwName]
				[#else]
					[@mlog  logMod=module logType="ERR" logMsg="PinCtrl elmts - undefined fwName" varsMap={"pParentElmt.fwName":pParentElmt.fwName!} /]
					[#local fwName = ""]
				[/#if]
				[#--optional attributes--]

				[#local pinCtrlBindedElmtsListRes = Bind_pinCtrl(pinCtrlElmtsList, fwName) ]
				[#local pinCtrlBindedElmtsList = pinCtrlBindedElmtsListRes.bindedElmtsList ]
			[#if pinCtrlBindedElmtsListRes.errors?has_content]
/*ERR : Bind_pinCtrl() returns errors. The DTS may be incomplete. Reason:
${pinCtrlBindedElmtsListRes.errors}*/
				[@mtrace  traces=pinCtrlBindedElmtsListRes.traces /]
			[/#if]
		[/#if]

		[#--bind Node common elmts--]
		[#local systemPropertiesElmtsList = []]
		[#local statusPropertiesElmtsList = []]
		[#local usersectionElmtsList = []]
		[#if typeName=="Node"]

			[#--Properties--]
			[#--FIX: if device DMType=IP => mandatory--]
			[#local systemPropertiesElmtsListRes = Bind_socNodeSystemProperties(pParentElmt)]
			[#local systemPropertiesElmtsList = systemPropertiesElmtsListRes.resElmtsList]
			[#if systemPropertiesElmtsListRes.errors?has_content]
/*ERR : DTBinding_bindBody() returns errors. The DTS may be incomplete. Reason:
${systemPropertiesElmtsListRes.errors}*/
				[@mtrace traces=systemPropertiesElmtsListRes.traces /]
			[/#if]

			[#--Add status as being the last property.
			Having no status is possible (cf HW sub-part)--]
			[#if srvcmx_isStatusToGenerate_inElmt(pParentElmt)]
				[#local statusPropertiesElmtsListRes = Bind_nodeStatusProperties(pParentElmt)]
				[#local statusPropertiesElmtsList = statusPropertiesElmtsListRes.resElmtsList]
			[/#if]

			[#--Add UserSection--]
			[#if areUserSectionsAllowed]
				[#local usersectionElmtsList = usersectionElmtsList + [DTBindedDtsElmtDM_new_UserSection_FromParent(pParentElmt)] ]
			[/#if]
		[/#if]


		[#--Apply re-ordering rules--]
		[#if pOrdering]
			[#-- systProp - pinCtrl - other elmts - Nodes (nodes in alphabetic order) --]
			[#--FIX: would be better to sort by localNodeId (after wrapping)--]
			[#local outElmtsList = systemPropertiesElmtsList + pinCtrlBindedElmtsList + otherElmtsList + statusPropertiesElmtsList + usersectionElmtsList + NodeElmtsList?sort_by("name")]
		[#else]
			[#-- keep ordering excepted pinCtrl --]
			[#local outElmtsList = systemPropertiesElmtsList + pinCtrlBindedElmtsList + statusPropertiesElmtsList + usersectionElmtsList + notOrderedElmtsList]
		[/#if]

		[#--Print elmts--]
		[#local elmtIdx = 0]
		[#list outElmtsList as elmt]
			[@DTBindedDtsElmtDM_print pElmt=elmt pDtLevel=pDtLevel pElmtIdx=elmtIdx/]
			[#local elmtIdx = elmtIdx+1]
		[/#list]
[/#compress]
[/#macro]


[#--Print single elmt.--]
[#--FIX: use coding rules for local var (cf include)--]
[#macro DTBindedDtsElmtDM_print  pElmt pDtLevel pElmtIdx]
[#local module = "DTBindedDtsElmtDM_print"]
[#compress]

	[#--get tabulations level--]
	[#local dtsTAB = dts_get_tabs(pDtLevel).TABN]

	[#--Check DTBindingElmt level --]
	[#------------------------------]
	[#local printAllowed = true]

		[#--mandatory attributes--]
	[#if pElmt.typeName?? && pElmt.typeName?has_content]
		[#local typeName = pElmt.typeName]
	[#else]
		[@mlog  logMod=module logType="ERR" logMsg="Undefined typeName" varsMap={"pElmt.typeName":pElmt.typeName!} /]
		[#local typeName = ""]
		[#local printAllowed = false]
	[/#if]

	[#--optional attributes--]
	[#local name = pElmt.name!]
	[#local parent = pElmt.parent!]

	[#--FIX: check other attributes: ex.: typeName--]

	[#--All checks are not needed for any DTBindedDtsElmtDM types--]
	[#if typeName=="Node"]
		[#if pElmt.bindedHwName?? && pElmt.bindedHwName?has_content]
			[#local bindedHwName = pElmt.bindedHwName]
		[#else]
			[@mlog  logMod=module logType="ERR" logMsg="Undefined bindedHwName" varsMap={"pElmt.typeName":pElmt.typeName!} /]
			[#local printAllowed = false]
		[/#if]

		[#if pElmt.fwName?? && pElmt.fwName?has_content]
			[#local fwName = pElmt.fwName]
		[#else]
			[@mlog  logMod=module logType="ERR" logMsg="Undefined fwName" varsMap={"bindedHwName":pElmt.bindedHwName!} /]
			[#local printAllowed = false]
		[/#if]

		[#--optional attributes--]

	[/#if]


	[#--Check pElmt--]
	[#--------------------]
		[#--mandatory attributes--]
		[#--FIX: TBD --]

		[#--optional attributes--]
		[#-- FIX: TBD --]

[/#compress]
	[#-- Process all elmts in the list order --]
	[#if printAllowed]
		[#local elmtsList = pElmt.elmtsList!]	[#-- "!" means optional --]

		[#-- Begin of current elmt --]
		[#local inspectAndPrint = false] [#-- Forbid inspection of subElmts in case of error --]
		[#-- FIX: to see if "inspectAndPrint" can not be removed --]
		[#switch typeName]
			[#case "Node"]
				[#--Print--]
				[#if (bindedHwName?has_content)&&(fwName?has_content)]
					[#--Mandatory attributes--]
					[#local isNodeOverloading = pElmt.isNodeOverloading]
					[#--Optional attributes--]
					[#local label = pElmt.nodeLabel!]
					[#local nodeUnitAddress = pElmt.nodeUnitAddress!]
[#t]
					[#--Print--]
					[#local inspectAndPrint = true]

					[#if isNodeOverloading]
#n${dtsTAB}&${name}{
					[#else]
#n${dtsTAB}[#if label?has_content]${label}:[/#if]${name}[#if nodeUnitAddress?has_content]@${nodeUnitAddress}[/#if]{
					[/#if]
				[#else]
					[@mlog  logMod=module logType="ERR" logMsg="Node: Parameters error" varsMap={"bindedHwName":bindedHwName!} /]
				[/#if]
[#t]
			[#break]
[#t]
			[#case "Property"]
				[#--FIX: prop def can be also from FTL Api => increase check level (exple: check any param of the Api above)--]
				[#--Mandatory attributes--]
				[#--Optional attributes--]
[#t]
				[#--Print--]
				[#if name?has_content]
					[#local inspectAndPrint = true]
					[#if elmtsList?has_content]
${dtsTAB}${name} = [#t]
					[#else]
${dtsTAB}${name}[#t]
					[/#if]
				[#else]
					[#--FIX: review msg printed--]
					[@mlog  logMod=module logType="ERR" logMsg="Property: undefined property name" varsMap={"bindedHwName":bindedHwName!} /]
				[/#if]
			[#break]
[#t]
			[#case "ValueItem"]
				[#--Mandatory attributes--]
				[#--Optional attributes--]
				[#local format = pElmt.valueFormat!]
[#t]
				[#--Print--]
				[#if elmtsList?has_content]
					[#local inspectAndPrint = true]
					[#--FIX: improve err mngt: Today won't compile. Strategy is to always compile and add corrections is US--]
[#local propValueItemSeparator = ""]
					[#if pElmtIdx > 0]
[#local propValueItemSeparator = ", "]
					[/#if]
					[#if (format=="string")]
						[#local propValueItemStart = "\""]
						[#local propValueItemEnd = "\""]
					[#elseif (format=="integer")]
						[#local propValueItemStart = "<"]
						[#local propValueItemEnd = ">"]
					[#elseif (!format?has_content)]
						[#local propValueItemStart = ""]
						[#local propValueItemEnd = ""]
					[#else]
						[#local propValueItemSeparator = " "]
						[#local propValueItemStart = "/*"]
						[#local propValueItemEnd = "*/"]
						[@mlog  logMod=module logType="ERR" logMsg="unknown PropValueItem format" varsMap={"bindedHwName":bindedHwName!, "format":format!} /]
					[/#if]
${propValueItemSeparator}${propValueItemStart}[#t]
				[#else]
					[@mlog  logMod=module logType="ERR" logMsg="ValueItem w no content" varsMap={"bindedHwName":bindedHwName!} /]
				[/#if]
			[#break]
[#t]
			[#case "ArrayItem"]
				[#--Mandatory attributes--]
				[#local value = pElmt.value]
				[#--Optional attributes--]
				[#local valueType = pElmt.valueType!]
[#t]
				[#if value?has_content]
					[#local inspectAndPrint = true]
					[#if (valueType=="dec")]
						[#local possibleValueStart = ""]
					[#elseif (valueType=="hex")]
						[#local possibleValueStart = "0x"]
					[#elseif (valueType=="phandle")]
						[#local possibleValueStart = "&"]
					[#elseif (!valueType?has_content)]
						[#local possibleValueStart = ""]
					[#else]
						[#local possibleValueStart = ""]
					[#--FIX: improve err mngt: Today won't compile. Strategy is to always compile and add corrections is US--]
						[@mlog  logMod=module logType="ERR" logMsg="unknown ArrayItem type" varsMap={"bindedHwName":bindedHwName!, "valueType":valueType!} /]
					[/#if]
${possibleValueStart}${value}[#t]
				[#else]
					[@mlog  logMod=module logType="ERR" logMsg="ArrayItem w no Value" varsMap={"bindedHwName":bindedHwName!} /]
				[/#if]
			[#break]
[#t]
			[#case "Include"]
				[#if name?contains("/")]
					[#--FIX: err mngt--]
					[#local strsList = name?split("/")]
					[#local fileName = strsList[0]]
					[#local macroName = strsList[1]]
					[#include mx_dtLibsPath + mx_dtBindingsSocPath +  fileName]
					[@.vars[macroName] pDtLevel=pDtLevel /]
				[#else]
					[#include mx_dtLibsPath + mx_dtBindingsSocPath +  name]
				[/#if]
			[#break]
[#t]
			[#case "UserSection"]
[#--UserSection name generation: DO NOT CHANGE !!!--]
				[#local usName = name]
				[#if !usName?has_content]
					[#local usNameRes = srvcmx_generate_UserSectionName(parent, 0)]
					[#if !usNameRes.errors?has_content]
						[#local usName = usNameRes.name]
					[/#if]
				[/#if]
[#--UserSection name generation !!!--]

				[#if usName?has_content]
#n
${dtsTAB}/* USER CODE BEGIN ${usName} */
${dtsTAB}/* USER CODE END ${usName} */
				[#else]
${dtsTAB}/*ERR : Can not generate User-Section.*/
				[/#if]
			[#break]
[#t]
			[#default]
				[@mlog  logMod=module logType="ERR" logMsg="unknown element type" varsMap={"bindedHwName":bindedHwName!, "typeName":typeName!} /]
		[/#switch]
[#t]
[#t]
		[#-- Inspect subElmts --]
		[#if inspectAndPrint==true]
[#t]
			[#-- FIX: see perf. Do not check on each elmt--]
			[#local ordering = false]
			[#if (typeName=="Node")]
				[#local ordering = true]
			[/#if]
			[@DTBindedDtsElmtDMsList_print  pParentElmt=pElmt pElmtsList=elmtsList pDtLevel=(pDtLevel+1) pOrdering=ordering/]
[#t]
			[#-- End of current elmt --]
			[#switch typeName]
				[#case "BindingDef"]
				[#break]
[#t]
				[#case "Node"]
#n${dtsTAB}};
				[#break]
[#t]
				[#case "Property"]
;
				[#break]
[#t]
				[#case "ValueItem"]
${propValueItemEnd}[#t]
				[#break]
[#t]
				[#case "ArrayItem"]
[#nt] [#t]
				[#break]
[#t]
				[#case "PossibleValue"]
				[#break]
[#t]
				[#case "Include"]
				[#break]
[#t]
				[#case "UserSection"]
				[#break]
[#t]
				[#default]
					[@mlog  logMod=module logType="ERR" logMsg="unknown element type" varsMap={"bindedHwName":bindedHwName!, "typeName":typeName!} /]
			[/#switch]
		[/#if]
[#t]
	[#else]
		[@mlog  logMod=module logType="ERR" logMsg="DTBindedDtsElmtDM parameters error" varsMap={"bindedHwName":bindedHwName!} /]
	[/#if]
[#compress]

[#-- macro end --]
[/#compress]
[/#macro]


[#--------------------------------------------------------------------------------------------------------------------------------]
[#-- Board DTS generation --]
[#--------------------------------------------------------------------------------------------------------------------------------]
[/#compress]
[#if global_allowBinding]
	[#if mxDtDM.dts_template?? && mxDtDM.dts_template?has_content]
		[#include mx_dtLibsPath + mx_dtBindingsBoardPath + mxDtDM.dts_template]
	[#else]
		[@mlog  logMod="DTSGen" logType="ERR" logMsg="unknown template" varsMap={"mxDtDM.dts_template":mxDtDM.dts_template!} /]
	[/#if]
[/#if]

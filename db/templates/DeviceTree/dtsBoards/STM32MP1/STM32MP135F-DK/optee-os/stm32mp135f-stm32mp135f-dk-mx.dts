/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc.h>
#include <dt-bindings/clock/stm32mp13-clksrc.h>
#include <dt-bindings/soc/stm32mp13-etzpc.h>
#include "stm32mp135.dtsi"
#include "stm32mp13xf.dtsi"

/* USER CODE BEGIN includes */
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/gpio/stm32mp_gpio.h>
#include <dt-bindings/mfd/st,stpmic1.h>
#include <dt-bindings/power/stm32mp1-power.h>
#include <dt-bindings/regulator/st,stm32mp13-regulator.h>
#include <dt-bindings/soc/stm32mp-provisioning.h>
#include <dt-bindings/soc/stm32mp-tzc400-macro.h>
#include <dt-bindings/soc/stm32mp13-tzc400.h>
#include <dt-bindings/tamper/st,stm32mp13-tamp.h>
#include "stm32mp13-pinctrl.dtsi"
/* USER CODE END includes */

/{
	model = "STMicroelectronics STM32MP135F-DK STM32CubeMX board - openstlinux-6.1-yocto-mickledore-mpu-v24.06.26";
	compatible = "st,stm32mp135f-board_135f-dk-mx", "st,stm32mp135f-dk", "st,stm32mp135";

	/* USER CODE BEGIN root */

	aliases{
		serial0 = &uart4;
		serial1 = &usart1;
	};

	chosen{
		stdout-path = "serial0:115200n8";
	};

	magic_wol:magic_wol{
		compatible = "st,stm32mp1-pwr-irq-user";
		wakeup-parent = <&pwr_irq>;
		st,wakeup-pin-number = <2>;
		status = "okay";
	};

	shadow-prov{
		compatible = "st,provisioning";

		hw2_prov{
			nvmem-cells = <&hw2_otp>;
			st,shadow-value = <0x000001E0>;
			st,shadow-lock = <STICKY_LOCK_SR>;
		};
	};

	typec_wakeup:typec_wakeup{
		compatible = "st,stm32mp1-pwr-irq-user";
		wakeup-parent = <&pwr_irq>;
		st,wakeup-pin-number = <5>;
		st,notif-it-id = <1>;
		status = "okay";
	};

	vin:vin{
		compatible = "regulator-fixed";
		regulator-name = "vin";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-always-on;
	};

	v3v3_ao:v3v3_ao{
		compatible = "regulator-fixed";
		regulator-name = "v3v3_ao";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};
	/* USER CODE END root */

	memory@c0000000{
		device_type = "memory";
		reg = <0xc0000000 0x20000000>;
	};

	reserved-memory{
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		/* USER CODE BEGIN reserved-memory */

		optee_framebuffer:optee-framebuffer@dd000000{
			reg = <0xdd000000 0x1000000>;
			st,protreg = <TZC_REGION_S_RDWR 0>;
		};
		/* USER CODE END reserved-memory */
	};

	clocks{

		clk_hsi:clk-hsi{
			clock-frequency = <64000000>;
		};

		clk_lse:clk-lse{
			clock-frequency = <32768>;
			st,drive = < LSEDRV_MEDIUM_HIGH >;
		};

		clk_hse:clk-hse{
			clock-frequency = <24000000>;
		};

		clk_i2sin:clk-i2sin{
			status = "disabled";
		};
	};
};

&pinctrl {

	i2c4_pins_mx:i2c4_mx-0{

		pins{
			pinmux = <STM32_PINMUX('B', 9, AF6)>,
					<STM32_PINMUX('E', 15, AF6)>;
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	ltdc_pins_mx:ltdc_mx-0{

		pins{
			pinmux = <STM32_PINMUX('A', 15, AF11)>,
					<STM32_PINMUX('B', 6, AF7)>,
					<STM32_PINMUX('B', 12, AF13)>,
					<STM32_PINMUX('C', 6, AF14)>,
					<STM32_PINMUX('C', 7, AF14)>,
					<STM32_PINMUX('D', 5, AF14)>,
					<STM32_PINMUX('D', 9, AF13)>,
					<STM32_PINMUX('D', 10, AF14)>,
					<STM32_PINMUX('D', 14, AF14)>,
					<STM32_PINMUX('E', 0, AF14)>,
					<STM32_PINMUX('E', 7, AF14)>,
					<STM32_PINMUX('E', 9, AF14)>,
					<STM32_PINMUX('E', 13, AF14)>,
					<STM32_PINMUX('F', 1, AF13)>,
					<STM32_PINMUX('F', 2, AF14)>,
					<STM32_PINMUX('F', 3, AF14)>,
					<STM32_PINMUX('G', 0, AF14)>,
					<STM32_PINMUX('G', 4, AF11)>,
					<STM32_PINMUX('G', 7, AF14)>,
					<STM32_PINMUX('H', 9, AF11)>,
					<STM32_PINMUX('H', 13, AF14)>,
					<STM32_PINMUX('H', 14, AF11)>;
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	rcc_pins_mx:rcc_mx-0{

		pins{
			pinmux = <STM32_PINMUX('D', 7, AF0)>;
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	rtc_pins_mx:rtc_mx-0{

		pins{
			pinmux = <STM32_PINMUX('I', 1, ANALOG)>;
		};
	};
	
	
	/* USER CODE BEGIN pinctrl */
	/* USER CODE END pinctrl */
};

&adc_2 {
	status = "okay";

	/* USER CODE BEGIN adc_2 */
	vdda-supply = <&vdd_adc>;
	vref-supply = <&vdd_adc>;

	adc2:adc@0{
		status = "okay";

		channel@15{
			reg = <15>;
			label = "vbat";
		};
	};
	/* USER CODE END adc_2 */
};

&bsec {
	status = "okay";

	/* USER CODE BEGIN bsec */

	board_id:board_id@f0{
		reg = <0xf0 0x4>;
		st,non-secure-otp;
	};
	/* USER CODE END bsec */
};

&etzpc {
	status = "okay";
	st,decprot = <
	
	DECPROT(STM32MP1_ETZPC_ADC1_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_CRYP_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_DCMIPP_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_ETH1_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_ETH2_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_I2C5_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_SDMMC1_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_SDMMC2_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_USART2_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_OTG_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_USBPHYCTRL_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
	
	DECPROT(STM32MP1_ETZPC_DDRCTRLPHY_ID, DECPROT_NS_R_S_W, DECPROT_LOCK)
	
	DECPROT(STM32MP1_ETZPC_LTDC_ID, DECPROT_S_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_ADC2_ID, DECPROT_S_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_HASH_ID, DECPROT_S_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_I2C4_ID, DECPROT_S_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_IWDG1_ID, DECPROT_S_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_LPTIM3_ID, DECPROT_S_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_PKA_ID, DECPROT_S_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_RNG_ID, DECPROT_S_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_SAES_ID, DECPROT_S_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_TIM12_ID, DECPROT_S_RW, DECPROT_UNLOCK)
	DECPROT(STM32MP1_ETZPC_STGENC_ID, DECPROT_S_RW, DECPROT_UNLOCK)

	

	
	
	>;
};

&hash {
	status = "okay";
};

&i2c4 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c4_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c4 */
	i2c-scl-rising-time-ns = <185>;
	i2c-scl-falling-time-ns = <20>;
	clock-frequency = <400000>;

	pmic:stpmic@33{
		compatible = "st,stpmic1";
		reg = <0x33>;
		status = "okay";
		wakeup-parent = <&pwr_irq>;
		st,wakeup-pin-number = <1>;
		st,pmic-it-id = <IT_PONKEY_F IT_PONKEY_R>;
		st,notif-it-id = <0 2>;

		regulators{
			compatible = "st,stpmic1-regulators";
			buck1-supply = <&vin>;
			buck2-supply = <&vin>;
			buck3-supply = <&vin>;
			buck4-supply = <&vin>;
			ldo1-supply = <&vin>;
			ldo4-supply = <&vin>;
			ldo5-supply = <&vin>;
			ldo6-supply = <&vin>;
			vref_ddr-supply = <&vin>;
			pwr_sw1-supply = <&bst_out>;
			pwr_sw2-supply = <&v3v3_ao>;

			vddcpu:buck1{
				regulator-name = "vddcpu";
				regulator-min-microvolt = <1250000>;
				regulator-max-microvolt = <1350000>;
				regulator-always-on;
				regulator-over-current-protection;

				lp-stop{
					regulator-suspend-microvolt = <1250000>;
				};

				lplv-stop{
					regulator-suspend-microvolt = <900000>;
				};

				lplv-stop2{
					regulator-off-in-suspend;
				};

				standby-ddr-sr{
					regulator-off-in-suspend;
				};

				standby-ddr-off{
					regulator-off-in-suspend;
				};
			};

			vdd_ddr:buck2{
				regulator-name = "vdd_ddr";
				regulator-min-microvolt = <1350000>;
				regulator-max-microvolt = <1350000>;
				regulator-always-on;
				regulator-over-current-protection;

				standby-ddr-off{
					regulator-off-in-suspend;
				};
			};

			vdd:buck3{
				regulator-name = "vdd";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-always-on;
				st,mask-reset;
				regulator-over-current-protection;
			};

			vddcore:buck4{
				regulator-name = "vddcore";
				regulator-min-microvolt = <1250000>;
				regulator-max-microvolt = <1250000>;
				regulator-always-on;
				regulator-over-current-protection;

				lplv-stop{
					regulator-suspend-microvolt = <900000>;
				};

				lplv-stop2{
					regulator-suspend-microvolt = <900000>;
				};

				standby-ddr-sr{
					regulator-off-in-suspend;
				};

				standby-ddr-off{
					regulator-off-in-suspend;
				};
			};

			vdd_adc:ldo1{
				regulator-name = "vdd_adc";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;

				standby-ddr-sr{
					regulator-off-in-suspend;
				};

				standby-ddr-off{
					regulator-off-in-suspend;
				};
			};

			unused1:ldo2{
				regulator-name = "ldo2";
			};

			unused2:ldo3{
				regulator-name = "ldo3";
			};

			vdd_usb:ldo4{
				regulator-name = "vdd_usb";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;

				standby-ddr-sr{
					regulator-off-in-suspend;
				};

				standby-ddr-off{
					regulator-off-in-suspend;
				};
			};

			vdd_sd:ldo5{
				regulator-name = "vdd_sd";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				st,regulator-warm-boot-on;

				standby-ddr-sr{
					regulator-off-in-suspend;
				};

				standby-ddr-off{
					regulator-off-in-suspend;
				};
			};

			v1v8_periph:ldo6{
				regulator-name = "v1v8_periph";
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <1800000>;

				standby-ddr-sr{
					regulator-off-in-suspend;
				};

				standby-ddr-off{
					regulator-off-in-suspend;
				};
			};

			vref_ddr:vref_ddr{
				regulator-name = "vref_ddr";
				regulator-always-on;

				standby-ddr-sr{
					regulator-off-in-suspend;
				};

				standby-ddr-off{
					regulator-off-in-suspend;
				};
			};

			bst_out:boost{
				regulator-name = "bst_out";
			};

			v3v3_sw:pwr_sw2{
				regulator-name = "v3v3_sw";
				regulator-active-discharge = <1>;
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
			};
		};
	};
	/* USER CODE END i2c4 */
};

&iwdg1 {
	status = "okay";

	/* USER CODE BEGIN iwdg1 */
	timeout-sec = <32>;
	/* USER CODE END iwdg1 */
};

&lptimer3 {
	status = "okay";

	/* USER CODE BEGIN lptimer3 */

	counter{
		status = "okay";
	};
	/* USER CODE END lptimer3 */
};

&ltdc {
	pinctrl-names = "default";
	pinctrl-0 = <&ltdc_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN ltdc */
	access-controllers-conf-nsec = <&etzpc DECPROT(STM32MP1_ETZPC_LTDC_ID, DECPROT_NS_RW, DECPROT_UNLOCK)>,
			<&gpioa (GPIO_STM32_NSEC | TZPROT(15))>,
			<&gpiob (GPIO_STM32_NSEC | TZPROT(6) | TZPROT(12))>,
			<&gpioc (GPIO_STM32_NSEC | TZPROT(6) | TZPROT(7))>,
			<&gpiod (GPIO_STM32_NSEC | TZPROT(5) | TZPROT(9) | TZPROT(10) | TZPROT(14))>,
			<&gpioe (GPIO_STM32_NSEC | TZPROT(0) | TZPROT(7) | TZPROT(9) | TZPROT(13))>,
			<&gpiof (GPIO_STM32_NSEC | TZPROT(1) | TZPROT(2) | TZPROT(3))>,
			<&gpiog (GPIO_STM32_NSEC | TZPROT(0) | TZPROT(4) | TZPROT(7))>,
			<&gpioh (GPIO_STM32_NSEC | TZPROT(9) | TZPROT(13) | TZPROT(14))>;
	access-controllers-conf-sec = <&etzpc DECPROT(STM32MP1_ETZPC_LTDC_ID, DECPROT_NS_R_S_W, DECPROT_UNLOCK)>,
			<&gpioa (TZPROT(15))>,
			<&gpiob (TZPROT(6) | TZPROT(12))>,
			<&gpioc (TZPROT(6) | TZPROT(7))>,
			<&gpiod (TZPROT(5) | TZPROT(9) | TZPROT(10) | TZPROT(14))>,
			<&gpioe (TZPROT(0) | TZPROT(7) | TZPROT(9) | TZPROT(13))>,
			<&gpiof (TZPROT(1) | TZPROT(2) | TZPROT(3))>,
			<&gpiog (TZPROT(0) | TZPROT(4) | TZPROT(7))>,
			<&gpioh (TZPROT(9) | TZPROT(13) | TZPROT(14))>;
	/* USER CODE END ltdc */
};

&pka {
	status = "okay";
};

&pwr_regulators {
	status = "okay";

	/* USER CODE BEGIN pwr_regulators */
	system_suspend_supported_soc_modes = <
		STM32_PM_CSLEEP_RUN
		STM32_PM_CSTOP_ALLOW_LP_STOP
		STM32_PM_CSTOP_ALLOW_LPLV_STOP
		STM32_PM_CSTOP_ALLOW_LPLV_STOP2
		STM32_PM_CSTOP_ALLOW_STANDBY_DDR_SR
	>;
	system_off_soc_mode = <STM32_PM_SHUTDOWN>;
	vdd-supply = <&vdd>;
	vdd_3v3_usbfs-supply = <&vdd_usb>;
	/* USER CODE END pwr_regulators */
};

&rcc {
	status = "okay";
	clocks = <&clk_hse>, <&clk_hsi>, <&clk_lse>, <&clk_lsi>, <&clk_csi>;
	clock-names = "clk-hse", "clk-hsi", "clk-lse", "clk-lsi", "clk-csi";
	st,clksrc = <
		CLK_MPU_PLL1P
		CLK_AXI_PLL2P
		CLK_MLAHBS_PLL3
		CLK_RTC_LSE
		CLK_MCO1_HSE
		CLK_MCO2_DISABLED
		CLK_CKPER_HSE
		CLK_ETH1_PLL4P
		CLK_ETH2_PLL4P
		CLK_SDMMC1_PLL4P
		CLK_SDMMC2_PLL4P
		CLK_STGEN_HSE
		CLK_USBPHY_HSE
		CLK_I2C4_HSI
		CLK_USBO_USBPHY
		CLK_ADC1_CKPER
		CLK_ADC2_CKPER
		CLK_I2C12_HSI
		CLK_I2C5_HSI
		CLK_UART2_HSI
		CLK_UART4_HSI
		CLK_RNG1_PLL4R
		CLK_SAES_AXI
		CLK_DCMIPP_PLL2Q
		CLK_LPTIM3_PCLK3
	>;
	st,clkdiv = <
		DIV(DIV_MPU, 1)
		DIV(DIV_AXI, 0)
		DIV(DIV_MLAHB, 0)
		DIV(DIV_APB1, 1)
		DIV(DIV_APB2, 1)
		DIV(DIV_APB3, 1)
		DIV(DIV_APB4, 1)
		DIV(DIV_APB5, 2)
		DIV(DIV_APB6, 1)
		DIV(DIV_RTC, 0)
		DIV(DIV_MCO1, 0)
		DIV(DIV_MCO2, 0)
	>;

	st,pll_vco{

		/* USER CODE BEGIN rcc_st-pll_vco */

		pll1_vco_2000Mhz:pll1-vco-2000Mhz{
			src = <CLK_PLL12_HSE>;
			divmn = <1 82>;
			frac = <0xAAA>;
		};

		pll1_vco_1800Mhz:pll1-vco-1800Mhz{
			src = <CLK_PLL12_HSE>;
			divmn = <1 74>;
			frac = <0>;
		};
		/* USER CODE END rcc_st-pll_vco */

		pll1_vco_1300Mhz:pll1-vco-1300Mhz{
			src = < CLK_PLL12_HSE >;
			divmn = < 2 80 >;
			frac = < 0x800 >;
		};

		pll2_vco_1066Mhz:pll2-vco-1066Mhz{
			src = < CLK_PLL12_HSE >;
			divmn = < 2 65 >;
			frac = < 0x1400 >;
		};

		pll3_vco_417Mhz:pll3-vco-417Mhz{
			src = < CLK_PLL3_HSE >;
			divmn = < 1 33 >;
			frac = < 0x1a04 >;
		};

		pll4_vco_600Mhz:pll4-vco-600Mhz{
			src = < CLK_PLL4_HSE >;
			divmn = < 1 49 >;
		};
	};

	pll1:st,pll@0{
		compatible = "st,stm32mp1-pll";
		reg = <0>;
		st,pll = < &pll1_cfg1 >;

		/* USER CODE BEGIN pll1 */

		pll1_cfg2:pll1_cfg2{
			st,pll_vco = <&pll1_vco_2000Mhz>;
			st,pll_div_pqr = <0 1 1>;
		};

		pll1_cfg3:pll1_cfg3{
			st,pll_vco = <&pll1_vco_1800Mhz>;
			st,pll_div_pqr = <0 1 1>;
		};
		/* USER CODE END pll1 */

		pll1_cfg1:pll1_cfg1{
			st,pll_vco = < &pll1_vco_1300Mhz >;
			st,pll_div_pqr = < 0 1 1 >;
		};
	};

	pll2:st,pll@1{
		compatible = "st,stm32mp1-pll";
		reg = <1>;
		st,pll = < &pll2_cfg1 >;

		pll2_cfg1:pll2_cfg1{
			st,pll_vco = < &pll2_vco_1066Mhz >;
			st,pll_div_pqr = < 1 1 0 >;
		};
	};

	pll3:st,pll@2{
		compatible = "st,stm32mp1-pll";
		reg = <2>;
		st,pll = < &pll3_cfg1 >;

		pll3_cfg1:pll3_cfg1{
			st,pll_vco = < &pll3_vco_417Mhz >;
			st,pll_div_pqr = < 1 16 36 >;
		};
	};

	pll4:st,pll@3{
		compatible = "st,stm32mp1-pll";
		reg = <3>;
		st,pll = < &pll4_cfg1 >;

		pll4_cfg1:pll4_cfg1{
			st,pll_vco = < &pll4_vco_600Mhz >;
			st,pll_div_pqr = < 11 59 11 >;
		};
	};

	st,clk_opp{

		st,ck_mpu{

			cfg_1{
				hz = < 650000000 >;
				st,clksrc = < CLK_MPU_PLL1P >;
				st,pll = < &pll1_cfg1 >;
			};

			/* USER CODE BEGIN rcc_st-ck_mpu */
			/* USER CODE END rcc_st-ck_mpu */
		};

		st,ck_axi{

			cfg_1{
				hz = < 266500000 >;
				st,clksrc = < CLK_AXI_PLL2P >;
				st,clkdiv = < DIV(DIV_AXI, 0) >;
				st,pll = < &pll2_cfg1 >;
			};
		};

		st,ck_mlahbs{

			cfg_1{
				hz = < 208877929 >;
				st,clksrc = < CLK_MLAHBS_PLL3 >;
				st,clkdiv = < DIV(DIV_MLAHB, 0) >;
				st,pll = < &pll3_cfg1 >;
			};
		};
	};

	st,rcc{
		pinctrl-names = "default";
		pinctrl-0 = <&rcc_pins_mx>;
		status = "okay";

		/* USER CODE BEGIN rcc_st-rcc */
		compatible = "st,rcc";
		/* USER CODE END rcc_st-rcc */
	};
};

&rng {
	status = "okay";

	/* USER CODE BEGIN rng */
	clock-error-detect;
	/* USER CODE END rng */
};

&rtc {
	pinctrl-names = "default";
	pinctrl-0 = <&rtc_pins_mx>;
	status = "okay";
};

&saes {
	status = "okay";
};

&tamp {
	status = "okay";

	/* USER CODE BEGIN tamp */
	st,tamp-passive-nb-sample = <4>;
	st,tamp-passive-sample-clk-div = <16384>;
	wakeup-source;
	wakeup-parent = <&exti>;

	tamp-button{
		tamper-gpios = <&gpioa 6 0>;
		st,tamp-mode = <TAMPER_CONFIRMED_MODE>;
		st,tamp-id = <2>;
		status = "okay";
	};

	tamp-active{
		tamper-gpios = <&gpioc 0 0>, <&gpioi 0 0>;
		st,tamp-mode = <TAMPER_CONFIRMED_MODE>;
		st,tamp-id = <3>, <1>;
		status = "disabled";
	};
	/* USER CODE END tamp */
};

&timers12 {
	status = "okay";

	/* USER CODE BEGIN timers12 */

	counter{
		status = "okay";
	};
	/* USER CODE END timers12 */
};

/* USER CODE BEGIN addons */

&cpu0 {
	cpu-supply = <&vddcpu>;
};

&gpioa {
	st,protreg = < (TZPROT(6)) >;
};

&gpiob {
	st,protreg = < (TZPROT(9)) >;
};

&gpiod {
	st,protreg = < (TZPROT(7)) >;
};

&gpioe {
	st,protreg = < (TZPROT(15)) >;
};

&gpiof {
	st,protreg = < (TZPROT(8)) >;
};

&gpioi {
	st,protreg = < (TZPROT(2) | TZPROT(3)) >;
};

&hse_monitor {
	status = "okay";
};

&oem_enc_key {
	st,non-secure-otp-provisioning;
};

&osc_calibration {

	csi-calibration{
		status = "okay";
	};

	hsi-calibration{
		status = "okay";
	};
};

&pwr_irq {
	status = "okay";
	wakeup-gpios = <&gpiof 8 GPIO_ACTIVE_HIGH>, <&gpioi 3 GPIO_ACTIVE_HIGH>, <0>, <0>, <&gpioi 2 GPIO_PULL_UP>, <0>;
};

&scmi_regu {

	voltd-vddcpu{
		reg = <VOLTD_SCMI_STPMIC1_BUCK1>;
		voltd-supply = <&vddcpu>;
	};

	voltd-vdd{
		reg = <VOLTD_SCMI_STPMIC1_BUCK3>;
		voltd-supply = <&vdd>;
	};

	voltd-vddcore{
		reg = <VOLTD_SCMI_STPMIC1_BUCK4>;
		voltd-supply = <&vddcore>;
	};

	voltd-vdd-adc{
		reg = <VOLTD_SCMI_STPMIC1_LDO1>;
		voltd-supply = <&vdd_adc>;
	};

	voltd-vdd-usb{
		reg = <VOLTD_SCMI_STPMIC1_LDO4>;
		voltd-supply = <&vdd_usb>;
	};

	voltd-vdd-sd{
		reg = <VOLTD_SCMI_STPMIC1_LDO5>;
		voltd-supply = <&vdd_sd>;
	};

	voltd-v1v8-periph{
		reg = <VOLTD_SCMI_STPMIC1_LDO6>;
		voltd-supply = <&v1v8_periph>;
	};

	voltd-v3v3-sw{
		reg = <VOLTD_SCMI_STPMIC1_PWR_SW2>;
		voltd-supply = <&v3v3_sw>;
	};
};

&sdmmc1_io {
	vddsd1-supply = <&vdd>;
};

&sdmmc2_io {
	vddsd2-supply = <&vdd>;
};

&tzc400 {
	memory-region = <&optee_framebuffer>;
};

&uart4 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart4_pins_a>;
	status = "okay";
};
/* USER CODE END addons */

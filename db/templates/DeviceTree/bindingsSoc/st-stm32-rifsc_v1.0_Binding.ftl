[#ftl]
[#--RIFPROT(rifid, sem_list, lock, sec, priv, scid, sem_en, cfen)--]
[#macro bind_RISUP	pElmt pDtLevel]
[#local Tabulation=dts_get_tabs(pDtLevel)]
[#local TABnode = Tabulation.TABN]
[#local TABprop = Tabulation.TABP]
[#local semListUIIndex=0]
[#local secUIIndex=semListUIIndex+1]
[#local privUIIndex=secUIIndex+1]
[#local lockUIIndex=privUIIndex+1]
[#assign OmmanagerProp=["OCTOSPI1","OCTOSPI2","OCTOSPIM","OTFDEC1","OTFDEC2"]]
${TABnode}st,protreg = <
[#list mx_RIF_Params.entrySet() as RIF_Params]
	[#if (RIF_Params.key)?? && RIF_Params.key == "RISUP"]
		[#local RISUP = RIF_Params.value]
		[#list RISUP.entrySet() as RISUP_Params]
			[#-- Columns Formatting Begin --]
			[#compress]
		    [#local RISUP_Formatted = RISUP_Params.value[1..]]	[#--remove ID from the list, not used in code gen ("1" represents used List start index ) --]
			[#-- RISUP_Formatted= CID_list~sem_list, sec, priv, lock --]
			[#local isCIDmatchesInt = RISUP_Formatted[semListUIIndex]?matches("[123456789]")]
			[#local isCIDZero = RISUP_Formatted[semListUIIndex]=="0"]

			[#-- Adding scid --]
			[#if isCIDmatchesInt]
            	[#local  RISUP_Formatted =  RISUP_Formatted+["RIF_CID"+RISUP_Formatted[semListUIIndex]]]
			[#else]
				[#local  RISUP_Formatted =  RISUP_Formatted+["RIF_UNUSED"]]
			[/#if]

			[#-- Formatting sem_list --]
			[#if isCIDZero]
				[#local RISUP_Formatted=["EMPTY_SEMWL"] + RISUP_Formatted[secUIIndex..]]
			[#elseif RISUP_Formatted[semListUIIndex]== "-"|| isCIDmatchesInt]
				[#local RISUP_Formatted=["RIF_UNUSED"] + RISUP_Formatted[secUIIndex..]]
			[#elseif RISUP_Formatted[semListUIIndex]?contains("&")]
				[#local CID = ""]
				[#list RISUP_Formatted[semListUIIndex]?split("&") as CIDx]
           			[#local CID =CID + "RIF_CID"+ CIDx +"_BF|"]
				[/#list]
				[#local CID =CID?remove_ending("|")]
			    [#local RISUP_Formatted =  [CID] + RISUP_Formatted[secUIIndex..]]
			[/#if]

			[#-- Formatting sec --]
			[#if isCIDZero]
				[#local RISUP_Formatted = [RISUP_Formatted[secUIIndex-1]] + ["RIF_NSEC"] + RISUP_Formatted[(secUIIndex+1)..]]
			[#else]
				[#local RISUP_Formatted = [RISUP_Formatted[secUIIndex-1]] + [(RISUP_Formatted[secUIIndex]=="true")?then("RIF_SEC","RIF_NSEC")] + RISUP_Formatted[(secUIIndex+1)..]]
			[/#if]
			[#-- Formatting priv --]
			[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..(privUIIndex-1)] + [(RISUP_Formatted[privUIIndex]== "true")?then("RIF_PRIV","RIF_NPRIV")] + RISUP_Formatted[(privUIIndex+1)..]]

			[#-- Formatting lock --]
			[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..(lockUIIndex-1)] + [(RISUP_Formatted[lockUIIndex]== "true")?then("RIF_LOCK","RIF_UNLOCK")] + RISUP_Formatted[(lockUIIndex+1)..]]

			[#-- Adding sem_en --]
			[#if isCIDZero]
				[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..4] + [(RISUP_Formatted[semListUIIndex]== "EMPTY_SEMWL")?then("RIF_SEM_EN","RIF_SEM_DIS")] ]
			[#else]
				[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..4] + [(RISUP_Formatted[semListUIIndex]== "RIF_UNUSED")?then("RIF_SEM_DIS","RIF_SEM_EN")] ]
			[/#if]
			[#-- Adding cfen --]
			[#if isCIDZero ||(RISUP_Formatted[5] == "RIF_SEM_EN")||((RISUP_Formatted[5] == "RIF_SEM_DIS")&&(RISUP_Formatted[4]?matches("RIF_CID\\d")))]
				[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..5] + ["RIF_CFEN"] ]
			[#elseif (RISUP_Formatted[semListUIIndex]== "RIF_UNUSED")&&(RISUP_Formatted[4]=="RIF_UNUSED")]
				[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..5] + ["RIF_CFDIS"] ]
			[/#if]

			[#-- swapping lock, sec, priv  from RIFPROT(rifid, sem_list, "sec", "priv", "lock", scid, sem_en, cfen) to RIFPROT(rifid, sem_list, "lock", "sec", "priv", scid, sem_en, cfen)  --]
			[#local RISUP_Formatted = [RISUP_Formatted[semListUIIndex]] +[RISUP_Formatted[lockUIIndex]] +[RISUP_Formatted[secUIIndex]] +[RISUP_Formatted[privUIIndex]] +RISUP_Formatted[4..]]

			[#-- Columns Formatting END--]
			[/#compress]
			[#--displaying RIFPROT macro --]
			[#local RISUP_values =""]
			[#list RISUP_Formatted as RISUP_Params_values]
            		[#if RISUP_Params_values?has_next]
 						[#local RISUP_values += RISUP_Params_values + ", "]
 					[#else]
  						[#local RISUP_values += RISUP_Params_values]
  					[/#if]
			[/#list]
[#if !OmmanagerProp?seq_contains(RISUP_Params.key)]
${TABprop}RIFPROT(STM32MP25_RIFSC_${RISUP_Params.key}_ID, ${RISUP_values})
[/#if]
		[/#list]
	[/#if]
[/#list]
${TABnode}>;
[/#macro]

[#macro bind_RIMU pElmt pDtLevel]
[#local Tabulation=dts_get_tabs(pDtLevel)]
[#local TABnode = Tabulation.TABN]
[#local TABprop = Tabulation.TABP]
[#local RimuIdUIIndex=0]
[#local CIDUIIndex=1]
[#local MasterCIDUIIndex=2]
[#local SecureUIIndex=3]
[#local PrivilegeUIIndex=4]
${TABnode}st,rimu = <
[#list mx_RIF_Params.entrySet() as RIF_Params]
	[#if (RIF_Params.key)?? && RIF_Params.key == "RIMU"]
		[#local RIMU_Formatted = RIF_Params.value]
		[#list RIMU_Formatted.entrySet() as RIMU_Params]
${TABprop}RIMUPROT(RIMU_ID(${RIMU_Params.value[RimuIdUIIndex]}), ${(RIMU_Params.value[MasterCIDUIIndex]=="-")?then("RIF_UNUSED","RIF_CID"+ RIMU_Params.value[2])}, ${(RIMU_Params.value[SecureUIIndex]=="true")?then("RIF_SEC","RIF_NSEC")}, ${(RIMU_Params.value[PrivilegeUIIndex]=="true")?then("RIF_PRIV","RIF_NPRIV")},${(RIMU_Params.value[CIDUIIndex]=="true")?then("RIF_CIDSEL_M","RIF_CIDSEL_P")}) /* RIMU IP = ${RIMU_Params.key} */
		[/#list]
	[/#if]
[/#list]

${TABnode}>;
[/#macro]

[#macro bind_GLOCK pElmt pDtLevel]
[#local Tabulation=dts_get_tabs(pDtLevel)]
[#local TABnode = Tabulation.TABN]
[#local TABprop = Tabulation.TABP]
[#list mx_RIF_Params.entrySet() as RIF_Params]
	[#if (RIF_Params.key)?? && RIF_Params.key == "GLOCK"]
		[#list RIF_Params.value.entrySet() as GLOCK_Params]
		[#local globalLock = GLOCK_Params.value]
			[#if (GLOCK_Params.key)?? && GLOCK_Params.key == "RIMU_GLOCK"]
${TABnode}${(globalLock[0]=="true")?then("st,glocked = <RIFSC_RIMU_GLOCK>;","")}
			[/#if]
			[#--[#if (GLOCK_Params.key)?? && GLOCK_Params.key == "RISUP_GLOCK"]--]
[#--${TABnode}${(globalLock[0]=="true")?then("st,glocked = <RIFSC_RISUP_GLOCK>;","")}--]
			[#--[/#if]--]
		[/#list]
	[/#if]
[/#list]
[/#macro]

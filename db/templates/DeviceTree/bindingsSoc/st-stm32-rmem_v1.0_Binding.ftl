[#ftl]
[#macro bind_RISAB	pElmt pDtLevel]
[#local Tabulation=dts_get_tabs(pDtLevel)]
[#local TABnode = Tabulation.TABN]
[#local TABprop = Tabulation.TABP]
[#local MasterCIDsGrpofTHREE = 3]
[#local ID= 1]
[#local Name = 2]
[#local Owner = 3]
[#local Security = 4]
[#local Privilege = 5]
[#local StartAdress = 6]
[#local RegionSize = 7]
[#local CidsFiltering = 8]
[#local MasterCIDs = 9]
[#local RisubValues =[]]
[#local SupportedSRWIAD =["Risab3","Risab4","Risab5","Risab6"]]
[#local IsSRWIAD =false]
[#list mx_RIF_Params?keys?sort as RIF_Params]
	[#if (RIF_Params?starts_with("Risab"))]
	[#local RisubValues += [RIF_Params]]
	[/#if]
[/#list]
[#list RisubValues as RisabElmt]
	[#local IsSRWIAD=SupportedSRWIAD?seq_contains(RisabElmt)?then(true,false)]
	[#compress]
		[#-- Risab Column values--]
		[#local NameList = []]
		[#local OwnerList = []]
		[#local SecurityList = []]
		[#local PrivilegeList = []]
		[#local CidFilteringList = []]
		[#local RegionSizeList = []]
		[#local StartAddressList = []]
		[#local MasterCIDsList = []]
		[#local MasterCIDRList = []]
		[#local MasterCIDWList  = []]
		[#local MasterCIDPList  = []]
		[#local MemoryRegion = ""]
		[#local RegionNameList = []]
		[#list mx_RIF_Params.entrySet() as RIF_Params]
			[#if (RIF_Params.key)?? && RIF_Params.key == RisabElmt]
			[#local value = RIF_Params.value]
				[#list value.entrySet() as risabTable_params]
					[#-- Converting Risab params Strings to Map Section BEGIN--]
					[#local RegionName= risabTable_params.value[Name]]
					[#local RegionNameMap= srvc_str_toMap(RegionName)]

					[#local RegionOwner= risabTable_params.value[Owner]]
					[#local OwnerMap= srvc_str_toMap(RegionOwner)]

					[#local RegionSecurity= risabTable_params.value[Security]]
					[#local SecurityMap= srvc_str_toMap(RegionSecurity)]

					[#local RegionPrivilege= risabTable_params.value[Privilege]]
					[#local PrivilegeMap= srvc_str_toMap(RegionPrivilege)]

					[#local RegionStartAddress= risabTable_params.value[StartAdress]]
					[#local StartAddressMap= srvc_str_toMap(RegionStartAddress)]

					[#local RegSize= risabTable_params.value[RegionSize]]
					[#local RegionSizeMap= srvc_str_toMap(RegSize)]

					[#local RegionCIDFiltering= risabTable_params.value[CidsFiltering]]
					[#local CIDFilteringMap= srvc_str_toMap(RegionCIDFiltering)]

					[#local RegionMasterCIDs=risabTable_params.value[MasterCIDs]]
					[#local MasterCIDsMap= srvc_str_toMap(RegionMasterCIDs)]

					[#list RegionNameMap?keys as RegionNameKey]
						[#if RegionNameMap[RegionNameKey]?trim!=""]
							[#local RegionNameList=RegionNameList+[RegionNameMap[RegionNameKey]]]
							[#list RegionSizeMap?keys as RegionSizeKey]
								[#if RegionSizeMap[RegionSizeKey]!="0x0" ]
									[#local MemoryRegion = MemoryRegion + "<&"+RegionNameMap[RegionNameKey]?lower_case+">, " ]
								[/#if]
							[/#list]
						[/#if]
					[/#list]

					[#list OwnerMap?keys as RegionOwnerKey]
						[#if OwnerMap[RegionOwnerKey]!=""]
							[#local OwnerList=OwnerList+[OwnerMap[RegionOwnerKey]]]
						[/#if]
					[/#list]

					[#list SecurityMap?keys as RegionSecurityKey]
						[#if SecurityMap[RegionSecurityKey]!=""]
							[#local SecurityList=SecurityList+[SecurityMap[RegionSecurityKey]]]
						[/#if]
					[/#list]

					[#list PrivilegeMap?keys as RegionPrivilegeKey]
						[#if PrivilegeMap[RegionPrivilegeKey]!=""]
							[#local PrivilegeList=PrivilegeList+[PrivilegeMap[RegionPrivilegeKey]]]
						[/#if]
					[/#list]

					[#list RegionSizeMap?keys as RegionSizeKey]
						[#if (risabTable_params.value[Name])?matches("^\\{.+=.+\\}$")][#-- to discard empty region names --]
							[#local RegionSizeList=RegionSizeList+[RegionSizeMap[RegionSizeKey]]]
						[/#if]
					[/#list]

					[#list CIDFilteringMap?keys as RegionCIDFilteringKey]
						[#if CIDFilteringMap[RegionCIDFilteringKey]!=""]
							[#local CidFilteringList=CidFilteringList+[CIDFilteringMap[RegionCIDFilteringKey]]]
						[/#if]
					[/#list]

					[#-- Master CIDs parsing parameters and formatting section BEGIN --]
					[#list MasterCIDsMap?keys as MasterCIDsKey]
						[#local MasterCIDsList_formatted=[]]
						[#if (risabTable_params.value[Name])?matches("^\\{.+=.+\\}$")][#-- to discard empty region names --]
							[#local MasterCIDsList = MasterCIDsMap[MasterCIDsKey]]
						[/#if]
					[/#list]

					[#local counter=0]
					[#local MasterCIDIndex=0]
					[#local MasterCIRP=[]]
					[#local MasterCIDR=""]
					[#local MasterCIDW=""]
					[#local MasterCIDP=""]
					[#list MasterCIDsList?keep_before("]")?keep_after("[")?word_list as MCIDValue]
							[#if (counter%MasterCIDsGrpofTHREE)==0 && (risabTable_params.value[Name])?matches("^\\{.+=.+\\}$")]
									[#local MasterCIDR=MasterCIDR + ((MCIDValue?replace(",",""))=="true")?then("RIF_CID"+ MasterCIDIndex+"_BF|","")]
							[/#if]
							[#if ((counter+2)%MasterCIDsGrpofTHREE)==0 && (risabTable_params.value[Name])?matches("^\\{.+=.+\\}$")]
									[#local MasterCIDW = MasterCIDW + ((MCIDValue?replace(",",""))=="true")?then("RIF_CID" + MasterCIDIndex + "_BF|" , "")]
							[/#if]
							[#if ((counter+1)%MasterCIDsGrpofTHREE)==0 && (risabTable_params.value[Name])?matches("^\\{.+=.+\\}$")]
									[#local MasterCIDP = MasterCIDP + ((MCIDValue?replace(",",""))=="true")?then("RIF_CID" + MasterCIDIndex + "_BF|" ,"")]
									[#local MasterCIDIndex = MasterCIDIndex+1] [#-- Master CIDW shared with next list --]
							[/#if]
							[#local counter=counter+1]
					[/#list]
					[#local MasterCIDRList = MasterCIDRList+ [MasterCIDR?keep_before_last("|")]]
					[#local MasterCIDWList = MasterCIDWList+ [MasterCIDW?keep_before_last("|")]]
					[#local MasterCIDPList = MasterCIDPList+ [MasterCIDP?keep_before_last("|")]]
					[#-- Master CIDs parsing parameters and formatting section END --]
				[/#list]
			[/#if]
		[/#list]
	[/#compress]
#n
[#local generateNodeRisab = false]
[#list RegionSizeList as RegionSizeElmt]
	[#if (RegionSizeElmt!="0x0")]
		[#local generateNodeRisab = true]
	[/#if]
[/#list]
[#if generateNodeRisab ==true && MemoryRegion!=""]
${TABnode}&${RisabElmt?lower_case}{
#n
${TABprop}[#if IsSRWIAD ==true]st,srwiad;[/#if]
${TABprop}memory-region = ${MemoryRegion?keep_before_last(",")+";"}
${TABnode}};
[#list RegionNameList as RegionNameElmt]
#n
[#if (RegionSizeList[RegionNameElmt?index]!="0x0")]
${TABnode}&${RegionNameElmt?trim?replace("-","_")?lower_case}{
#n
[#local rifCID=""]
	[#if (OwnerList[RegionNameElmt?index] == "TDCID")]
	[#local rifCID="0"]
		[#elseif (OwnerList[RegionNameElmt?index] == "CA35")]
			[#local rifCID="RIF_CID1"]
		[#elseif (OwnerList[RegionNameElmt?index] == "CM33")]
			[#local rifCID="RIF_CID2"]
		[#elseif (OwnerList[RegionNameElmt?index] == "CM0+")]
			[#local rifCID="RIF_CID3"]
	[/#if]
${TABprop}st,protreg = <RISABPROT(${(OwnerList[RegionNameElmt?index]=="TDCID")?then("RIF_DDCID_DIS","RIF_DDCID_EN")}, ${rifCID},${(SecurityList[RegionNameElmt?index]=="true")?then("RIF_SEC","RIF_NSEC")}, ${(PrivilegeList[RegionNameElmt?index]=="true")?then("RIF_PRIV","RIF_NPRIV")}, ${(CidFilteringList[RegionNameElmt?index]=="true")?then("RIF_CFEN","RIF_CFDIS")}, ${((MasterCIDRList[RegionNameElmt?index]?length)>0)?then(MasterCIDRList[RegionNameElmt?index],"0")}, ${((MasterCIDWList[RegionNameElmt?index]?length)>0)?then(MasterCIDWList[RegionNameElmt?index],"0")}, ${((MasterCIDPList[RegionNameElmt?index]?length)>0)?then(MasterCIDPList[RegionNameElmt?index], "0")})>;
${TABnode}};
[/#if]
[/#list]
[/#if]
[/#list]
[/#macro]

[#macro bind_RISAF	pElmt pDtLevel]
[#local Tabulation=dts_get_tabs(pDtLevel)]
[#local TABnode = Tabulation.TABN]
[#local TABprop = Tabulation.TABP]
[#local MCIDsGrpofTHREE = 3]
[#local UiRegionID_Index = 1]
[#local UiRegionName_Index = 2]
[#local UiStartAddress_Index = 3]
[#local UiRegionSize_Index = 4]
[#local UiMasterCIDs_Index = 5]
[#local UiSecure_Index = 6]
[#local UiEncrypt_Index = 7]
[#local RisafList = ["risaf1","risaf2","risaf4","risaf5"]][#--these must be the same keys in MCUDataModel: it identifys the supported panels --]
[#list RisafList as RisafElmt]
[#--	- Common section  with st-stm32mp-reserved-memory_v1.0_Binding.ftl BEGIN
        - If any update in this section, resmemories_dts.ftl must be updated also   --]
	[#compress]
		[#-- Risaf Column values--]
		[#local RegionNameList = []]
		[#local StartAddressList = []]
		[#local RegionSizeList = []]
		[#local RegionIDList = []]
		[#local SecureList = []]
		[#local EncryptList = []]
		[#local MasterCIDsList = []]
		[#local MasterCIDRList = []]
		[#local MasterCIDWList  = []]
		[#local MasterCIDPList  = []]
		[#local MemoryRegion = ""]
		[#local MemoryRegionName = ""]
		[#list mx_RIF_Params.entrySet() as RIF_Params]
			[#if (RIF_Params.key)?? && RIF_Params.key == RisafElmt]
				[#local BKPSRAMTable = RIF_Params.value]
				[#list BKPSRAMTable.entrySet() as RISAFTable_params]
					[#--uncomment for debugging:    ${RISAFTable_params}--]
					[#-- Converting Risaf params Strings to Map Section BEGIN--]
					[#local RegionName= RISAFTable_params.value[UiRegionName_Index]]
					[#local RegionNameMap= srvc_str_toMap(RegionName)]

					[#local RegionID= RISAFTable_params.value[UiRegionID_Index]]
					[#local RegionIDMap= srvc_str_toMap(RegionID)]

					[#local MasterCIDs=RISAFTable_params.value[UiMasterCIDs_Index]]
					[#local MasterCIDsMap= srvc_str_toMap(MasterCIDs)]

					[#local Secure= RISAFTable_params.value[UiSecure_Index]]
					[#local SecureMap= srvc_str_toMap(Secure)]

					[#local Secure= RISAFTable_params.value[UiSecure_Index]]
					[#local SecureMap= srvc_str_toMap(Secure)]

					[#local Encrypt= RISAFTable_params.value[UiEncrypt_Index]]
					[#local EncryptMap= srvc_str_toMap(Encrypt)]

					[#local StartAddress= RISAFTable_params.value[UiStartAddress_Index]]
					[#local StartAddressMap= srvc_str_toMap(StartAddress)]

					[#local RegionSize= RISAFTable_params.value[UiRegionSize_Index]]
					[#local RegionSizeMap= srvc_str_toMap(RegionSize)]
					[#-- Converting Risaf params Strings to Map Section END--]

					[#list RegionNameMap?keys as RegionNameKey]
						[#if RegionNameMap[RegionNameKey]?trim!=""]
							[#local RegionNameList=RegionNameList+[RegionNameMap[RegionNameKey]]]
							[#list RegionSizeMap?keys as RegionSizeKey]
								[#if RegionSizeMap[RegionSizeKey]!="0x0" ]
									[#local MemoryRegion = MemoryRegion + "<&"+RegionNameMap[RegionNameKey]?trim?replace("-","_")?lower_case+">, " ]
									[#local MemoryRegionName = MemoryRegionName +RegionNameMap[RegionNameKey]?trim?replace("-","_")?lower_case+", " ]
								[/#if]
							[/#list]
						[/#if]
					[/#list]

					[#list StartAddressMap?keys as StartAddressKey]
						[#if (RISAFTable_params.value[UiRegionName_Index])?matches("^\\{.+=.+\\}$")][#-- to discard empty region names --]
							[#local StartAddressList=StartAddressList+[StartAddressMap[StartAddressKey]]]
						[/#if]
					[/#list]

					[#list RegionSizeMap?keys as RegionSizeKey]
						[#if (RISAFTable_params.value[UiRegionName_Index])?matches("^\\{.+=.+\\}$")][#-- to discard empty region names --]
							[#local RegionSizeList=RegionSizeList+[RegionSizeMap[RegionSizeKey]]]
						[/#if]
					[/#list]

					[#list RegionIDMap?keys as RegionIDKey]
						[#if (RISAFTable_params.value[UiRegionName_Index])?matches("^\\{.+=.+\\}$")][#-- to discard empty region names --]
							[#local RegionIDList = RegionIDList + [RegionIDMap[RegionIDKey]]]
						[/#if]
					[/#list]

					[#-- Master CIDs parsing parameters and formatting section BEGIN --]
					[#list MasterCIDsMap?keys as MasterCIDsKey]
						[#local MasterCIDsList_formatted=[]]
						[#if (RISAFTable_params.value[UiRegionName_Index])?matches("^\\{.+=.+\\}$")][#-- to discard empty region names --]
							[#local MasterCIDsList = MasterCIDsMap[MasterCIDsKey]]
						[/#if]
					[/#list]
					[#local counter=0]
					[#local MasterCIDIndex=0]
					[#local MasterCIRP=[]]
					[#local MasterCIDR=""]
					[#local MasterCIDW=""]
					[#local MasterCIDP=""]
					[#list MasterCIDsList?keep_before("]")?keep_after("[")?word_list as MCIDValue]
							[#if (counter%MCIDsGrpofTHREE)==0 && (RISAFTable_params.value[UiRegionName_Index])?matches("^\\{.+=.+\\}$")]
									[#local MasterCIDR=MasterCIDR + ((MCIDValue?replace(",",""))=="true")?then("RIF_CID"+ MasterCIDIndex+"_BF|","")]
							[/#if]
							[#if ((counter+2)%MCIDsGrpofTHREE)==0 && (RISAFTable_params.value[UiRegionName_Index])?matches("^\\{.+=.+\\}$")]
									[#local MasterCIDW = MasterCIDW + ((MCIDValue?replace(",",""))=="true")?then("RIF_CID" + MasterCIDIndex + "_BF|" , "")]
							[/#if]
							[#if ((counter+1)%MCIDsGrpofTHREE)==0 && (RISAFTable_params.value[UiRegionName_Index])?matches("^\\{.+=.+\\}$")]
									[#local MasterCIDP = MasterCIDP + ((MCIDValue?replace(",",""))=="true")?then("RIF_CID" + MasterCIDIndex + "_BF|" ,"")]
									[#local MasterCIDIndex = MasterCIDIndex+1] [#-- Master CIDW shared with next list --]
							[/#if]
							[#local counter=counter+1]
					[/#list]
					[#local MasterCIDRList = MasterCIDRList+ [MasterCIDR?keep_before_last("|")]]
					[#local MasterCIDWList = MasterCIDWList+ [MasterCIDW?keep_before_last("|")]]
					[#local MasterCIDPList = MasterCIDPList+ [MasterCIDP?keep_before_last("|")]]
					[#-- Master CIDs parsing parameters and formatting section END --]

					[#list SecureMap?keys as SecureKey]
						[#if (RISAFTable_params.value[UiRegionName_Index])?matches("^\\{.+=.+\\}$")][#-- to discard empty region names --]
							[#local SecureList = SecureList + [((SecureMap[SecureKey])=="true")?then("RIF_SEC","RIF_NSEC")]][#-- to Format --]
						[/#if]
					[/#list]

					[#list EncryptMap?keys as EncryptKey]
						[#if (RISAFTable_params.value[UiRegionName_Index])?matches("^\\{.+=.+\\}$")][#-- to discard empty region names --]
							[#local EncryptList = EncryptList + [((EncryptMap[EncryptKey])=="true")?then("RIF_ENC_EN","RIF_ENC_DIS")]][#-- to Format --]
						[/#if]
					[/#list]

				[/#list]
			[/#if]
		[/#list]
	[/#compress]
[#--	common section with st-stm32mp-reserved-memory_v1.0_Binding.ftl END     --]
#n
[#if MemoryRegion!=""]
${TABnode}&${RisafElmt}{
#n
${TABprop}memory-region = ${MemoryRegion?keep_before_last(",")+";"}
};
[/#if]
[#list RegionNameList as RegionNameElmt]
#n
[#if (RegionSizeList[RegionNameElmt?index]!="0x0")]
${TABnode}&${RegionNameElmt?trim?replace("-","_")?lower_case}{
#n
${TABprop}st,protreg = <RISAFPROT(RISAF_REG_ID(${RegionIDList[RegionNameElmt?index]}), ${((MasterCIDRList[RegionNameElmt?index]?length)>0)?then(MasterCIDRList[RegionNameElmt?index],"0")}, ${((MasterCIDWList[RegionNameElmt?index]?length)>0)?then(MasterCIDWList[RegionNameElmt?index],"0")}, ${((MasterCIDPList[RegionNameElmt?index]?length)>0)?then(MasterCIDPList[RegionNameElmt?index],"0")}, ${SecureList[RegionNameElmt?index]}, ${EncryptList[RegionNameElmt?index]}, RIF_BREN_EN)>;
};
[/#if]
[/#list]
[#if RisafElmt=="risaf2" && RegionNameList?size<=2]
[#local semListUIIndex=0]
[#local secUIIndex=semListUIIndex+1]
[#local privUIIndex=secUIIndex+1]
[#local lockUIIndex=privUIIndex+1]
[#assign OmmanagerProp=["OCTOSPI1","OCTOSPI2","OCTOSPIM","OTFDEC1","OTFDEC2"]]
#n
&ommanager{
#n
${TABprop}st,protreg = <
[#list mx_RIF_Params.entrySet() as RIF_Params]
	[#if (RIF_Params.key)?? && RIF_Params.key == "RISUP"]
		[#local RISUP = RIF_Params.value]
		[#list RISUP.entrySet() as RISUP_Params]
			[#-- Columns Formatting Begin --]
			[#compress]
		    [#local RISUP_Formatted = RISUP_Params.value[1..]]	[#--remove ID from the list, not used in code gen ("1" represents used List start index ) --]
			[#-- RISUP_Formatted= CID_list~sem_list, sec, priv, lock --]
			[#local isCIDmatchesInt = RISUP_Formatted[semListUIIndex]?matches("[123456789]")]
			[#local isCIDZero = RISUP_Formatted[semListUIIndex]=="0"]
			
			[#-- Adding scid --]
			[#if isCIDmatchesInt]
            	[#local  RISUP_Formatted =  RISUP_Formatted+["RIF_CID"+RISUP_Formatted[semListUIIndex]]]
			[#else]
				[#local  RISUP_Formatted =  RISUP_Formatted+["RIF_UNUSED"]]
			[/#if]

			[#-- Formatting sem_list --]
			[#if isCIDZero]
				[#local RISUP_Formatted=["EMPTY_SEMWL"] + RISUP_Formatted[secUIIndex..]]
			[#elseif RISUP_Formatted[semListUIIndex]== "-"|| isCIDmatchesInt]
				[#local RISUP_Formatted=["RIF_UNUSED"] + RISUP_Formatted[secUIIndex..]]
			[#elseif RISUP_Formatted[semListUIIndex]?contains("&")]
				[#local CID = ""]
				[#list RISUP_Formatted[semListUIIndex]?split("&") as CIDx]
           			[#local CID =CID + "RIF_CID"+ CIDx +"_BF|"]
				[/#list]
				[#local CID =CID?remove_ending("|")]
			    [#local RISUP_Formatted =  [CID] + RISUP_Formatted[secUIIndex..]]
			[/#if]

			[#-- Formatting sec --]
			[#local RISUP_Formatted = [RISUP_Formatted[secUIIndex-1]] + [(RISUP_Formatted[secUIIndex]=="true")?then("RIF_SEC","RIF_NSEC")] + RISUP_Formatted[(secUIIndex+1)..]]

			[#-- Formatting priv --]
			[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..(privUIIndex-1)] + [(RISUP_Formatted[privUIIndex]== "true")?then("RIF_PRIV","RIF_NPRIV")] + RISUP_Formatted[(privUIIndex+1)..]]

			[#-- Formatting lock --]
			[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..(lockUIIndex-1)] + [(RISUP_Formatted[lockUIIndex]== "true")?then("RIF_LOCK","RIF_UNLOCK")] + RISUP_Formatted[(lockUIIndex+1)..]]

			[#-- Adding sem_en --]
			[#if isCIDZero]
				[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..4] + [(RISUP_Formatted[semListUIIndex]== "EMPTY_SEMWL")?then("RIF_SEM_EN","RIF_SEM_DIS")] ]
			[#else]
				[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..4] + [(RISUP_Formatted[semListUIIndex]== "RIF_UNUSED")?then("RIF_SEM_DIS","RIF_SEM_EN")] ]
			[/#if]
			[#-- Adding cfen --]
			[#if isCIDZero ||(RISUP_Formatted[5] == "RIF_SEM_EN")||((RISUP_Formatted[5] == "RIF_SEM_DIS")&&(RISUP_Formatted[4]?matches("RIF_CID\\d")))]
				[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..5] + ["RIF_CFEN"] ]
			[#elseif (RISUP_Formatted[semListUIIndex]== "RIF_UNUSED")&&(RISUP_Formatted[4]=="RIF_UNUSED")]
				[#local RISUP_Formatted = RISUP_Formatted[semListUIIndex..5] + ["RIF_CFDIS"] ]
			[/#if]

			[#-- swapping lock, sec, priv  from RIFPROT(rifid, sem_list, "sec", "priv", "lock", scid, sem_en, cfen) to RIFPROT(rifid, sem_list, "lock", "sec", "priv", scid, sem_en, cfen)  --]
			[#local RISUP_Formatted = [RISUP_Formatted[semListUIIndex]] +[RISUP_Formatted[lockUIIndex]] +[RISUP_Formatted[secUIIndex]] +[RISUP_Formatted[privUIIndex]] +RISUP_Formatted[4..]]

			[#-- Columns Formatting END--]
			[/#compress]
			[#--displaying RIFPROT macro --]
			[#local RISUP_values =""]
			[#list RISUP_Formatted as RISUP_Params_values]
            		[#if RISUP_Params_values?has_next]
 						[#local RISUP_values += RISUP_Params_values + ", "]
 					[#else]
  						[#local RISUP_values += RISUP_Params_values]
  					[/#if]
			[/#list]
[#if OmmanagerProp?seq_contains(RISUP_Params.key)]
${TABnode}${TABprop}${TABprop}RIFPROT(STM32MP25_RIFSC_${RISUP_Params.key}_ID, ${RISUP_values})
[/#if]
		[/#list]
	[/#if]
[/#list]
${TABprop}>;
#n
${TABprop}/* USER CODE BEGIN ommanager */
${TABprop}/* USER CODE END ommanager */
};
[/#if]
[/#list]
[/#macro]


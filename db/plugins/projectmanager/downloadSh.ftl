[#ftl]
#!/bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

error_config()
{
  printf "${dollar}{RED}"
  echo
  echo "====="
  if [ -z "$1" ]; then
  echo "===== Error occurred."
  else
  echo "===== Error occurred. ($1)"
  fi
  echo "===== See $current_log_file for details. Then try regression.sh."
  echo "====="
  printf "${dollar}{NO}"
  if [ "$mode" != "AUTO" ]; then $SHELL; fi #keep windows open
  exit 1
}

sucess_config()
{
  printf "${dollar}{GREEN}"
  echo "       Successful installation"
  echo
  # ============================================================= End functions ===================================================
  # All the steps were executed correctly
  echo "====="
  echo "===== The non-secure application is correctly updated"
  echo "====="
  printf "${dollar}{NO}"
  if [ "$mode" != "AUTO" ]; then $SHELL; fi #keep windows open
}

install_package()
{
  echo "Please get STM32H5 Secure Manager package from st.com." |tee -a "$current_log_file"
  error_config
}

thispath=$(dirname $(realpath -s $0))
current_log_file="$thispath/download.log"
if [ -x $stm32programmercli ] || [ -x $projectdir ]; then
  if [ -e "$thispath/env.sh" ]; then
    source "$thispath/env.sh"
    if [ -e "$provisioningdir/env.sh" ]; then
      source "$provisioningdir/env.sh"
    else
      echo "env.sh missing"
      install_package
    fi
  else
    echo "env.sh missing"
    install_package
  fi
fi
mode=$1
echo "Generated by sh"> "$current_log_file"
path_binary="../Binary/${output_file_name}"
xml="SM/Images/SM_Code_Image.xml"
read_xml="SM/Helper/read_xml.sh"

#Environment variables for STM32CubeProgammer
vb=1
reset="-hardRst"
connect="-c port=SWD speed=fast ap=1 mode=HotPlug -vb $vb"
write_dbgmcu="-w32dbgmcu"
#Value to jump in bootloader - STBL in ASCII
stbl_dbgmcu=0x5354424c
#Reset value
raz_dbgmcu=0x00000000

#============================================================= Start =============================================================
echo "   * Step 0 : Verification of the binary" >> "$current_log_file"
if [ ! -e "$path_binary" ]; then
  echo "$path_binary not exist, please build your application" >> $current_log_file
  error_config "step0"
fi
echo "   * Step 1 : Jump to bootloader" >> "$current_log_file"
"$stm32programmercli" $connect $write_dbgmcu $stbl_dbgmcu $reset >> "$current_log_file"
if [ $? -ne 0 ]; then
  error_config "step1"
fi
sleep 1s

echo "   * Step 2 : Download non-secure application in download area" >> $"current_log_file"

# Retrieve the sizes of the non-secure application and the desired non-secure reserved area
size_slot=$($read_xml $xml "Firmware area Size" "Param")
offset=$($read_xml $xml "Firmware download area offset" "Param")

"$stm32programmercli" $connect -fillmemory $offset size=$size_slot pattern=0xFF >> "$current_log_file"
if [ $? -ne 0 ]; then
  error_config "step2a"
fi

"$stm32programmercli" $connect -d $path_binary -v>> "$current_log_file"
if [ $? -ne 0 ]; then
  error_config "step2b"
fi

echo "   * Step 3 : Reset to swap download area and active area" >> "$current_log_file"
"$stm32programmercli" $connect $write_dbgmcu $raz_dbgmcu $reset >> "$current_log_file"
if [ $? -ne 0 ]; then
  error_config "step3"
fi
sleep 1s
sucess_config
